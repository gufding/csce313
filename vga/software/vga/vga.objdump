
vga.elf:     file format elf32-littlenios2
vga.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0003bb60 memsz 0x0003bb60 flags r-x
    LOAD off    0x0003cb80 vaddr 0x0803bb80 paddr 0x0803d2b8 align 2**12
         filesz 0x00001738 memsz 0x00001738 flags rw-
    LOAD off    0x0003e9f0 vaddr 0x0803e9f0 paddr 0x0803e9f0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003460  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000384dc  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001738  0803bb80  0803d2b8  0003cb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0803e9f0  0803e9f0  0003e9f0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_0 00000000  0803eb10  0803eb10  0003e2b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0003e2b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005b0  00000000  00000000  0003e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007c39  00000000  00000000  0003e890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000292b  00000000  00000000  000464c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002e9a  00000000  00000000  00048df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cb8  00000000  00000000  0004bc90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e4e  00000000  00000000  0004c948  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000836  00000000  00000000  0004e796  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0004efcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000188  00000000  00000000  0004f000  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00050eee  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00050ef1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00050efd  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00050efe  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00050eff  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00050f03  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  00050f07  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00050f0b  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001a  00000000  00000000  00050f16  2**0
                  CONTENTS, READONLY
 26 .jdi          00005174  00000000  00000000  00050f30  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00063d9f  00000000  00000000  000560a4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
080036a4 l    d  .rodata	00000000 .rodata
0803bb80 l    d  .rwdata	00000000 .rwdata
0803e9f0 l    d  .bss	00000000 .bss
0803eb10 l    d  .sdram_controller_0	00000000 .sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../vga_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 myfile.c
00000000 l    df *ABS*	00000000 alt_load.c
080003dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08000528 l     F .text	00000034 alt_dev_reg
0803bb80 l     O .rwdata	00001060 jtag_uart_0
0803cbe0 l     O .rwdata	00000048 video_character_buffer_with_dma_0
0803cc28 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0803cc7c l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08000b74 l     F .text	0000020c altera_avalon_jtag_uart_irq
08000d80 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08002678 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080027cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080027f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0803ce68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0803ea08 g     O .bss	00000004 alt_instruction_exception_handler
080004c8 g     F .text	00000060 alt_main
08001f6c g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
0803ea10 g     O .bss	00000100 alt_irq
0803d2b8 g       *ABS*	00000000 __flash_rwdata_start
08001540 g     F .text	000000fc alt_up_char_buffer_string
08001474 g     F .text	000000cc alt_up_char_buffer_draw
080016d4 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
08002f04 g     F .text	00000024 altera_nios2_gen2_irq_init
08001698 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0803ea0c g     O .bss	00000004 errno
0803e9f4 g     O .bss	00000004 alt_argv
0804528c g       *ABS*	00000000 _gp
08001868 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0803cce8 g     O .rwdata	00000180 alt_fd_list
08002998 g     F .text	00000090 alt_find_dev
0800311c g     F .text	00000148 memcpy
0800163c g     F .text	0000005c alt_up_char_buffer_clear
080036a4 g       *ABS*	00000000 __DTOR_END__
08002fb8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08001924 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08000f78 g     F .text	0000021c altera_avalon_jtag_uart_read
08001d5c g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
08002f28 g     F .text	00000090 alt_icache_flush
08002280 g     F .text	00000084 helper_plot_pixel
0803d29c g     O .rwdata	00000004 alt_max_fd
08001958 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller_0
0803d2b0 g     O .rwdata	00000004 _global_impure_ptr
0803eb10 g       *ABS*	00000000 __bss_end
08002c0c g     F .text	000000f0 alt_iic_isr_register
08001a80 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
08002dfc g     F .text	00000108 alt_tick
08002bc0 g     F .text	0000004c alt_ic_irq_enabled
08002d60 g     F .text	0000009c alt_alarm_stop
080036c2 g     O .rodata	00038401 myimage
0803e9fc g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
0803ccc0 g     O .rwdata	00000028 alt_dev_null
08002784 g     F .text	00000048 alt_dcache_flush_all
080021b8 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0803d2b8 g       *ABS*	00000000 __ram_rwdata_end
0803d294 g     O .rwdata	00000008 alt_dev_list
08002304 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
0803bb80 g       *ABS*	00000000 __ram_rodata_end
0803eb10 g       *ABS*	00000000 end
080013b8 g     F .text	00000080 alt_up_char_buffer_init
08000ab4 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
080036a4 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08001194 g     F .text	00000224 altera_avalon_jtag_uart_write
080034f0 g     F .text	00000180 __call_exitprocs
08000244 g     F .text	0000004c _start
0803ea00 g     O .bss	00000004 _alt_tick_rate
0803ea04 g     O .bss	00000004 _alt_nticks
08000594 g     F .text	000003bc alt_sys_init
080033d8 g     F .text	00000118 __register_exitproc
08000e20 g     F .text	00000068 altera_avalon_jtag_uart_close
0803bb80 g       *ABS*	00000000 __ram_rwdata_start
080036a4 g       *ABS*	00000000 __ram_rodata_start
08000950 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080030a0 g     F .text	0000007c memcmp
08000a10 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0803eb10 g       *ABS*	00000000 __alt_stack_base
08000a60 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002834 g     F .text	000000a4 alt_dev_llist_insert
0803e9f0 g       *ABS*	00000000 __bss_start
08000290 g     F .text	0000014c main
0803e9f8 g     O .bss	00000004 alt_envp
080018c4 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08001438 g     F .text	0000003c alt_up_char_buffer_open_dev
080009b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0803d2a0 g     O .rwdata	00000004 alt_errno
080036a4 g       *ABS*	00000000 __CTOR_END__
08003264 g     F .text	000000dc strcmp
080036a4 g       *ABS*	00000000 __flash_rodata_start
080036a4 g       *ABS*	00000000 __DTOR_LIST__
0800055c g     F .text	00000038 alt_irq_init
08002cfc g     F .text	00000064 alt_release_fd
08003054 g     F .text	00000014 atexit
0803d2b4 g     O .rwdata	00000004 _impure_ptr
0803e9f0 g     O .bss	00000004 alt_argc
08002938 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
0803d28c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08002a5c g     F .text	00000050 alt_ic_isr_register
0803d2b8 g       *ABS*	00000000 _edata
0803eb10 g       *ABS*	00000000 _end
08000244 g       *ABS*	00000000 __ram_exceptions_end
08000e88 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08002b34 g     F .text	0000008c alt_ic_irq_disable
08003068 g     F .text	00000038 exit
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08003670 g     F .text	00000034 _exit
0800254c g     F .text	0000012c alt_alarm_start
08003340 g     F .text	00000098 strlen
08002a28 g     F .text	00000034 alt_icache_flush_all
0803d2a4 g     O .rwdata	00000004 alt_priority_mask
08002aac g     F .text	00000088 alt_ic_irq_enable
0803d2a8 g     O .rwdata	00000008 alt_alarm_list
080028d8 g     F .text	00000060 _do_ctors
080026b4 g     F .text	000000d0 close
08000444 g     F .text	00000084 alt_load



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820134 	movhi	r2,2052
 8000140:	10ba8404 	addi	r2,r2,-5616
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820134 	movhi	r2,2052
 8000158:	10ba8404 	addi	r2,r2,-5616
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a5df17 	ldw	r2,-26756(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a5df17 	ldw	r2,-26756(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820134 	movhi	gp,2052
    ori gp, gp, %lo(_gp)
 8000260:	d694a314 	ori	gp,gp,21132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	008200f4 	movhi	r2,2051
    ori r2, r2, %lo(__bss_start)
 8000268:	10ba7c14 	ori	r2,r2,59888

    movhi r3, %hi(__bss_end)
 800026c:	00c200f4 	movhi	r3,2051
    ori r3, r3, %lo(__bss_end)
 8000270:	18fac414 	ori	r3,r3,60176

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	80004440 	call	8000444 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	80004c80 	call	80004c8 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <main>:
#include <altera_up_avalon_video_pixel_buffer_dma.h>
#include <math.h>
#include <stdlib.h>
#include "myfile.h"

int main() {
 8000290:	defffb04 	addi	sp,sp,-20
 8000294:	dfc00415 	stw	ra,16(sp)
 8000298:	df000315 	stw	fp,12(sp)
 800029c:	df000304 	addi	fp,sp,12
  myimage[230401];
  alt_up_pixel_buffer_dma_dev *pix_buf;
  pix_buf = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 80002a0:	01020034 	movhi	r4,2048
 80002a4:	210da904 	addi	r4,r4,13988
 80002a8:	80016980 	call	8001698 <alt_up_pixel_buffer_dma_open_dev>
 80002ac:	e0bfff15 	stw	r2,-4(fp)
  alt_up_pixel_buffer_dma_clear_screen(pix_buf, 0);
 80002b0:	000b883a 	mov	r5,zero
 80002b4:	e13fff17 	ldw	r4,-4(fp)
 80002b8:	80019580 	call	8001958 <alt_up_pixel_buffer_dma_clear_screen>
  
  for (int i = 0; i < 320; i++) {
 80002bc:	e03ffd15 	stw	zero,-12(fp)
 80002c0:	00003d06 	br	80003b8 <main+0x128>
    for (int j = 0; j < 480; j++) {
 80002c4:	e03ffe15 	stw	zero,-8(fp)
 80002c8:	00003506 	br	80003a0 <main+0x110>
      alt_up_pixel_buffer_dma_draw(pix_buf, (myimage[(i*320+j)*3+0] << 16) +
 80002cc:	e0bffd17 	ldw	r2,-12(fp)
 80002d0:	10c05024 	muli	r3,r2,320
 80002d4:	e0bffe17 	ldw	r2,-8(fp)
 80002d8:	1887883a 	add	r3,r3,r2
 80002dc:	1805883a 	mov	r2,r3
 80002e0:	1085883a 	add	r2,r2,r2
 80002e4:	10c7883a 	add	r3,r2,r3
 80002e8:	00820034 	movhi	r2,2048
 80002ec:	108db084 	addi	r2,r2,14018
 80002f0:	10c5883a 	add	r2,r2,r3
 80002f4:	10800003 	ldbu	r2,0(r2)
 80002f8:	10803fcc 	andi	r2,r2,255
 80002fc:	1008943a 	slli	r4,r2,16
       (myimage[(i*320+j)*3+1]<<8) + (myimage[(i*320+j)*3+2]), j, i);
 8000300:	e0bffd17 	ldw	r2,-12(fp)
 8000304:	10c05024 	muli	r3,r2,320
 8000308:	e0bffe17 	ldw	r2,-8(fp)
 800030c:	1887883a 	add	r3,r3,r2
 8000310:	1805883a 	mov	r2,r3
 8000314:	1085883a 	add	r2,r2,r2
 8000318:	10c5883a 	add	r2,r2,r3
 800031c:	10c00044 	addi	r3,r2,1
 8000320:	00820034 	movhi	r2,2048
 8000324:	108db084 	addi	r2,r2,14018
 8000328:	10c5883a 	add	r2,r2,r3
 800032c:	10800003 	ldbu	r2,0(r2)
 8000330:	10803fcc 	andi	r2,r2,255
 8000334:	1004923a 	slli	r2,r2,8
  pix_buf = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  alt_up_pixel_buffer_dma_clear_screen(pix_buf, 0);
  
  for (int i = 0; i < 320; i++) {
    for (int j = 0; j < 480; j++) {
      alt_up_pixel_buffer_dma_draw(pix_buf, (myimage[(i*320+j)*3+0] << 16) +
 8000338:	2089883a 	add	r4,r4,r2
       (myimage[(i*320+j)*3+1]<<8) + (myimage[(i*320+j)*3+2]), j, i);
 800033c:	e0bffd17 	ldw	r2,-12(fp)
 8000340:	10c05024 	muli	r3,r2,320
 8000344:	e0bffe17 	ldw	r2,-8(fp)
 8000348:	1887883a 	add	r3,r3,r2
 800034c:	1805883a 	mov	r2,r3
 8000350:	1085883a 	add	r2,r2,r2
 8000354:	10c5883a 	add	r2,r2,r3
 8000358:	10c00084 	addi	r3,r2,2
 800035c:	00820034 	movhi	r2,2048
 8000360:	108db084 	addi	r2,r2,14018
 8000364:	10c5883a 	add	r2,r2,r3
 8000368:	10800003 	ldbu	r2,0(r2)
 800036c:	10803fcc 	andi	r2,r2,255
 8000370:	2085883a 	add	r2,r4,r2
  pix_buf = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  alt_up_pixel_buffer_dma_clear_screen(pix_buf, 0);
  
  for (int i = 0; i < 320; i++) {
    for (int j = 0; j < 480; j++) {
      alt_up_pixel_buffer_dma_draw(pix_buf, (myimage[(i*320+j)*3+0] << 16) +
 8000374:	1009883a 	mov	r4,r2
 8000378:	e0bffe17 	ldw	r2,-8(fp)
 800037c:	e0fffd17 	ldw	r3,-12(fp)
 8000380:	180f883a 	mov	r7,r3
 8000384:	100d883a 	mov	r6,r2
 8000388:	200b883a 	mov	r5,r4
 800038c:	e13fff17 	ldw	r4,-4(fp)
 8000390:	80016d40 	call	80016d4 <alt_up_pixel_buffer_dma_draw>
  alt_up_pixel_buffer_dma_dev *pix_buf;
  pix_buf = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  alt_up_pixel_buffer_dma_clear_screen(pix_buf, 0);
  
  for (int i = 0; i < 320; i++) {
    for (int j = 0; j < 480; j++) {
 8000394:	e0bffe17 	ldw	r2,-8(fp)
 8000398:	10800044 	addi	r2,r2,1
 800039c:	e0bffe15 	stw	r2,-8(fp)
 80003a0:	e0bffe17 	ldw	r2,-8(fp)
 80003a4:	10807810 	cmplti	r2,r2,480
 80003a8:	103fc81e 	bne	r2,zero,80002cc <main+0x3c>
  myimage[230401];
  alt_up_pixel_buffer_dma_dev *pix_buf;
  pix_buf = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
  alt_up_pixel_buffer_dma_clear_screen(pix_buf, 0);
  
  for (int i = 0; i < 320; i++) {
 80003ac:	e0bffd17 	ldw	r2,-12(fp)
 80003b0:	10800044 	addi	r2,r2,1
 80003b4:	e0bffd15 	stw	r2,-12(fp)
 80003b8:	e0bffd17 	ldw	r2,-12(fp)
 80003bc:	10805010 	cmplti	r2,r2,320
 80003c0:	103fc01e 	bne	r2,zero,80002c4 <main+0x34>
    for (int j = 0; j < 480; j++) {
      alt_up_pixel_buffer_dma_draw(pix_buf, 75, j, i);
    }
  }*/
  
  return 0;
 80003c4:	0005883a 	mov	r2,zero
}
 80003c8:	e037883a 	mov	sp,fp
 80003cc:	dfc00117 	ldw	ra,4(sp)
 80003d0:	df000017 	ldw	fp,0(sp)
 80003d4:	dec00204 	addi	sp,sp,8
 80003d8:	f800283a 	ret

080003dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80003dc:	defffc04 	addi	sp,sp,-16
 80003e0:	df000315 	stw	fp,12(sp)
 80003e4:	df000304 	addi	fp,sp,12
 80003e8:	e13ffd15 	stw	r4,-12(fp)
 80003ec:	e17ffe15 	stw	r5,-8(fp)
 80003f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80003f4:	e0fffe17 	ldw	r3,-8(fp)
 80003f8:	e0bffd17 	ldw	r2,-12(fp)
 80003fc:	18800c26 	beq	r3,r2,8000430 <alt_load_section+0x54>
  {
    while( to != end )
 8000400:	00000806 	br	8000424 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8000404:	e0bffe17 	ldw	r2,-8(fp)
 8000408:	10c00104 	addi	r3,r2,4
 800040c:	e0fffe15 	stw	r3,-8(fp)
 8000410:	e0fffd17 	ldw	r3,-12(fp)
 8000414:	19000104 	addi	r4,r3,4
 8000418:	e13ffd15 	stw	r4,-12(fp)
 800041c:	18c00017 	ldw	r3,0(r3)
 8000420:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8000424:	e0fffe17 	ldw	r3,-8(fp)
 8000428:	e0bfff17 	ldw	r2,-4(fp)
 800042c:	18bff51e 	bne	r3,r2,8000404 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8000430:	0001883a 	nop
 8000434:	e037883a 	mov	sp,fp
 8000438:	df000017 	ldw	fp,0(sp)
 800043c:	dec00104 	addi	sp,sp,4
 8000440:	f800283a 	ret

08000444 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8000444:	defffe04 	addi	sp,sp,-8
 8000448:	dfc00115 	stw	ra,4(sp)
 800044c:	df000015 	stw	fp,0(sp)
 8000450:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8000454:	01820134 	movhi	r6,2052
 8000458:	31b4ae04 	addi	r6,r6,-11592
 800045c:	01420134 	movhi	r5,2052
 8000460:	296ee004 	addi	r5,r5,-17536
 8000464:	01020134 	movhi	r4,2052
 8000468:	2134ae04 	addi	r4,r4,-11592
 800046c:	80003dc0 	call	80003dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8000470:	01820034 	movhi	r6,2048
 8000474:	31809104 	addi	r6,r6,580
 8000478:	01420034 	movhi	r5,2048
 800047c:	29400804 	addi	r5,r5,32
 8000480:	01020034 	movhi	r4,2048
 8000484:	21000804 	addi	r4,r4,32
 8000488:	80003dc0 	call	80003dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800048c:	01820134 	movhi	r6,2052
 8000490:	31aee004 	addi	r6,r6,-17536
 8000494:	01420034 	movhi	r5,2048
 8000498:	294da904 	addi	r5,r5,13988
 800049c:	01020034 	movhi	r4,2048
 80004a0:	210da904 	addi	r4,r4,13988
 80004a4:	80003dc0 	call	80003dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80004a8:	80027840 	call	8002784 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80004ac:	8002a280 	call	8002a28 <alt_icache_flush_all>
}
 80004b0:	0001883a 	nop
 80004b4:	e037883a 	mov	sp,fp
 80004b8:	dfc00117 	ldw	ra,4(sp)
 80004bc:	df000017 	ldw	fp,0(sp)
 80004c0:	dec00204 	addi	sp,sp,8
 80004c4:	f800283a 	ret

080004c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80004c8:	defffd04 	addi	sp,sp,-12
 80004cc:	dfc00215 	stw	ra,8(sp)
 80004d0:	df000115 	stw	fp,4(sp)
 80004d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80004d8:	0009883a 	mov	r4,zero
 80004dc:	800055c0 	call	800055c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80004e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80004e4:	80005940 	call	8000594 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80004e8:	80028d80 	call	80028d8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80004ec:	01020034 	movhi	r4,2048
 80004f0:	210a4e04 	addi	r4,r4,10552
 80004f4:	80030540 	call	8003054 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80004f8:	d0a5d917 	ldw	r2,-26780(gp)
 80004fc:	d0e5da17 	ldw	r3,-26776(gp)
 8000500:	d125db17 	ldw	r4,-26772(gp)
 8000504:	200d883a 	mov	r6,r4
 8000508:	180b883a 	mov	r5,r3
 800050c:	1009883a 	mov	r4,r2
 8000510:	80002900 	call	8000290 <main>
 8000514:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8000518:	01000044 	movi	r4,1
 800051c:	80026b40 	call	80026b4 <close>
  exit (result);
 8000520:	e13fff17 	ldw	r4,-4(fp)
 8000524:	80030680 	call	8003068 <exit>

08000528 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8000528:	defffd04 	addi	sp,sp,-12
 800052c:	dfc00215 	stw	ra,8(sp)
 8000530:	df000115 	stw	fp,4(sp)
 8000534:	df000104 	addi	fp,sp,4
 8000538:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800053c:	d1600204 	addi	r5,gp,-32760
 8000540:	e13fff17 	ldw	r4,-4(fp)
 8000544:	80028340 	call	8002834 <alt_dev_llist_insert>
}
 8000548:	e037883a 	mov	sp,fp
 800054c:	dfc00117 	ldw	ra,4(sp)
 8000550:	df000017 	ldw	fp,0(sp)
 8000554:	dec00204 	addi	sp,sp,8
 8000558:	f800283a 	ret

0800055c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800055c:	defffd04 	addi	sp,sp,-12
 8000560:	dfc00215 	stw	ra,8(sp)
 8000564:	df000115 	stw	fp,4(sp)
 8000568:	df000104 	addi	fp,sp,4
 800056c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8000570:	8002f040 	call	8002f04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8000574:	00800044 	movi	r2,1
 8000578:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800057c:	0001883a 	nop
 8000580:	e037883a 	mov	sp,fp
 8000584:	dfc00117 	ldw	ra,4(sp)
 8000588:	df000017 	ldw	fp,0(sp)
 800058c:	dec00204 	addi	sp,sp,8
 8000590:	f800283a 	ret

08000594 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8000594:	defffd04 	addi	sp,sp,-12
 8000598:	dfc00215 	stw	ra,8(sp)
 800059c:	df000115 	stw	fp,4(sp)
 80005a0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80005a4:	000d883a 	mov	r6,zero
 80005a8:	000b883a 	mov	r5,zero
 80005ac:	01020134 	movhi	r4,2052
 80005b0:	212eea04 	addi	r4,r4,-17496
 80005b4:	8000ab40 	call	8000ab4 <altera_avalon_jtag_uart_init>
 80005b8:	01020134 	movhi	r4,2052
 80005bc:	212ee004 	addi	r4,r4,-17536
 80005c0:	80005280 	call	8000528 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VIDEO_CHARACTER_BUFFER_WITH_DMA_0, video_character_buffer_with_dma_0);
 80005c4:	00820134 	movhi	r2,2052
 80005c8:	10b2f804 	addi	r2,r2,-13344
 80005cc:	10800a17 	ldw	r2,40(r2)
 80005d0:	10800104 	addi	r2,r2,4
 80005d4:	10800017 	ldw	r2,0(r2)
 80005d8:	10ffffcc 	andi	r3,r2,65535
 80005dc:	00820134 	movhi	r2,2052
 80005e0:	10b2f804 	addi	r2,r2,-13344
 80005e4:	10c00c15 	stw	r3,48(r2)
 80005e8:	00820134 	movhi	r2,2052
 80005ec:	10b2f804 	addi	r2,r2,-13344
 80005f0:	10800a17 	ldw	r2,40(r2)
 80005f4:	10800104 	addi	r2,r2,4
 80005f8:	10800017 	ldw	r2,0(r2)
 80005fc:	1006d43a 	srli	r3,r2,16
 8000600:	00820134 	movhi	r2,2052
 8000604:	10b2f804 	addi	r2,r2,-13344
 8000608:	10c00d15 	stw	r3,52(r2)
 800060c:	00820134 	movhi	r2,2052
 8000610:	10b2f804 	addi	r2,r2,-13344
 8000614:	10800c17 	ldw	r2,48(r2)
 8000618:	10801068 	cmpgeui	r2,r2,65
 800061c:	1000081e 	bne	r2,zero,8000640 <alt_sys_init+0xac>
 8000620:	00820134 	movhi	r2,2052
 8000624:	10b2f804 	addi	r2,r2,-13344
 8000628:	00c00fc4 	movi	r3,63
 800062c:	10c00f15 	stw	r3,60(r2)
 8000630:	00820134 	movhi	r2,2052
 8000634:	10b2f804 	addi	r2,r2,-13344
 8000638:	00c00184 	movi	r3,6
 800063c:	10c01015 	stw	r3,64(r2)
 8000640:	00820134 	movhi	r2,2052
 8000644:	10b2f804 	addi	r2,r2,-13344
 8000648:	10800d17 	ldw	r2,52(r2)
 800064c:	10800868 	cmpgeui	r2,r2,33
 8000650:	1000041e 	bne	r2,zero,8000664 <alt_sys_init+0xd0>
 8000654:	00820134 	movhi	r2,2052
 8000658:	10b2f804 	addi	r2,r2,-13344
 800065c:	00c007c4 	movi	r3,31
 8000660:	10c01115 	stw	r3,68(r2)
 8000664:	01020134 	movhi	r4,2052
 8000668:	2132f804 	addi	r4,r4,-13344
 800066c:	80013b80 	call	80013b8 <alt_up_char_buffer_init>
 8000670:	01020134 	movhi	r4,2052
 8000674:	2132f804 	addi	r4,r4,-13344
 8000678:	80005280 	call	8000528 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 800067c:	00820134 	movhi	r2,2052
 8000680:	10b30a04 	addi	r2,r2,-13272
 8000684:	10800a17 	ldw	r2,40(r2)
 8000688:	10800017 	ldw	r2,0(r2)
 800068c:	1007883a 	mov	r3,r2
 8000690:	00820134 	movhi	r2,2052
 8000694:	10b30a04 	addi	r2,r2,-13272
 8000698:	10c00b15 	stw	r3,44(r2)
 800069c:	00820134 	movhi	r2,2052
 80006a0:	10b30a04 	addi	r2,r2,-13272
 80006a4:	10800a17 	ldw	r2,40(r2)
 80006a8:	10800104 	addi	r2,r2,4
 80006ac:	10800017 	ldw	r2,0(r2)
 80006b0:	1007883a 	mov	r3,r2
 80006b4:	00820134 	movhi	r2,2052
 80006b8:	10b30a04 	addi	r2,r2,-13272
 80006bc:	10c00c15 	stw	r3,48(r2)
 80006c0:	00820134 	movhi	r2,2052
 80006c4:	10b30a04 	addi	r2,r2,-13272
 80006c8:	10800a17 	ldw	r2,40(r2)
 80006cc:	10800204 	addi	r2,r2,8
 80006d0:	10800017 	ldw	r2,0(r2)
 80006d4:	10ffffcc 	andi	r3,r2,65535
 80006d8:	00820134 	movhi	r2,2052
 80006dc:	10b30a04 	addi	r2,r2,-13272
 80006e0:	10c00f15 	stw	r3,60(r2)
 80006e4:	00820134 	movhi	r2,2052
 80006e8:	10b30a04 	addi	r2,r2,-13272
 80006ec:	10800a17 	ldw	r2,40(r2)
 80006f0:	10800204 	addi	r2,r2,8
 80006f4:	10800017 	ldw	r2,0(r2)
 80006f8:	1006d43a 	srli	r3,r2,16
 80006fc:	00820134 	movhi	r2,2052
 8000700:	10b30a04 	addi	r2,r2,-13272
 8000704:	10c01015 	stw	r3,64(r2)
 8000708:	00820134 	movhi	r2,2052
 800070c:	10b30a04 	addi	r2,r2,-13272
 8000710:	10800a17 	ldw	r2,40(r2)
 8000714:	10800304 	addi	r2,r2,12
 8000718:	10800017 	ldw	r2,0(r2)
 800071c:	1005d07a 	srai	r2,r2,1
 8000720:	10c0004c 	andi	r3,r2,1
 8000724:	00820134 	movhi	r2,2052
 8000728:	10b30a04 	addi	r2,r2,-13272
 800072c:	10c00d15 	stw	r3,52(r2)
 8000730:	00820134 	movhi	r2,2052
 8000734:	10b30a04 	addi	r2,r2,-13272
 8000738:	10800a17 	ldw	r2,40(r2)
 800073c:	10800304 	addi	r2,r2,12
 8000740:	10800017 	ldw	r2,0(r2)
 8000744:	1005d13a 	srai	r2,r2,4
 8000748:	10c003cc 	andi	r3,r2,15
 800074c:	00820134 	movhi	r2,2052
 8000750:	10b30a04 	addi	r2,r2,-13272
 8000754:	10c00e15 	stw	r3,56(r2)
 8000758:	00820134 	movhi	r2,2052
 800075c:	10b30a04 	addi	r2,r2,-13272
 8000760:	10800a17 	ldw	r2,40(r2)
 8000764:	10800304 	addi	r2,r2,12
 8000768:	10800017 	ldw	r2,0(r2)
 800076c:	1005d43a 	srai	r2,r2,16
 8000770:	e0bfff05 	stb	r2,-4(fp)
 8000774:	00820134 	movhi	r2,2052
 8000778:	10b30a04 	addi	r2,r2,-13272
 800077c:	10800a17 	ldw	r2,40(r2)
 8000780:	10800304 	addi	r2,r2,12
 8000784:	10800017 	ldw	r2,0(r2)
 8000788:	1004d63a 	srli	r2,r2,24
 800078c:	e0bfff45 	stb	r2,-3(fp)
 8000790:	00820134 	movhi	r2,2052
 8000794:	10b30a04 	addi	r2,r2,-13272
 8000798:	10800e17 	ldw	r2,56(r2)
 800079c:	10800058 	cmpnei	r2,r2,1
 80007a0:	1000041e 	bne	r2,zero,80007b4 <alt_sys_init+0x220>
 80007a4:	00820134 	movhi	r2,2052
 80007a8:	10b30a04 	addi	r2,r2,-13272
 80007ac:	10001115 	stw	zero,68(r2)
 80007b0:	00000e06 	br	80007ec <alt_sys_init+0x258>
 80007b4:	00820134 	movhi	r2,2052
 80007b8:	10b30a04 	addi	r2,r2,-13272
 80007bc:	10800e17 	ldw	r2,56(r2)
 80007c0:	10800098 	cmpnei	r2,r2,2
 80007c4:	1000051e 	bne	r2,zero,80007dc <alt_sys_init+0x248>
 80007c8:	00820134 	movhi	r2,2052
 80007cc:	10b30a04 	addi	r2,r2,-13272
 80007d0:	00c00044 	movi	r3,1
 80007d4:	10c01115 	stw	r3,68(r2)
 80007d8:	00000406 	br	80007ec <alt_sys_init+0x258>
 80007dc:	00820134 	movhi	r2,2052
 80007e0:	10b30a04 	addi	r2,r2,-13272
 80007e4:	00c00084 	movi	r3,2
 80007e8:	10c01115 	stw	r3,68(r2)
 80007ec:	e0bfff03 	ldbu	r2,-4(fp)
 80007f0:	00c00804 	movi	r3,32
 80007f4:	1885c83a 	sub	r2,r3,r2
 80007f8:	00ffffc4 	movi	r3,-1
 80007fc:	1886d83a 	srl	r3,r3,r2
 8000800:	00820134 	movhi	r2,2052
 8000804:	10b30a04 	addi	r2,r2,-13272
 8000808:	10c01215 	stw	r3,72(r2)
 800080c:	e0ffff03 	ldbu	r3,-4(fp)
 8000810:	00820134 	movhi	r2,2052
 8000814:	10b30a04 	addi	r2,r2,-13272
 8000818:	10801117 	ldw	r2,68(r2)
 800081c:	1887883a 	add	r3,r3,r2
 8000820:	00820134 	movhi	r2,2052
 8000824:	10b30a04 	addi	r2,r2,-13272
 8000828:	10c01315 	stw	r3,76(r2)
 800082c:	e0bfff43 	ldbu	r2,-3(fp)
 8000830:	00c00804 	movi	r3,32
 8000834:	1885c83a 	sub	r2,r3,r2
 8000838:	00ffffc4 	movi	r3,-1
 800083c:	1886d83a 	srl	r3,r3,r2
 8000840:	00820134 	movhi	r2,2052
 8000844:	10b30a04 	addi	r2,r2,-13272
 8000848:	10c01415 	stw	r3,80(r2)
 800084c:	01020134 	movhi	r4,2052
 8000850:	21330a04 	addi	r4,r4,-13272
 8000854:	80005280 	call	8000528 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 8000858:	00820134 	movhi	r2,2052
 800085c:	10b31f04 	addi	r2,r2,-13188
 8000860:	10800a17 	ldw	r2,40(r2)
 8000864:	10800017 	ldw	r2,0(r2)
 8000868:	10c003cc 	andi	r3,r2,15
 800086c:	00820134 	movhi	r2,2052
 8000870:	10b31f04 	addi	r2,r2,-13188
 8000874:	10c00b15 	stw	r3,44(r2)
 8000878:	00820134 	movhi	r2,2052
 800087c:	10b31f04 	addi	r2,r2,-13188
 8000880:	10800a17 	ldw	r2,40(r2)
 8000884:	10800017 	ldw	r2,0(r2)
 8000888:	1005d13a 	srai	r2,r2,4
 800088c:	10c0004c 	andi	r3,r2,1
 8000890:	00820134 	movhi	r2,2052
 8000894:	10b31f04 	addi	r2,r2,-13188
 8000898:	10c00c15 	stw	r3,48(r2)
 800089c:	00820134 	movhi	r2,2052
 80008a0:	10b31f04 	addi	r2,r2,-13188
 80008a4:	10800a17 	ldw	r2,40(r2)
 80008a8:	10800017 	ldw	r2,0(r2)
 80008ac:	1005d17a 	srai	r2,r2,5
 80008b0:	10c0004c 	andi	r3,r2,1
 80008b4:	00820134 	movhi	r2,2052
 80008b8:	10b31f04 	addi	r2,r2,-13188
 80008bc:	10c00d15 	stw	r3,52(r2)
 80008c0:	00820134 	movhi	r2,2052
 80008c4:	10b31f04 	addi	r2,r2,-13188
 80008c8:	10800a17 	ldw	r2,40(r2)
 80008cc:	10800017 	ldw	r2,0(r2)
 80008d0:	1005d43a 	srai	r2,r2,16
 80008d4:	10c003cc 	andi	r3,r2,15
 80008d8:	00820134 	movhi	r2,2052
 80008dc:	10b31f04 	addi	r2,r2,-13188
 80008e0:	10c00e15 	stw	r3,56(r2)
 80008e4:	00820134 	movhi	r2,2052
 80008e8:	10b31f04 	addi	r2,r2,-13188
 80008ec:	10800a17 	ldw	r2,40(r2)
 80008f0:	10800017 	ldw	r2,0(r2)
 80008f4:	1005d53a 	srai	r2,r2,20
 80008f8:	10c0004c 	andi	r3,r2,1
 80008fc:	00820134 	movhi	r2,2052
 8000900:	10b31f04 	addi	r2,r2,-13188
 8000904:	10c00f15 	stw	r3,60(r2)
 8000908:	00820134 	movhi	r2,2052
 800090c:	10b31f04 	addi	r2,r2,-13188
 8000910:	10800a17 	ldw	r2,40(r2)
 8000914:	10800017 	ldw	r2,0(r2)
 8000918:	1005d57a 	srai	r2,r2,21
 800091c:	10c0004c 	andi	r3,r2,1
 8000920:	00820134 	movhi	r2,2052
 8000924:	10b31f04 	addi	r2,r2,-13188
 8000928:	10c01015 	stw	r3,64(r2)
 800092c:	01020134 	movhi	r4,2052
 8000930:	21331f04 	addi	r4,r4,-13188
 8000934:	80005280 	call	8000528 <alt_dev_reg>
}
 8000938:	0001883a 	nop
 800093c:	e037883a 	mov	sp,fp
 8000940:	dfc00117 	ldw	ra,4(sp)
 8000944:	df000017 	ldw	fp,0(sp)
 8000948:	dec00204 	addi	sp,sp,8
 800094c:	f800283a 	ret

08000950 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8000950:	defffa04 	addi	sp,sp,-24
 8000954:	dfc00515 	stw	ra,20(sp)
 8000958:	df000415 	stw	fp,16(sp)
 800095c:	df000404 	addi	fp,sp,16
 8000960:	e13ffd15 	stw	r4,-12(fp)
 8000964:	e17ffe15 	stw	r5,-8(fp)
 8000968:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800096c:	e0bffd17 	ldw	r2,-12(fp)
 8000970:	10800017 	ldw	r2,0(r2)
 8000974:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8000978:	e0bffc17 	ldw	r2,-16(fp)
 800097c:	10c00a04 	addi	r3,r2,40
 8000980:	e0bffd17 	ldw	r2,-12(fp)
 8000984:	10800217 	ldw	r2,8(r2)
 8000988:	100f883a 	mov	r7,r2
 800098c:	e1bfff17 	ldw	r6,-4(fp)
 8000990:	e17ffe17 	ldw	r5,-8(fp)
 8000994:	1809883a 	mov	r4,r3
 8000998:	8000f780 	call	8000f78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800099c:	e037883a 	mov	sp,fp
 80009a0:	dfc00117 	ldw	ra,4(sp)
 80009a4:	df000017 	ldw	fp,0(sp)
 80009a8:	dec00204 	addi	sp,sp,8
 80009ac:	f800283a 	ret

080009b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80009b0:	defffa04 	addi	sp,sp,-24
 80009b4:	dfc00515 	stw	ra,20(sp)
 80009b8:	df000415 	stw	fp,16(sp)
 80009bc:	df000404 	addi	fp,sp,16
 80009c0:	e13ffd15 	stw	r4,-12(fp)
 80009c4:	e17ffe15 	stw	r5,-8(fp)
 80009c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80009cc:	e0bffd17 	ldw	r2,-12(fp)
 80009d0:	10800017 	ldw	r2,0(r2)
 80009d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80009d8:	e0bffc17 	ldw	r2,-16(fp)
 80009dc:	10c00a04 	addi	r3,r2,40
 80009e0:	e0bffd17 	ldw	r2,-12(fp)
 80009e4:	10800217 	ldw	r2,8(r2)
 80009e8:	100f883a 	mov	r7,r2
 80009ec:	e1bfff17 	ldw	r6,-4(fp)
 80009f0:	e17ffe17 	ldw	r5,-8(fp)
 80009f4:	1809883a 	mov	r4,r3
 80009f8:	80011940 	call	8001194 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80009fc:	e037883a 	mov	sp,fp
 8000a00:	dfc00117 	ldw	ra,4(sp)
 8000a04:	df000017 	ldw	fp,0(sp)
 8000a08:	dec00204 	addi	sp,sp,8
 8000a0c:	f800283a 	ret

08000a10 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8000a10:	defffc04 	addi	sp,sp,-16
 8000a14:	dfc00315 	stw	ra,12(sp)
 8000a18:	df000215 	stw	fp,8(sp)
 8000a1c:	df000204 	addi	fp,sp,8
 8000a20:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000a24:	e0bfff17 	ldw	r2,-4(fp)
 8000a28:	10800017 	ldw	r2,0(r2)
 8000a2c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8000a30:	e0bffe17 	ldw	r2,-8(fp)
 8000a34:	10c00a04 	addi	r3,r2,40
 8000a38:	e0bfff17 	ldw	r2,-4(fp)
 8000a3c:	10800217 	ldw	r2,8(r2)
 8000a40:	100b883a 	mov	r5,r2
 8000a44:	1809883a 	mov	r4,r3
 8000a48:	8000e200 	call	8000e20 <altera_avalon_jtag_uart_close>
}
 8000a4c:	e037883a 	mov	sp,fp
 8000a50:	dfc00117 	ldw	ra,4(sp)
 8000a54:	df000017 	ldw	fp,0(sp)
 8000a58:	dec00204 	addi	sp,sp,8
 8000a5c:	f800283a 	ret

08000a60 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8000a60:	defffa04 	addi	sp,sp,-24
 8000a64:	dfc00515 	stw	ra,20(sp)
 8000a68:	df000415 	stw	fp,16(sp)
 8000a6c:	df000404 	addi	fp,sp,16
 8000a70:	e13ffd15 	stw	r4,-12(fp)
 8000a74:	e17ffe15 	stw	r5,-8(fp)
 8000a78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8000a7c:	e0bffd17 	ldw	r2,-12(fp)
 8000a80:	10800017 	ldw	r2,0(r2)
 8000a84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8000a88:	e0bffc17 	ldw	r2,-16(fp)
 8000a8c:	10800a04 	addi	r2,r2,40
 8000a90:	e1bfff17 	ldw	r6,-4(fp)
 8000a94:	e17ffe17 	ldw	r5,-8(fp)
 8000a98:	1009883a 	mov	r4,r2
 8000a9c:	8000e880 	call	8000e88 <altera_avalon_jtag_uart_ioctl>
}
 8000aa0:	e037883a 	mov	sp,fp
 8000aa4:	dfc00117 	ldw	ra,4(sp)
 8000aa8:	df000017 	ldw	fp,0(sp)
 8000aac:	dec00204 	addi	sp,sp,8
 8000ab0:	f800283a 	ret

08000ab4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8000ab4:	defffa04 	addi	sp,sp,-24
 8000ab8:	dfc00515 	stw	ra,20(sp)
 8000abc:	df000415 	stw	fp,16(sp)
 8000ac0:	df000404 	addi	fp,sp,16
 8000ac4:	e13ffd15 	stw	r4,-12(fp)
 8000ac8:	e17ffe15 	stw	r5,-8(fp)
 8000acc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000ad0:	e0bffd17 	ldw	r2,-12(fp)
 8000ad4:	00c00044 	movi	r3,1
 8000ad8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8000adc:	e0bffd17 	ldw	r2,-12(fp)
 8000ae0:	10800017 	ldw	r2,0(r2)
 8000ae4:	10800104 	addi	r2,r2,4
 8000ae8:	1007883a 	mov	r3,r2
 8000aec:	e0bffd17 	ldw	r2,-12(fp)
 8000af0:	10800817 	ldw	r2,32(r2)
 8000af4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8000af8:	e0bffe17 	ldw	r2,-8(fp)
 8000afc:	e0ffff17 	ldw	r3,-4(fp)
 8000b00:	d8000015 	stw	zero,0(sp)
 8000b04:	e1fffd17 	ldw	r7,-12(fp)
 8000b08:	01820034 	movhi	r6,2048
 8000b0c:	3182dd04 	addi	r6,r6,2932
 8000b10:	180b883a 	mov	r5,r3
 8000b14:	1009883a 	mov	r4,r2
 8000b18:	8002a5c0 	call	8002a5c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8000b1c:	e0bffd17 	ldw	r2,-12(fp)
 8000b20:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8000b24:	e0bffd17 	ldw	r2,-12(fp)
 8000b28:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8000b2c:	d0e5dd17 	ldw	r3,-26764(gp)
 8000b30:	e1fffd17 	ldw	r7,-12(fp)
 8000b34:	01820034 	movhi	r6,2048
 8000b38:	31836004 	addi	r6,r6,3456
 8000b3c:	180b883a 	mov	r5,r3
 8000b40:	1009883a 	mov	r4,r2
 8000b44:	800254c0 	call	800254c <alt_alarm_start>
 8000b48:	1000040e 	bge	r2,zero,8000b5c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8000b4c:	e0fffd17 	ldw	r3,-12(fp)
 8000b50:	00a00034 	movhi	r2,32768
 8000b54:	10bfffc4 	addi	r2,r2,-1
 8000b58:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8000b5c:	0001883a 	nop
 8000b60:	e037883a 	mov	sp,fp
 8000b64:	dfc00117 	ldw	ra,4(sp)
 8000b68:	df000017 	ldw	fp,0(sp)
 8000b6c:	dec00204 	addi	sp,sp,8
 8000b70:	f800283a 	ret

08000b74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8000b74:	defff804 	addi	sp,sp,-32
 8000b78:	df000715 	stw	fp,28(sp)
 8000b7c:	df000704 	addi	fp,sp,28
 8000b80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8000b84:	e0bfff17 	ldw	r2,-4(fp)
 8000b88:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8000b8c:	e0bffb17 	ldw	r2,-20(fp)
 8000b90:	10800017 	ldw	r2,0(r2)
 8000b94:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000b98:	e0bffc17 	ldw	r2,-16(fp)
 8000b9c:	10800104 	addi	r2,r2,4
 8000ba0:	10800037 	ldwio	r2,0(r2)
 8000ba4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8000ba8:	e0bffd17 	ldw	r2,-12(fp)
 8000bac:	1080c00c 	andi	r2,r2,768
 8000bb0:	10006d26 	beq	r2,zero,8000d68 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8000bb4:	e0bffd17 	ldw	r2,-12(fp)
 8000bb8:	1080400c 	andi	r2,r2,256
 8000bbc:	10003526 	beq	r2,zero,8000c94 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8000bc0:	00800074 	movhi	r2,1
 8000bc4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000bc8:	e0bffb17 	ldw	r2,-20(fp)
 8000bcc:	10800a17 	ldw	r2,40(r2)
 8000bd0:	10800044 	addi	r2,r2,1
 8000bd4:	1081ffcc 	andi	r2,r2,2047
 8000bd8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8000bdc:	e0bffb17 	ldw	r2,-20(fp)
 8000be0:	10c00b17 	ldw	r3,44(r2)
 8000be4:	e0bffe17 	ldw	r2,-8(fp)
 8000be8:	18801526 	beq	r3,r2,8000c40 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8000bec:	e0bffc17 	ldw	r2,-16(fp)
 8000bf0:	10800037 	ldwio	r2,0(r2)
 8000bf4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8000bf8:	e0bff917 	ldw	r2,-28(fp)
 8000bfc:	10a0000c 	andi	r2,r2,32768
 8000c00:	10001126 	beq	r2,zero,8000c48 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8000c04:	e0bffb17 	ldw	r2,-20(fp)
 8000c08:	10800a17 	ldw	r2,40(r2)
 8000c0c:	e0fff917 	ldw	r3,-28(fp)
 8000c10:	1809883a 	mov	r4,r3
 8000c14:	e0fffb17 	ldw	r3,-20(fp)
 8000c18:	1885883a 	add	r2,r3,r2
 8000c1c:	10800e04 	addi	r2,r2,56
 8000c20:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000c24:	e0bffb17 	ldw	r2,-20(fp)
 8000c28:	10800a17 	ldw	r2,40(r2)
 8000c2c:	10800044 	addi	r2,r2,1
 8000c30:	10c1ffcc 	andi	r3,r2,2047
 8000c34:	e0bffb17 	ldw	r2,-20(fp)
 8000c38:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8000c3c:	003fe206 	br	8000bc8 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8000c40:	0001883a 	nop
 8000c44:	00000106 	br	8000c4c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8000c48:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8000c4c:	e0bff917 	ldw	r2,-28(fp)
 8000c50:	10bfffec 	andhi	r2,r2,65535
 8000c54:	10000f26 	beq	r2,zero,8000c94 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000c58:	e0bffb17 	ldw	r2,-20(fp)
 8000c5c:	10c00817 	ldw	r3,32(r2)
 8000c60:	00bfff84 	movi	r2,-2
 8000c64:	1886703a 	and	r3,r3,r2
 8000c68:	e0bffb17 	ldw	r2,-20(fp)
 8000c6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8000c70:	e0bffc17 	ldw	r2,-16(fp)
 8000c74:	10800104 	addi	r2,r2,4
 8000c78:	1007883a 	mov	r3,r2
 8000c7c:	e0bffb17 	ldw	r2,-20(fp)
 8000c80:	10800817 	ldw	r2,32(r2)
 8000c84:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000c88:	e0bffc17 	ldw	r2,-16(fp)
 8000c8c:	10800104 	addi	r2,r2,4
 8000c90:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8000c94:	e0bffd17 	ldw	r2,-12(fp)
 8000c98:	1080800c 	andi	r2,r2,512
 8000c9c:	103fbe26 	beq	r2,zero,8000b98 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8000ca0:	e0bffd17 	ldw	r2,-12(fp)
 8000ca4:	1004d43a 	srli	r2,r2,16
 8000ca8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000cac:	00001406 	br	8000d00 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8000cb0:	e0bffc17 	ldw	r2,-16(fp)
 8000cb4:	e0fffb17 	ldw	r3,-20(fp)
 8000cb8:	18c00d17 	ldw	r3,52(r3)
 8000cbc:	e13ffb17 	ldw	r4,-20(fp)
 8000cc0:	20c7883a 	add	r3,r4,r3
 8000cc4:	18c20e04 	addi	r3,r3,2104
 8000cc8:	18c00003 	ldbu	r3,0(r3)
 8000ccc:	18c03fcc 	andi	r3,r3,255
 8000cd0:	18c0201c 	xori	r3,r3,128
 8000cd4:	18ffe004 	addi	r3,r3,-128
 8000cd8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000cdc:	e0bffb17 	ldw	r2,-20(fp)
 8000ce0:	10800d17 	ldw	r2,52(r2)
 8000ce4:	10800044 	addi	r2,r2,1
 8000ce8:	10c1ffcc 	andi	r3,r2,2047
 8000cec:	e0bffb17 	ldw	r2,-20(fp)
 8000cf0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8000cf4:	e0bffa17 	ldw	r2,-24(fp)
 8000cf8:	10bfffc4 	addi	r2,r2,-1
 8000cfc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000d00:	e0bffa17 	ldw	r2,-24(fp)
 8000d04:	10000526 	beq	r2,zero,8000d1c <altera_avalon_jtag_uart_irq+0x1a8>
 8000d08:	e0bffb17 	ldw	r2,-20(fp)
 8000d0c:	10c00d17 	ldw	r3,52(r2)
 8000d10:	e0bffb17 	ldw	r2,-20(fp)
 8000d14:	10800c17 	ldw	r2,48(r2)
 8000d18:	18bfe51e 	bne	r3,r2,8000cb0 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8000d1c:	e0bffa17 	ldw	r2,-24(fp)
 8000d20:	103f9d26 	beq	r2,zero,8000b98 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000d24:	e0bffb17 	ldw	r2,-20(fp)
 8000d28:	10c00817 	ldw	r3,32(r2)
 8000d2c:	00bfff44 	movi	r2,-3
 8000d30:	1886703a 	and	r3,r3,r2
 8000d34:	e0bffb17 	ldw	r2,-20(fp)
 8000d38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000d3c:	e0bffb17 	ldw	r2,-20(fp)
 8000d40:	10800017 	ldw	r2,0(r2)
 8000d44:	10800104 	addi	r2,r2,4
 8000d48:	1007883a 	mov	r3,r2
 8000d4c:	e0bffb17 	ldw	r2,-20(fp)
 8000d50:	10800817 	ldw	r2,32(r2)
 8000d54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8000d58:	e0bffc17 	ldw	r2,-16(fp)
 8000d5c:	10800104 	addi	r2,r2,4
 8000d60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8000d64:	003f8c06 	br	8000b98 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8000d68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8000d6c:	0001883a 	nop
 8000d70:	e037883a 	mov	sp,fp
 8000d74:	df000017 	ldw	fp,0(sp)
 8000d78:	dec00104 	addi	sp,sp,4
 8000d7c:	f800283a 	ret

08000d80 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8000d80:	defff804 	addi	sp,sp,-32
 8000d84:	df000715 	stw	fp,28(sp)
 8000d88:	df000704 	addi	fp,sp,28
 8000d8c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8000d90:	e0bffb17 	ldw	r2,-20(fp)
 8000d94:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8000d98:	e0bff917 	ldw	r2,-28(fp)
 8000d9c:	10800017 	ldw	r2,0(r2)
 8000da0:	10800104 	addi	r2,r2,4
 8000da4:	10800037 	ldwio	r2,0(r2)
 8000da8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8000dac:	e0bffa17 	ldw	r2,-24(fp)
 8000db0:	1081000c 	andi	r2,r2,1024
 8000db4:	10000b26 	beq	r2,zero,8000de4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8000db8:	e0bff917 	ldw	r2,-28(fp)
 8000dbc:	10800017 	ldw	r2,0(r2)
 8000dc0:	10800104 	addi	r2,r2,4
 8000dc4:	1007883a 	mov	r3,r2
 8000dc8:	e0bff917 	ldw	r2,-28(fp)
 8000dcc:	10800817 	ldw	r2,32(r2)
 8000dd0:	10810014 	ori	r2,r2,1024
 8000dd4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8000dd8:	e0bff917 	ldw	r2,-28(fp)
 8000ddc:	10000915 	stw	zero,36(r2)
 8000de0:	00000a06 	br	8000e0c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8000de4:	e0bff917 	ldw	r2,-28(fp)
 8000de8:	10c00917 	ldw	r3,36(r2)
 8000dec:	00a00034 	movhi	r2,32768
 8000df0:	10bfff04 	addi	r2,r2,-4
 8000df4:	10c00536 	bltu	r2,r3,8000e0c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8000df8:	e0bff917 	ldw	r2,-28(fp)
 8000dfc:	10800917 	ldw	r2,36(r2)
 8000e00:	10c00044 	addi	r3,r2,1
 8000e04:	e0bff917 	ldw	r2,-28(fp)
 8000e08:	10c00915 	stw	r3,36(r2)
 8000e0c:	d0a5dd17 	ldw	r2,-26764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8000e10:	e037883a 	mov	sp,fp
 8000e14:	df000017 	ldw	fp,0(sp)
 8000e18:	dec00104 	addi	sp,sp,4
 8000e1c:	f800283a 	ret

08000e20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8000e20:	defffd04 	addi	sp,sp,-12
 8000e24:	df000215 	stw	fp,8(sp)
 8000e28:	df000204 	addi	fp,sp,8
 8000e2c:	e13ffe15 	stw	r4,-8(fp)
 8000e30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000e34:	00000506 	br	8000e4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8000e38:	e0bfff17 	ldw	r2,-4(fp)
 8000e3c:	1090000c 	andi	r2,r2,16384
 8000e40:	10000226 	beq	r2,zero,8000e4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8000e44:	00bffd44 	movi	r2,-11
 8000e48:	00000b06 	br	8000e78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000e4c:	e0bffe17 	ldw	r2,-8(fp)
 8000e50:	10c00d17 	ldw	r3,52(r2)
 8000e54:	e0bffe17 	ldw	r2,-8(fp)
 8000e58:	10800c17 	ldw	r2,48(r2)
 8000e5c:	18800526 	beq	r3,r2,8000e74 <altera_avalon_jtag_uart_close+0x54>
 8000e60:	e0bffe17 	ldw	r2,-8(fp)
 8000e64:	10c00917 	ldw	r3,36(r2)
 8000e68:	e0bffe17 	ldw	r2,-8(fp)
 8000e6c:	10800117 	ldw	r2,4(r2)
 8000e70:	18bff136 	bltu	r3,r2,8000e38 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8000e74:	0005883a 	mov	r2,zero
}
 8000e78:	e037883a 	mov	sp,fp
 8000e7c:	df000017 	ldw	fp,0(sp)
 8000e80:	dec00104 	addi	sp,sp,4
 8000e84:	f800283a 	ret

08000e88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8000e88:	defffa04 	addi	sp,sp,-24
 8000e8c:	df000515 	stw	fp,20(sp)
 8000e90:	df000504 	addi	fp,sp,20
 8000e94:	e13ffd15 	stw	r4,-12(fp)
 8000e98:	e17ffe15 	stw	r5,-8(fp)
 8000e9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8000ea0:	00bff9c4 	movi	r2,-25
 8000ea4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8000ea8:	e0bffe17 	ldw	r2,-8(fp)
 8000eac:	10da8060 	cmpeqi	r3,r2,27137
 8000eb0:	1800031e 	bne	r3,zero,8000ec0 <altera_avalon_jtag_uart_ioctl+0x38>
 8000eb4:	109a80a0 	cmpeqi	r2,r2,27138
 8000eb8:	1000181e 	bne	r2,zero,8000f1c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8000ebc:	00002906 	br	8000f64 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8000ec0:	e0bffd17 	ldw	r2,-12(fp)
 8000ec4:	10c00117 	ldw	r3,4(r2)
 8000ec8:	00a00034 	movhi	r2,32768
 8000ecc:	10bfffc4 	addi	r2,r2,-1
 8000ed0:	18802126 	beq	r3,r2,8000f58 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8000ed4:	e0bfff17 	ldw	r2,-4(fp)
 8000ed8:	10800017 	ldw	r2,0(r2)
 8000edc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8000ee0:	e0bffc17 	ldw	r2,-16(fp)
 8000ee4:	10800090 	cmplti	r2,r2,2
 8000ee8:	1000061e 	bne	r2,zero,8000f04 <altera_avalon_jtag_uart_ioctl+0x7c>
 8000eec:	e0fffc17 	ldw	r3,-16(fp)
 8000ef0:	00a00034 	movhi	r2,32768
 8000ef4:	10bfffc4 	addi	r2,r2,-1
 8000ef8:	18800226 	beq	r3,r2,8000f04 <altera_avalon_jtag_uart_ioctl+0x7c>
 8000efc:	e0bffc17 	ldw	r2,-16(fp)
 8000f00:	00000206 	br	8000f0c <altera_avalon_jtag_uart_ioctl+0x84>
 8000f04:	00a00034 	movhi	r2,32768
 8000f08:	10bfff84 	addi	r2,r2,-2
 8000f0c:	e0fffd17 	ldw	r3,-12(fp)
 8000f10:	18800115 	stw	r2,4(r3)
      rc = 0;
 8000f14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000f18:	00000f06 	br	8000f58 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8000f1c:	e0bffd17 	ldw	r2,-12(fp)
 8000f20:	10c00117 	ldw	r3,4(r2)
 8000f24:	00a00034 	movhi	r2,32768
 8000f28:	10bfffc4 	addi	r2,r2,-1
 8000f2c:	18800c26 	beq	r3,r2,8000f60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8000f30:	e0bffd17 	ldw	r2,-12(fp)
 8000f34:	10c00917 	ldw	r3,36(r2)
 8000f38:	e0bffd17 	ldw	r2,-12(fp)
 8000f3c:	10800117 	ldw	r2,4(r2)
 8000f40:	1885803a 	cmpltu	r2,r3,r2
 8000f44:	10c03fcc 	andi	r3,r2,255
 8000f48:	e0bfff17 	ldw	r2,-4(fp)
 8000f4c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8000f50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000f54:	00000206 	br	8000f60 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8000f58:	0001883a 	nop
 8000f5c:	00000106 	br	8000f64 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8000f60:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8000f64:	e0bffb17 	ldw	r2,-20(fp)
}
 8000f68:	e037883a 	mov	sp,fp
 8000f6c:	df000017 	ldw	fp,0(sp)
 8000f70:	dec00104 	addi	sp,sp,4
 8000f74:	f800283a 	ret

08000f78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8000f78:	defff304 	addi	sp,sp,-52
 8000f7c:	dfc00c15 	stw	ra,48(sp)
 8000f80:	df000b15 	stw	fp,44(sp)
 8000f84:	df000b04 	addi	fp,sp,44
 8000f88:	e13ffc15 	stw	r4,-16(fp)
 8000f8c:	e17ffd15 	stw	r5,-12(fp)
 8000f90:	e1bffe15 	stw	r6,-8(fp)
 8000f94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8000f98:	e0bffd17 	ldw	r2,-12(fp)
 8000f9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000fa0:	00004706 	br	80010c0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8000fa4:	e0bffc17 	ldw	r2,-16(fp)
 8000fa8:	10800a17 	ldw	r2,40(r2)
 8000fac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8000fb0:	e0bffc17 	ldw	r2,-16(fp)
 8000fb4:	10800b17 	ldw	r2,44(r2)
 8000fb8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8000fbc:	e0fff717 	ldw	r3,-36(fp)
 8000fc0:	e0bff817 	ldw	r2,-32(fp)
 8000fc4:	18800536 	bltu	r3,r2,8000fdc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8000fc8:	e0fff717 	ldw	r3,-36(fp)
 8000fcc:	e0bff817 	ldw	r2,-32(fp)
 8000fd0:	1885c83a 	sub	r2,r3,r2
 8000fd4:	e0bff615 	stw	r2,-40(fp)
 8000fd8:	00000406 	br	8000fec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8000fdc:	00c20004 	movi	r3,2048
 8000fe0:	e0bff817 	ldw	r2,-32(fp)
 8000fe4:	1885c83a 	sub	r2,r3,r2
 8000fe8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8000fec:	e0bff617 	ldw	r2,-40(fp)
 8000ff0:	10001e26 	beq	r2,zero,800106c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8000ff4:	e0fffe17 	ldw	r3,-8(fp)
 8000ff8:	e0bff617 	ldw	r2,-40(fp)
 8000ffc:	1880022e 	bgeu	r3,r2,8001008 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8001000:	e0bffe17 	ldw	r2,-8(fp)
 8001004:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8001008:	e0bffc17 	ldw	r2,-16(fp)
 800100c:	10c00e04 	addi	r3,r2,56
 8001010:	e0bff817 	ldw	r2,-32(fp)
 8001014:	1885883a 	add	r2,r3,r2
 8001018:	e1bff617 	ldw	r6,-40(fp)
 800101c:	100b883a 	mov	r5,r2
 8001020:	e13ff517 	ldw	r4,-44(fp)
 8001024:	800311c0 	call	800311c <memcpy>
      ptr   += n;
 8001028:	e0fff517 	ldw	r3,-44(fp)
 800102c:	e0bff617 	ldw	r2,-40(fp)
 8001030:	1885883a 	add	r2,r3,r2
 8001034:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8001038:	e0fffe17 	ldw	r3,-8(fp)
 800103c:	e0bff617 	ldw	r2,-40(fp)
 8001040:	1885c83a 	sub	r2,r3,r2
 8001044:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8001048:	e0fff817 	ldw	r3,-32(fp)
 800104c:	e0bff617 	ldw	r2,-40(fp)
 8001050:	1885883a 	add	r2,r3,r2
 8001054:	10c1ffcc 	andi	r3,r2,2047
 8001058:	e0bffc17 	ldw	r2,-16(fp)
 800105c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8001060:	e0bffe17 	ldw	r2,-8(fp)
 8001064:	00bfcf16 	blt	zero,r2,8000fa4 <altera_avalon_jtag_uart_read+0x2c>
 8001068:	00000106 	br	8001070 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800106c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8001070:	e0fff517 	ldw	r3,-44(fp)
 8001074:	e0bffd17 	ldw	r2,-12(fp)
 8001078:	1880141e 	bne	r3,r2,80010cc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800107c:	e0bfff17 	ldw	r2,-4(fp)
 8001080:	1090000c 	andi	r2,r2,16384
 8001084:	1000131e 	bne	r2,zero,80010d4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8001088:	0001883a 	nop
 800108c:	e0bffc17 	ldw	r2,-16(fp)
 8001090:	10c00a17 	ldw	r3,40(r2)
 8001094:	e0bff717 	ldw	r2,-36(fp)
 8001098:	1880051e 	bne	r3,r2,80010b0 <altera_avalon_jtag_uart_read+0x138>
 800109c:	e0bffc17 	ldw	r2,-16(fp)
 80010a0:	10c00917 	ldw	r3,36(r2)
 80010a4:	e0bffc17 	ldw	r2,-16(fp)
 80010a8:	10800117 	ldw	r2,4(r2)
 80010ac:	18bff736 	bltu	r3,r2,800108c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80010b0:	e0bffc17 	ldw	r2,-16(fp)
 80010b4:	10c00a17 	ldw	r3,40(r2)
 80010b8:	e0bff717 	ldw	r2,-36(fp)
 80010bc:	18800726 	beq	r3,r2,80010dc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80010c0:	e0bffe17 	ldw	r2,-8(fp)
 80010c4:	00bfb716 	blt	zero,r2,8000fa4 <altera_avalon_jtag_uart_read+0x2c>
 80010c8:	00000506 	br	80010e0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80010cc:	0001883a 	nop
 80010d0:	00000306 	br	80010e0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80010d4:	0001883a 	nop
 80010d8:	00000106 	br	80010e0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80010dc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80010e0:	e0fff517 	ldw	r3,-44(fp)
 80010e4:	e0bffd17 	ldw	r2,-12(fp)
 80010e8:	18801826 	beq	r3,r2,800114c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80010ec:	0005303a 	rdctl	r2,status
 80010f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80010f4:	e0fffb17 	ldw	r3,-20(fp)
 80010f8:	00bfff84 	movi	r2,-2
 80010fc:	1884703a 	and	r2,r3,r2
 8001100:	1001703a 	wrctl	status,r2
  
  return context;
 8001104:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8001108:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800110c:	e0bffc17 	ldw	r2,-16(fp)
 8001110:	10800817 	ldw	r2,32(r2)
 8001114:	10c00054 	ori	r3,r2,1
 8001118:	e0bffc17 	ldw	r2,-16(fp)
 800111c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8001120:	e0bffc17 	ldw	r2,-16(fp)
 8001124:	10800017 	ldw	r2,0(r2)
 8001128:	10800104 	addi	r2,r2,4
 800112c:	1007883a 	mov	r3,r2
 8001130:	e0bffc17 	ldw	r2,-16(fp)
 8001134:	10800817 	ldw	r2,32(r2)
 8001138:	18800035 	stwio	r2,0(r3)
 800113c:	e0bffa17 	ldw	r2,-24(fp)
 8001140:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001144:	e0bff917 	ldw	r2,-28(fp)
 8001148:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800114c:	e0fff517 	ldw	r3,-44(fp)
 8001150:	e0bffd17 	ldw	r2,-12(fp)
 8001154:	18800426 	beq	r3,r2,8001168 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8001158:	e0fff517 	ldw	r3,-44(fp)
 800115c:	e0bffd17 	ldw	r2,-12(fp)
 8001160:	1885c83a 	sub	r2,r3,r2
 8001164:	00000606 	br	8001180 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8001168:	e0bfff17 	ldw	r2,-4(fp)
 800116c:	1090000c 	andi	r2,r2,16384
 8001170:	10000226 	beq	r2,zero,800117c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8001174:	00bffd44 	movi	r2,-11
 8001178:	00000106 	br	8001180 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800117c:	00bffec4 	movi	r2,-5
}
 8001180:	e037883a 	mov	sp,fp
 8001184:	dfc00117 	ldw	ra,4(sp)
 8001188:	df000017 	ldw	fp,0(sp)
 800118c:	dec00204 	addi	sp,sp,8
 8001190:	f800283a 	ret

08001194 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8001194:	defff304 	addi	sp,sp,-52
 8001198:	dfc00c15 	stw	ra,48(sp)
 800119c:	df000b15 	stw	fp,44(sp)
 80011a0:	df000b04 	addi	fp,sp,44
 80011a4:	e13ffc15 	stw	r4,-16(fp)
 80011a8:	e17ffd15 	stw	r5,-12(fp)
 80011ac:	e1bffe15 	stw	r6,-8(fp)
 80011b0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80011b4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80011b8:	e0bffd17 	ldw	r2,-12(fp)
 80011bc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80011c0:	00003706 	br	80012a0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80011c4:	e0bffc17 	ldw	r2,-16(fp)
 80011c8:	10800c17 	ldw	r2,48(r2)
 80011cc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80011d0:	e0bffc17 	ldw	r2,-16(fp)
 80011d4:	10800d17 	ldw	r2,52(r2)
 80011d8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80011dc:	e0fff917 	ldw	r3,-28(fp)
 80011e0:	e0bff517 	ldw	r2,-44(fp)
 80011e4:	1880062e 	bgeu	r3,r2,8001200 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80011e8:	e0fff517 	ldw	r3,-44(fp)
 80011ec:	e0bff917 	ldw	r2,-28(fp)
 80011f0:	1885c83a 	sub	r2,r3,r2
 80011f4:	10bfffc4 	addi	r2,r2,-1
 80011f8:	e0bff615 	stw	r2,-40(fp)
 80011fc:	00000b06 	br	800122c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8001200:	e0bff517 	ldw	r2,-44(fp)
 8001204:	10000526 	beq	r2,zero,800121c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8001208:	00c20004 	movi	r3,2048
 800120c:	e0bff917 	ldw	r2,-28(fp)
 8001210:	1885c83a 	sub	r2,r3,r2
 8001214:	e0bff615 	stw	r2,-40(fp)
 8001218:	00000406 	br	800122c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800121c:	00c1ffc4 	movi	r3,2047
 8001220:	e0bff917 	ldw	r2,-28(fp)
 8001224:	1885c83a 	sub	r2,r3,r2
 8001228:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800122c:	e0bff617 	ldw	r2,-40(fp)
 8001230:	10001e26 	beq	r2,zero,80012ac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8001234:	e0fffe17 	ldw	r3,-8(fp)
 8001238:	e0bff617 	ldw	r2,-40(fp)
 800123c:	1880022e 	bgeu	r3,r2,8001248 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8001240:	e0bffe17 	ldw	r2,-8(fp)
 8001244:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8001248:	e0bffc17 	ldw	r2,-16(fp)
 800124c:	10c20e04 	addi	r3,r2,2104
 8001250:	e0bff917 	ldw	r2,-28(fp)
 8001254:	1885883a 	add	r2,r3,r2
 8001258:	e1bff617 	ldw	r6,-40(fp)
 800125c:	e17ffd17 	ldw	r5,-12(fp)
 8001260:	1009883a 	mov	r4,r2
 8001264:	800311c0 	call	800311c <memcpy>
      ptr   += n;
 8001268:	e0fffd17 	ldw	r3,-12(fp)
 800126c:	e0bff617 	ldw	r2,-40(fp)
 8001270:	1885883a 	add	r2,r3,r2
 8001274:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8001278:	e0fffe17 	ldw	r3,-8(fp)
 800127c:	e0bff617 	ldw	r2,-40(fp)
 8001280:	1885c83a 	sub	r2,r3,r2
 8001284:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8001288:	e0fff917 	ldw	r3,-28(fp)
 800128c:	e0bff617 	ldw	r2,-40(fp)
 8001290:	1885883a 	add	r2,r3,r2
 8001294:	10c1ffcc 	andi	r3,r2,2047
 8001298:	e0bffc17 	ldw	r2,-16(fp)
 800129c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80012a0:	e0bffe17 	ldw	r2,-8(fp)
 80012a4:	00bfc716 	blt	zero,r2,80011c4 <altera_avalon_jtag_uart_write+0x30>
 80012a8:	00000106 	br	80012b0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80012ac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80012b0:	0005303a 	rdctl	r2,status
 80012b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80012b8:	e0fffb17 	ldw	r3,-20(fp)
 80012bc:	00bfff84 	movi	r2,-2
 80012c0:	1884703a 	and	r2,r3,r2
 80012c4:	1001703a 	wrctl	status,r2
  
  return context;
 80012c8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80012cc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80012d0:	e0bffc17 	ldw	r2,-16(fp)
 80012d4:	10800817 	ldw	r2,32(r2)
 80012d8:	10c00094 	ori	r3,r2,2
 80012dc:	e0bffc17 	ldw	r2,-16(fp)
 80012e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80012e4:	e0bffc17 	ldw	r2,-16(fp)
 80012e8:	10800017 	ldw	r2,0(r2)
 80012ec:	10800104 	addi	r2,r2,4
 80012f0:	1007883a 	mov	r3,r2
 80012f4:	e0bffc17 	ldw	r2,-16(fp)
 80012f8:	10800817 	ldw	r2,32(r2)
 80012fc:	18800035 	stwio	r2,0(r3)
 8001300:	e0bffa17 	ldw	r2,-24(fp)
 8001304:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001308:	e0bff817 	ldw	r2,-32(fp)
 800130c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8001310:	e0bffe17 	ldw	r2,-8(fp)
 8001314:	0080100e 	bge	zero,r2,8001358 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8001318:	e0bfff17 	ldw	r2,-4(fp)
 800131c:	1090000c 	andi	r2,r2,16384
 8001320:	1000101e 	bne	r2,zero,8001364 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8001324:	0001883a 	nop
 8001328:	e0bffc17 	ldw	r2,-16(fp)
 800132c:	10c00d17 	ldw	r3,52(r2)
 8001330:	e0bff517 	ldw	r2,-44(fp)
 8001334:	1880051e 	bne	r3,r2,800134c <altera_avalon_jtag_uart_write+0x1b8>
 8001338:	e0bffc17 	ldw	r2,-16(fp)
 800133c:	10c00917 	ldw	r3,36(r2)
 8001340:	e0bffc17 	ldw	r2,-16(fp)
 8001344:	10800117 	ldw	r2,4(r2)
 8001348:	18bff736 	bltu	r3,r2,8001328 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800134c:	e0bffc17 	ldw	r2,-16(fp)
 8001350:	10800917 	ldw	r2,36(r2)
 8001354:	1000051e 	bne	r2,zero,800136c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8001358:	e0bffe17 	ldw	r2,-8(fp)
 800135c:	00bfd016 	blt	zero,r2,80012a0 <altera_avalon_jtag_uart_write+0x10c>
 8001360:	00000306 	br	8001370 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8001364:	0001883a 	nop
 8001368:	00000106 	br	8001370 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800136c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8001370:	e0fffd17 	ldw	r3,-12(fp)
 8001374:	e0bff717 	ldw	r2,-36(fp)
 8001378:	18800426 	beq	r3,r2,800138c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800137c:	e0fffd17 	ldw	r3,-12(fp)
 8001380:	e0bff717 	ldw	r2,-36(fp)
 8001384:	1885c83a 	sub	r2,r3,r2
 8001388:	00000606 	br	80013a4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800138c:	e0bfff17 	ldw	r2,-4(fp)
 8001390:	1090000c 	andi	r2,r2,16384
 8001394:	10000226 	beq	r2,zero,80013a0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8001398:	00bffd44 	movi	r2,-11
 800139c:	00000106 	br	80013a4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80013a0:	00bffec4 	movi	r2,-5
}
 80013a4:	e037883a 	mov	sp,fp
 80013a8:	dfc00117 	ldw	ra,4(sp)
 80013ac:	df000017 	ldw	fp,0(sp)
 80013b0:	dec00204 	addi	sp,sp,8
 80013b4:	f800283a 	ret

080013b8 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
 80013b8:	defffc04 	addi	sp,sp,-16
 80013bc:	dfc00315 	stw	ra,12(sp)
 80013c0:	df000215 	stw	fp,8(sp)
 80013c4:	df000204 	addi	fp,sp,8
 80013c8:	e13fff15 	stw	r4,-4(fp)
	char * name;
	name = (char *) char_buffer->dev.name;
 80013cc:	e0bfff17 	ldw	r2,-4(fp)
 80013d0:	10800217 	ldw	r2,8(r2)
 80013d4:	e0bffe15 	stw	r2,-8(fp)

	for ( ; (*name) != '\0'; name++) {
 80013d8:	00000b06 	br	8001408 <alt_up_char_buffer_init+0x50>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
 80013dc:	01420134 	movhi	r5,2052
 80013e0:	296ed504 	addi	r5,r5,-17580
 80013e4:	e13ffe17 	ldw	r4,-8(fp)
 80013e8:	80032640 	call	8003264 <strcmp>
 80013ec:	1000031e 	bne	r2,zero,80013fc <alt_up_char_buffer_init+0x44>
			(*name) = '\0';
 80013f0:	e0bffe17 	ldw	r2,-8(fp)
 80013f4:	10000005 	stb	zero,0(r2)
			break;
 80013f8:	00000906 	br	8001420 <alt_up_char_buffer_init+0x68>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
 80013fc:	e0bffe17 	ldw	r2,-8(fp)
 8001400:	10800044 	addi	r2,r2,1
 8001404:	e0bffe15 	stw	r2,-8(fp)
 8001408:	e0bffe17 	ldw	r2,-8(fp)
 800140c:	10800003 	ldbu	r2,0(r2)
 8001410:	10803fcc 	andi	r2,r2,255
 8001414:	1080201c 	xori	r2,r2,128
 8001418:	10bfe004 	addi	r2,r2,-128
 800141c:	103fef1e 	bne	r2,zero,80013dc <alt_up_char_buffer_init+0x24>
			(*name) = '\0';
			break;
		}
	}
	
	return;
 8001420:	0001883a 	nop
}
 8001424:	e037883a 	mov	sp,fp
 8001428:	dfc00117 	ldw	ra,4(sp)
 800142c:	df000017 	ldw	fp,0(sp)
 8001430:	dec00204 	addi	sp,sp,8
 8001434:	f800283a 	ret

08001438 <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
 8001438:	defffc04 	addi	sp,sp,-16
 800143c:	dfc00315 	stw	ra,12(sp)
 8001440:	df000215 	stw	fp,8(sp)
 8001444:	df000204 	addi	fp,sp,8
 8001448:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
 800144c:	d1600204 	addi	r5,gp,-32760
 8001450:	e13fff17 	ldw	r4,-4(fp)
 8001454:	80029980 	call	8002998 <alt_find_dev>
 8001458:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800145c:	e0bffe17 	ldw	r2,-8(fp)
}
 8001460:	e037883a 	mov	sp,fp
 8001464:	dfc00117 	ldw	ra,4(sp)
 8001468:	df000017 	ldw	fp,0(sp)
 800146c:	dec00204 	addi	sp,sp,8
 8001470:	f800283a 	ret

08001474 <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
 8001474:	defffa04 	addi	sp,sp,-24
 8001478:	df000515 	stw	fp,20(sp)
 800147c:	df000504 	addi	fp,sp,20
 8001480:	e13ffc15 	stw	r4,-16(fp)
 8001484:	2805883a 	mov	r2,r5
 8001488:	e1bffe15 	stw	r6,-8(fp)
 800148c:	e1ffff15 	stw	r7,-4(fp)
 8001490:	e0bffd05 	stb	r2,-12(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 8001494:	e0bffc17 	ldw	r2,-16(fp)
 8001498:	10800c17 	ldw	r2,48(r2)
 800149c:	e0fffe17 	ldw	r3,-8(fp)
 80014a0:	1880042e 	bgeu	r3,r2,80014b4 <alt_up_char_buffer_draw+0x40>
 80014a4:	e0bffc17 	ldw	r2,-16(fp)
 80014a8:	10800d17 	ldw	r2,52(r2)
 80014ac:	e0ffff17 	ldw	r3,-4(fp)
 80014b0:	18800236 	bltu	r3,r2,80014bc <alt_up_char_buffer_draw+0x48>
		return -1;
 80014b4:	00bfffc4 	movi	r2,-1
 80014b8:	00001d06 	br	8001530 <alt_up_char_buffer_draw+0xbc>
	
	unsigned int addr = 0;
 80014bc:	e03ffb15 	stw	zero,-20(fp)
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
 80014c0:	e0bffc17 	ldw	r2,-16(fp)
 80014c4:	10c00f17 	ldw	r3,60(r2)
 80014c8:	e0bffe17 	ldw	r2,-8(fp)
 80014cc:	1886703a 	and	r3,r3,r2
 80014d0:	e0bffc17 	ldw	r2,-16(fp)
 80014d4:	10800e17 	ldw	r2,56(r2)
 80014d8:	1884983a 	sll	r2,r3,r2
 80014dc:	e0fffb17 	ldw	r3,-20(fp)
 80014e0:	1884b03a 	or	r2,r3,r2
 80014e4:	e0bffb15 	stw	r2,-20(fp)
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
 80014e8:	e0bffc17 	ldw	r2,-16(fp)
 80014ec:	10c01117 	ldw	r3,68(r2)
 80014f0:	e0bfff17 	ldw	r2,-4(fp)
 80014f4:	1886703a 	and	r3,r3,r2
 80014f8:	e0bffc17 	ldw	r2,-16(fp)
 80014fc:	10801017 	ldw	r2,64(r2)
 8001500:	1884983a 	sll	r2,r3,r2
 8001504:	e0fffb17 	ldw	r3,-20(fp)
 8001508:	1884b03a 	or	r2,r3,r2
 800150c:	e0bffb15 	stw	r2,-20(fp)
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
 8001510:	e0bffc17 	ldw	r2,-16(fp)
 8001514:	10c00b17 	ldw	r3,44(r2)
 8001518:	e0bffb17 	ldw	r2,-20(fp)
 800151c:	1885883a 	add	r2,r3,r2
 8001520:	1007883a 	mov	r3,r2
 8001524:	e0bffd03 	ldbu	r2,-12(fp)
 8001528:	18800025 	stbio	r2,0(r3)

	return 0;
 800152c:	0005883a 	mov	r2,zero
}
 8001530:	e037883a 	mov	sp,fp
 8001534:	df000017 	ldw	fp,0(sp)
 8001538:	dec00104 	addi	sp,sp,4
 800153c:	f800283a 	ret

08001540 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
 8001540:	defffa04 	addi	sp,sp,-24
 8001544:	df000515 	stw	fp,20(sp)
 8001548:	df000504 	addi	fp,sp,20
 800154c:	e13ffc15 	stw	r4,-16(fp)
 8001550:	e17ffd15 	stw	r5,-12(fp)
 8001554:	e1bffe15 	stw	r6,-8(fp)
 8001558:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
 800155c:	e0bffc17 	ldw	r2,-16(fp)
 8001560:	10800c17 	ldw	r2,48(r2)
 8001564:	e0fffe17 	ldw	r3,-8(fp)
 8001568:	1880042e 	bgeu	r3,r2,800157c <alt_up_char_buffer_string+0x3c>
 800156c:	e0bffc17 	ldw	r2,-16(fp)
 8001570:	10800d17 	ldw	r2,52(r2)
 8001574:	e0ffff17 	ldw	r3,-4(fp)
 8001578:	18800236 	bltu	r3,r2,8001584 <alt_up_char_buffer_string+0x44>
		return -1;
 800157c:	00bfffc4 	movi	r2,-1
 8001580:	00002a06 	br	800162c <alt_up_char_buffer_string+0xec>
	
	unsigned int offset = 0;
 8001584:	e03ffb15 	stw	zero,-20(fp)
	offset = (y << char_buffer->y_coord_offset) + x;
 8001588:	e0bffc17 	ldw	r2,-16(fp)
 800158c:	10801017 	ldw	r2,64(r2)
 8001590:	e0ffff17 	ldw	r3,-4(fp)
 8001594:	1886983a 	sll	r3,r3,r2
 8001598:	e0bffe17 	ldw	r2,-8(fp)
 800159c:	1885883a 	add	r2,r3,r2
 80015a0:	e0bffb15 	stw	r2,-20(fp)

	while ( *ptr )
 80015a4:	00001a06 	br	8001610 <alt_up_char_buffer_string+0xd0>
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
 80015a8:	e0bffc17 	ldw	r2,-16(fp)
 80015ac:	10c00b17 	ldw	r3,44(r2)
 80015b0:	e0bffb17 	ldw	r2,-20(fp)
 80015b4:	1885883a 	add	r2,r3,r2
 80015b8:	1007883a 	mov	r3,r2
 80015bc:	e0bffd17 	ldw	r2,-12(fp)
 80015c0:	10800003 	ldbu	r2,0(r2)
 80015c4:	10803fcc 	andi	r2,r2,255
 80015c8:	1080201c 	xori	r2,r2,128
 80015cc:	10bfe004 	addi	r2,r2,-128
 80015d0:	18800025 	stbio	r2,0(r3)
		++ptr;
 80015d4:	e0bffd17 	ldw	r2,-12(fp)
 80015d8:	10800044 	addi	r2,r2,1
 80015dc:	e0bffd15 	stw	r2,-12(fp)
		if (++x >= char_buffer->x_resolution)
 80015e0:	e0bffe17 	ldw	r2,-8(fp)
 80015e4:	10800044 	addi	r2,r2,1
 80015e8:	e0bffe15 	stw	r2,-8(fp)
 80015ec:	e0bffc17 	ldw	r2,-16(fp)
 80015f0:	10800c17 	ldw	r2,48(r2)
 80015f4:	e0fffe17 	ldw	r3,-8(fp)
 80015f8:	18800236 	bltu	r3,r2,8001604 <alt_up_char_buffer_string+0xc4>
			return -1;
 80015fc:	00bfffc4 	movi	r2,-1
 8001600:	00000a06 	br	800162c <alt_up_char_buffer_string+0xec>
		++offset;
 8001604:	e0bffb17 	ldw	r2,-20(fp)
 8001608:	10800044 	addi	r2,r2,1
 800160c:	e0bffb15 	stw	r2,-20(fp)
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
 8001610:	e0bffd17 	ldw	r2,-12(fp)
 8001614:	10800003 	ldbu	r2,0(r2)
 8001618:	10803fcc 	andi	r2,r2,255
 800161c:	1080201c 	xori	r2,r2,128
 8001620:	10bfe004 	addi	r2,r2,-128
 8001624:	103fe01e 	bne	r2,zero,80015a8 <alt_up_char_buffer_string+0x68>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
 8001628:	0005883a 	mov	r2,zero
}
 800162c:	e037883a 	mov	sp,fp
 8001630:	df000017 	ldw	fp,0(sp)
 8001634:	dec00104 	addi	sp,sp,4
 8001638:	f800283a 	ret

0800163c <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
 800163c:	defffe04 	addi	sp,sp,-8
 8001640:	df000115 	stw	fp,4(sp)
 8001644:	df000104 	addi	fp,sp,4
 8001648:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
 800164c:	e0bfff17 	ldw	r2,-4(fp)
 8001650:	10800a17 	ldw	r2,40(r2)
 8001654:	10800084 	addi	r2,r2,2
 8001658:	1007883a 	mov	r3,r2
 800165c:	00800044 	movi	r2,1
 8001660:	18800025 	stbio	r2,0(r3)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
 8001664:	0001883a 	nop
 8001668:	e0bfff17 	ldw	r2,-4(fp)
 800166c:	10800a17 	ldw	r2,40(r2)
 8001670:	10800084 	addi	r2,r2,2
 8001674:	10800023 	ldbuio	r2,0(r2)
 8001678:	10803fcc 	andi	r2,r2,255
 800167c:	1080004c 	andi	r2,r2,1
 8001680:	103ff91e 	bne	r2,zero,8001668 <alt_up_char_buffer_clear+0x2c>
	return 0;
 8001684:	0005883a 	mov	r2,zero
}
 8001688:	e037883a 	mov	sp,fp
 800168c:	df000017 	ldw	fp,0(sp)
 8001690:	dec00104 	addi	sp,sp,4
 8001694:	f800283a 	ret

08001698 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8001698:	defffc04 	addi	sp,sp,-16
 800169c:	dfc00315 	stw	ra,12(sp)
 80016a0:	df000215 	stw	fp,8(sp)
 80016a4:	df000204 	addi	fp,sp,8
 80016a8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 80016ac:	d1600204 	addi	r5,gp,-32760
 80016b0:	e13fff17 	ldw	r4,-4(fp)
 80016b4:	80029980 	call	8002998 <alt_find_dev>
 80016b8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80016bc:	e0bffe17 	ldw	r2,-8(fp)
}
 80016c0:	e037883a 	mov	sp,fp
 80016c4:	dfc00117 	ldw	ra,4(sp)
 80016c8:	df000017 	ldw	fp,0(sp)
 80016cc:	dec00204 	addi	sp,sp,8
 80016d0:	f800283a 	ret

080016d4 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 80016d4:	defffa04 	addi	sp,sp,-24
 80016d8:	df000515 	stw	fp,20(sp)
 80016dc:	df000504 	addi	fp,sp,20
 80016e0:	e13ffc15 	stw	r4,-16(fp)
 80016e4:	e17ffd15 	stw	r5,-12(fp)
 80016e8:	e1bffe15 	stw	r6,-8(fp)
 80016ec:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 80016f0:	e0bffc17 	ldw	r2,-16(fp)
 80016f4:	10800f17 	ldw	r2,60(r2)
 80016f8:	e0fffe17 	ldw	r3,-8(fp)
 80016fc:	1880042e 	bgeu	r3,r2,8001710 <alt_up_pixel_buffer_dma_draw+0x3c>
 8001700:	e0bffc17 	ldw	r2,-16(fp)
 8001704:	10801017 	ldw	r2,64(r2)
 8001708:	e0ffff17 	ldw	r3,-4(fp)
 800170c:	18800236 	bltu	r3,r2,8001718 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 8001710:	00bfffc4 	movi	r2,-1
 8001714:	00005006 	br	8001858 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 8001718:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 800171c:	e0bffc17 	ldw	r2,-16(fp)
 8001720:	10800d17 	ldw	r2,52(r2)
 8001724:	1000151e 	bne	r2,zero,800177c <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8001728:	e0bffc17 	ldw	r2,-16(fp)
 800172c:	10c01217 	ldw	r3,72(r2)
 8001730:	e0bffe17 	ldw	r2,-8(fp)
 8001734:	1886703a 	and	r3,r3,r2
 8001738:	e0bffc17 	ldw	r2,-16(fp)
 800173c:	10801117 	ldw	r2,68(r2)
 8001740:	1884983a 	sll	r2,r3,r2
 8001744:	e0fffb17 	ldw	r3,-20(fp)
 8001748:	1885883a 	add	r2,r3,r2
 800174c:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8001750:	e0bffc17 	ldw	r2,-16(fp)
 8001754:	10c01417 	ldw	r3,80(r2)
 8001758:	e0bfff17 	ldw	r2,-4(fp)
 800175c:	1886703a 	and	r3,r3,r2
 8001760:	e0bffc17 	ldw	r2,-16(fp)
 8001764:	10801317 	ldw	r2,76(r2)
 8001768:	1884983a 	sll	r2,r3,r2
 800176c:	e0fffb17 	ldw	r3,-20(fp)
 8001770:	1885883a 	add	r2,r3,r2
 8001774:	e0bffb15 	stw	r2,-20(fp)
 8001778:	00001706 	br	80017d8 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 800177c:	e0bffc17 	ldw	r2,-16(fp)
 8001780:	10c01217 	ldw	r3,72(r2)
 8001784:	e0bffe17 	ldw	r2,-8(fp)
 8001788:	1886703a 	and	r3,r3,r2
 800178c:	e0bffc17 	ldw	r2,-16(fp)
 8001790:	10801117 	ldw	r2,68(r2)
 8001794:	1884983a 	sll	r2,r3,r2
 8001798:	e0fffb17 	ldw	r3,-20(fp)
 800179c:	1885883a 	add	r2,r3,r2
 80017a0:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 80017a4:	e0bffc17 	ldw	r2,-16(fp)
 80017a8:	10c01417 	ldw	r3,80(r2)
 80017ac:	e0bfff17 	ldw	r2,-4(fp)
 80017b0:	1886703a 	and	r3,r3,r2
 80017b4:	e0bffc17 	ldw	r2,-16(fp)
 80017b8:	10800f17 	ldw	r2,60(r2)
 80017bc:	1887383a 	mul	r3,r3,r2
 80017c0:	e0bffc17 	ldw	r2,-16(fp)
 80017c4:	10801117 	ldw	r2,68(r2)
 80017c8:	1884983a 	sll	r2,r3,r2
 80017cc:	e0fffb17 	ldw	r3,-20(fp)
 80017d0:	1885883a 	add	r2,r3,r2
 80017d4:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80017d8:	e0bffc17 	ldw	r2,-16(fp)
 80017dc:	10800e17 	ldw	r2,56(r2)
 80017e0:	10800058 	cmpnei	r2,r2,1
 80017e4:	1000081e 	bne	r2,zero,8001808 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80017e8:	e0bffc17 	ldw	r2,-16(fp)
 80017ec:	10c00c17 	ldw	r3,48(r2)
 80017f0:	e0bffb17 	ldw	r2,-20(fp)
 80017f4:	1885883a 	add	r2,r3,r2
 80017f8:	1007883a 	mov	r3,r2
 80017fc:	e0bffd17 	ldw	r2,-12(fp)
 8001800:	18800025 	stbio	r2,0(r3)
 8001804:	00001306 	br	8001854 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001808:	e0bffc17 	ldw	r2,-16(fp)
 800180c:	10800e17 	ldw	r2,56(r2)
 8001810:	10800098 	cmpnei	r2,r2,2
 8001814:	1000081e 	bne	r2,zero,8001838 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8001818:	e0bffc17 	ldw	r2,-16(fp)
 800181c:	10c00c17 	ldw	r3,48(r2)
 8001820:	e0bffb17 	ldw	r2,-20(fp)
 8001824:	1885883a 	add	r2,r3,r2
 8001828:	1007883a 	mov	r3,r2
 800182c:	e0bffd17 	ldw	r2,-12(fp)
 8001830:	1880002d 	sthio	r2,0(r3)
 8001834:	00000706 	br	8001854 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8001838:	e0bffc17 	ldw	r2,-16(fp)
 800183c:	10c00c17 	ldw	r3,48(r2)
 8001840:	e0bffb17 	ldw	r2,-20(fp)
 8001844:	1885883a 	add	r2,r3,r2
 8001848:	1007883a 	mov	r3,r2
 800184c:	e0bffd17 	ldw	r2,-12(fp)
 8001850:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 8001854:	0005883a 	mov	r2,zero
}
 8001858:	e037883a 	mov	sp,fp
 800185c:	df000017 	ldw	fp,0(sp)
 8001860:	dec00104 	addi	sp,sp,4
 8001864:	f800283a 	ret

08001868 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8001868:	defffd04 	addi	sp,sp,-12
 800186c:	df000215 	stw	fp,8(sp)
 8001870:	df000204 	addi	fp,sp,8
 8001874:	e13ffe15 	stw	r4,-8(fp)
 8001878:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 800187c:	e0bffe17 	ldw	r2,-8(fp)
 8001880:	10800a17 	ldw	r2,40(r2)
 8001884:	10800104 	addi	r2,r2,4
 8001888:	1007883a 	mov	r3,r2
 800188c:	e0bfff17 	ldw	r2,-4(fp)
 8001890:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8001894:	e0bffe17 	ldw	r2,-8(fp)
 8001898:	10800a17 	ldw	r2,40(r2)
 800189c:	10800104 	addi	r2,r2,4
 80018a0:	10800037 	ldwio	r2,0(r2)
 80018a4:	1007883a 	mov	r3,r2
 80018a8:	e0bffe17 	ldw	r2,-8(fp)
 80018ac:	10c00c15 	stw	r3,48(r2)
	return 0;
 80018b0:	0005883a 	mov	r2,zero
}
 80018b4:	e037883a 	mov	sp,fp
 80018b8:	df000017 	ldw	fp,0(sp)
 80018bc:	dec00104 	addi	sp,sp,4
 80018c0:	f800283a 	ret

080018c4 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 80018c4:	defffd04 	addi	sp,sp,-12
 80018c8:	df000215 	stw	fp,8(sp)
 80018cc:	dc000115 	stw	r16,4(sp)
 80018d0:	df000204 	addi	fp,sp,8
 80018d4:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 80018d8:	e0bffe17 	ldw	r2,-8(fp)
 80018dc:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 80018e0:	e0bffe17 	ldw	r2,-8(fp)
 80018e4:	10800a17 	ldw	r2,40(r2)
 80018e8:	1007883a 	mov	r3,r2
 80018ec:	00800044 	movi	r2,1
 80018f0:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 80018f4:	e0bffe17 	ldw	r2,-8(fp)
 80018f8:	10c00b17 	ldw	r3,44(r2)
 80018fc:	e0bffe17 	ldw	r2,-8(fp)
 8001900:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8001904:	e0bffe17 	ldw	r2,-8(fp)
 8001908:	14000b15 	stw	r16,44(r2)
	return 0;
 800190c:	0005883a 	mov	r2,zero
}
 8001910:	e6ffff04 	addi	sp,fp,-4
 8001914:	df000117 	ldw	fp,4(sp)
 8001918:	dc000017 	ldw	r16,0(sp)
 800191c:	dec00204 	addi	sp,sp,8
 8001920:	f800283a 	ret

08001924 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8001924:	defffe04 	addi	sp,sp,-8
 8001928:	df000115 	stw	fp,4(sp)
 800192c:	df000104 	addi	fp,sp,4
 8001930:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8001934:	e0bfff17 	ldw	r2,-4(fp)
 8001938:	10800a17 	ldw	r2,40(r2)
 800193c:	10800304 	addi	r2,r2,12
 8001940:	10800037 	ldwio	r2,0(r2)
 8001944:	1080004c 	andi	r2,r2,1
}
 8001948:	e037883a 	mov	sp,fp
 800194c:	df000017 	ldw	fp,0(sp)
 8001950:	dec00104 	addi	sp,sp,4
 8001954:	f800283a 	ret

08001958 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8001958:	defff704 	addi	sp,sp,-36
 800195c:	df000815 	stw	fp,32(sp)
 8001960:	dd400715 	stw	r21,28(sp)
 8001964:	dd000615 	stw	r20,24(sp)
 8001968:	dcc00515 	stw	r19,20(sp)
 800196c:	dc800415 	stw	r18,16(sp)
 8001970:	dc400315 	stw	r17,12(sp)
 8001974:	dc000215 	stw	r16,8(sp)
 8001978:	df000804 	addi	fp,sp,32
 800197c:	e13ff815 	stw	r4,-32(fp)
 8001980:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001984:	e0bff917 	ldw	r2,-28(fp)
 8001988:	10800058 	cmpnei	r2,r2,1
 800198c:	1000031e 	bne	r2,zero,800199c <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 8001990:	e0bff817 	ldw	r2,-32(fp)
 8001994:	14400c17 	ldw	r17,48(r2)
 8001998:	00000206 	br	80019a4 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 800199c:	e0bff817 	ldw	r2,-32(fp)
 80019a0:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 80019a4:	e0bff817 	ldw	r2,-32(fp)
 80019a8:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80019ac:	e0bff817 	ldw	r2,-32(fp)
 80019b0:	10800e17 	ldw	r2,56(r2)
 80019b4:	10800098 	cmpnei	r2,r2,2
 80019b8:	1000031e 	bne	r2,zero,80019c8 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 80019bc:	8405883a 	add	r2,r16,r16
 80019c0:	1021883a 	mov	r16,r2
 80019c4:	00000306 	br	80019d4 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 80019c8:	8405883a 	add	r2,r16,r16
 80019cc:	1085883a 	add	r2,r2,r2
 80019d0:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 80019d4:	e0bff817 	ldw	r2,-32(fp)
 80019d8:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80019dc:	e0bff817 	ldw	r2,-32(fp)
 80019e0:	10800d17 	ldw	r2,52(r2)
 80019e4:	1000111e 	bne	r2,zero,8001a2c <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80019e8:	e0bff817 	ldw	r2,-32(fp)
 80019ec:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 80019f0:	0029883a 	mov	r20,zero
 80019f4:	00000b06 	br	8001a24 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 80019f8:	0027883a 	mov	r19,zero
 80019fc:	00000406 	br	8001a10 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 8001a00:	9c45883a 	add	r2,r19,r17
 8001a04:	0007883a 	mov	r3,zero
 8001a08:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8001a0c:	9cc00104 	addi	r19,r19,4
 8001a10:	9c3ffb36 	bltu	r19,r16,8001a00 <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8001a14:	00800044 	movi	r2,1
 8001a18:	1544983a 	sll	r2,r2,r21
 8001a1c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8001a20:	a5000044 	addi	r20,r20,1
 8001a24:	a4bff436 	bltu	r20,r18,80019f8 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8001a28:	00000a06 	br	8001a54 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8001a2c:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 8001a30:	0021883a 	mov	r16,zero
 8001a34:	00000506 	br	8001a4c <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 8001a38:	8005883a 	mov	r2,r16
 8001a3c:	1445883a 	add	r2,r2,r17
 8001a40:	0007883a 	mov	r3,zero
 8001a44:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8001a48:	84000104 	addi	r16,r16,4
 8001a4c:	8005883a 	mov	r2,r16
 8001a50:	14bff936 	bltu	r2,r18,8001a38 <alt_up_pixel_buffer_dma_clear_screen+0xe0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8001a54:	0001883a 	nop
 8001a58:	e6fffa04 	addi	sp,fp,-24
 8001a5c:	df000617 	ldw	fp,24(sp)
 8001a60:	dd400517 	ldw	r21,20(sp)
 8001a64:	dd000417 	ldw	r20,16(sp)
 8001a68:	dcc00317 	ldw	r19,12(sp)
 8001a6c:	dc800217 	ldw	r18,8(sp)
 8001a70:	dc400117 	ldw	r17,4(sp)
 8001a74:	dc000017 	ldw	r16,0(sp)
 8001a78:	dec00704 	addi	sp,sp,28
 8001a7c:	f800283a 	ret

08001a80 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 8001a80:	defff304 	addi	sp,sp,-52
 8001a84:	df000c15 	stw	fp,48(sp)
 8001a88:	ddc00b15 	stw	r23,44(sp)
 8001a8c:	dd800a15 	stw	r22,40(sp)
 8001a90:	dd400915 	stw	r21,36(sp)
 8001a94:	dd000815 	stw	r20,32(sp)
 8001a98:	dcc00715 	stw	r19,28(sp)
 8001a9c:	dc800615 	stw	r18,24(sp)
 8001aa0:	dc400515 	stw	r17,20(sp)
 8001aa4:	dc000415 	stw	r16,16(sp)
 8001aa8:	df000c04 	addi	fp,sp,48
 8001aac:	e13ff415 	stw	r4,-48(fp)
 8001ab0:	e17ff515 	stw	r5,-44(fp)
 8001ab4:	e1bff615 	stw	r6,-40(fp)
 8001ab8:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8001abc:	e0bff417 	ldw	r2,-48(fp)
 8001ac0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8001ac4:	e0bff417 	ldw	r2,-48(fp)
 8001ac8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8001acc:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 8001ad0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 8001ad4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 8001ad8:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 8001adc:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8001ae0:	a580032e 	bgeu	r20,r22,8001af0 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 8001ae4:	b02b883a 	mov	r21,r22
		l_x = r_x;
 8001ae8:	a02d883a 	mov	r22,r20
		r_x = temp;
 8001aec:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 8001af0:	9c40032e 	bgeu	r19,r17,8001b00 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 8001af4:	882b883a 	mov	r21,r17
		t_y = b_y;
 8001af8:	9823883a 	mov	r17,r19
		b_y = temp;
 8001afc:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8001b00:	b480892e 	bgeu	r22,r18,8001d28 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 8001b04:	8c00882e 	bgeu	r17,r16,8001d28 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8001b08:	a4800136 	bltu	r20,r18,8001b10 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 8001b0c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8001b10:	9c000136 	bltu	r19,r16,8001b18 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 8001b14:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001b18:	e0800317 	ldw	r2,12(fp)
 8001b1c:	10800058 	cmpnei	r2,r2,1
 8001b20:	1000031e 	bne	r2,zero,8001b30 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 8001b24:	e0bff417 	ldw	r2,-48(fp)
 8001b28:	14000c17 	ldw	r16,48(r2)
 8001b2c:	00000206 	br	8001b38 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 8001b30:	e0bff417 	ldw	r2,-48(fp)
 8001b34:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8001b38:	e0bff417 	ldw	r2,-48(fp)
 8001b3c:	10800d17 	ldw	r2,52(r2)
 8001b40:	10003c1e 	bne	r2,zero,8001c34 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8001b44:	e0bff417 	ldw	r2,-48(fp)
 8001b48:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8001b4c:	8d44983a 	sll	r2,r17,r21
 8001b50:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001b54:	e0bff417 	ldw	r2,-48(fp)
 8001b58:	10800e17 	ldw	r2,56(r2)
 8001b5c:	10800058 	cmpnei	r2,r2,1
 8001b60:	10000f1e 	bne	r2,zero,8001ba0 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 8001b64:	8825883a 	mov	r18,r17
 8001b68:	00000b06 	br	8001b98 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 8001b6c:	b023883a 	mov	r17,r22
 8001b70:	00000406 	br	8001b84 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8001b74:	8c05883a 	add	r2,r17,r16
 8001b78:	b807883a 	mov	r3,r23
 8001b7c:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001b80:	8c400044 	addi	r17,r17,1
 8001b84:	a47ffb2e 	bgeu	r20,r17,8001b74 <alt_up_pixel_buffer_dma_draw_box+0xf4>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8001b88:	00800044 	movi	r2,1
 8001b8c:	1544983a 	sll	r2,r2,r21
 8001b90:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8001b94:	94800044 	addi	r18,r18,1
 8001b98:	9cbff42e 	bgeu	r19,r18,8001b6c <alt_up_pixel_buffer_dma_draw_box+0xec>
 8001b9c:	00006306 	br	8001d2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001ba0:	e0bff417 	ldw	r2,-48(fp)
 8001ba4:	10800e17 	ldw	r2,56(r2)
 8001ba8:	10800098 	cmpnei	r2,r2,2
 8001bac:	1000101e 	bne	r2,zero,8001bf0 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 8001bb0:	8825883a 	mov	r18,r17
 8001bb4:	00000c06 	br	8001be8 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 8001bb8:	b023883a 	mov	r17,r22
 8001bbc:	00000506 	br	8001bd4 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8001bc0:	8c45883a 	add	r2,r17,r17
 8001bc4:	1405883a 	add	r2,r2,r16
 8001bc8:	b807883a 	mov	r3,r23
 8001bcc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001bd0:	8c400044 	addi	r17,r17,1
 8001bd4:	a47ffa2e 	bgeu	r20,r17,8001bc0 <alt_up_pixel_buffer_dma_draw_box+0x140>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 8001bd8:	00800044 	movi	r2,1
 8001bdc:	1544983a 	sll	r2,r2,r21
 8001be0:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8001be4:	94800044 	addi	r18,r18,1
 8001be8:	9cbff32e 	bgeu	r19,r18,8001bb8 <alt_up_pixel_buffer_dma_draw_box+0x138>
 8001bec:	00004f06 	br	8001d2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8001bf0:	8825883a 	mov	r18,r17
 8001bf4:	00000d06 	br	8001c2c <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 8001bf8:	b023883a 	mov	r17,r22
 8001bfc:	00000606 	br	8001c18 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8001c00:	8c45883a 	add	r2,r17,r17
 8001c04:	1085883a 	add	r2,r2,r2
 8001c08:	1405883a 	add	r2,r2,r16
 8001c0c:	b807883a 	mov	r3,r23
 8001c10:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001c14:	8c400044 	addi	r17,r17,1
 8001c18:	a47ff92e 	bgeu	r20,r17,8001c00 <alt_up_pixel_buffer_dma_draw_box+0x180>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8001c1c:	00800044 	movi	r2,1
 8001c20:	1544983a 	sll	r2,r2,r21
 8001c24:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8001c28:	94800044 	addi	r18,r18,1
 8001c2c:	9cbff22e 	bgeu	r19,r18,8001bf8 <alt_up_pixel_buffer_dma_draw_box+0x178>
 8001c30:	00003e06 	br	8001d2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001c34:	e0bff417 	ldw	r2,-48(fp)
 8001c38:	10800e17 	ldw	r2,56(r2)
 8001c3c:	10800058 	cmpnei	r2,r2,1
 8001c40:	10000f1e 	bne	r2,zero,8001c80 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 8001c44:	8c85383a 	mul	r2,r17,r18
 8001c48:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8001c4c:	882b883a 	mov	r21,r17
 8001c50:	00000906 	br	8001c78 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 8001c54:	b023883a 	mov	r17,r22
 8001c58:	00000406 	br	8001c6c <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8001c5c:	8c05883a 	add	r2,r17,r16
 8001c60:	b807883a 	mov	r3,r23
 8001c64:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001c68:	8c400044 	addi	r17,r17,1
 8001c6c:	a47ffb2e 	bgeu	r20,r17,8001c5c <alt_up_pixel_buffer_dma_draw_box+0x1dc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8001c70:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8001c74:	ad400044 	addi	r21,r21,1
 8001c78:	9d7ff62e 	bgeu	r19,r21,8001c54 <alt_up_pixel_buffer_dma_draw_box+0x1d4>
 8001c7c:	00002b06 	br	8001d2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001c80:	e0bff417 	ldw	r2,-48(fp)
 8001c84:	10800e17 	ldw	r2,56(r2)
 8001c88:	10800098 	cmpnei	r2,r2,2
 8001c8c:	1000121e 	bne	r2,zero,8001cd8 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 8001c90:	9485883a 	add	r2,r18,r18
 8001c94:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8001c98:	8c85383a 	mul	r2,r17,r18
 8001c9c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8001ca0:	882b883a 	mov	r21,r17
 8001ca4:	00000a06 	br	8001cd0 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 8001ca8:	b023883a 	mov	r17,r22
 8001cac:	00000506 	br	8001cc4 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8001cb0:	8c45883a 	add	r2,r17,r17
 8001cb4:	1405883a 	add	r2,r2,r16
 8001cb8:	b807883a 	mov	r3,r23
 8001cbc:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001cc0:	8c400044 	addi	r17,r17,1
 8001cc4:	a47ffa2e 	bgeu	r20,r17,8001cb0 <alt_up_pixel_buffer_dma_draw_box+0x230>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 8001cc8:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8001ccc:	ad400044 	addi	r21,r21,1
 8001cd0:	9d7ff52e 	bgeu	r19,r21,8001ca8 <alt_up_pixel_buffer_dma_draw_box+0x228>
 8001cd4:	00001506 	br	8001d2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8001cd8:	9485883a 	add	r2,r18,r18
 8001cdc:	1085883a 	add	r2,r2,r2
 8001ce0:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8001ce4:	8c85383a 	mul	r2,r17,r18
 8001ce8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8001cec:	882b883a 	mov	r21,r17
 8001cf0:	00000b06 	br	8001d20 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 8001cf4:	b023883a 	mov	r17,r22
 8001cf8:	00000606 	br	8001d14 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8001cfc:	8c45883a 	add	r2,r17,r17
 8001d00:	1085883a 	add	r2,r2,r2
 8001d04:	1405883a 	add	r2,r2,r16
 8001d08:	b807883a 	mov	r3,r23
 8001d0c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8001d10:	8c400044 	addi	r17,r17,1
 8001d14:	a47ff92e 	bgeu	r20,r17,8001cfc <alt_up_pixel_buffer_dma_draw_box+0x27c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8001d18:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8001d1c:	ad400044 	addi	r21,r21,1
 8001d20:	9d7ff42e 	bgeu	r19,r21,8001cf4 <alt_up_pixel_buffer_dma_draw_box+0x274>
 8001d24:	00000106 	br	8001d2c <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8001d28:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8001d2c:	e6fff804 	addi	sp,fp,-32
 8001d30:	df000817 	ldw	fp,32(sp)
 8001d34:	ddc00717 	ldw	r23,28(sp)
 8001d38:	dd800617 	ldw	r22,24(sp)
 8001d3c:	dd400517 	ldw	r21,20(sp)
 8001d40:	dd000417 	ldw	r20,16(sp)
 8001d44:	dcc00317 	ldw	r19,12(sp)
 8001d48:	dc800217 	ldw	r18,8(sp)
 8001d4c:	dc400117 	ldw	r17,4(sp)
 8001d50:	dc000017 	ldw	r16,0(sp)
 8001d54:	dec00904 	addi	sp,sp,36
 8001d58:	f800283a 	ret

08001d5c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8001d5c:	defff404 	addi	sp,sp,-48
 8001d60:	df000b15 	stw	fp,44(sp)
 8001d64:	dd800a15 	stw	r22,40(sp)
 8001d68:	dd400915 	stw	r21,36(sp)
 8001d6c:	dd000815 	stw	r20,32(sp)
 8001d70:	dcc00715 	stw	r19,28(sp)
 8001d74:	dc800615 	stw	r18,24(sp)
 8001d78:	dc400515 	stw	r17,20(sp)
 8001d7c:	dc000415 	stw	r16,16(sp)
 8001d80:	df000b04 	addi	fp,sp,44
 8001d84:	e13ff515 	stw	r4,-44(fp)
 8001d88:	e17ff615 	stw	r5,-40(fp)
 8001d8c:	e1bff715 	stw	r6,-36(fp)
 8001d90:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8001d94:	e0bff517 	ldw	r2,-44(fp)
 8001d98:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8001d9c:	e0bff517 	ldw	r2,-44(fp)
 8001da0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8001da4:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 8001da8:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 8001dac:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 8001db0:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8001db4:	9c40032e 	bgeu	r19,r17,8001dc4 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 8001db8:	882d883a 	mov	r22,r17
		l_x = r_x;
 8001dbc:	9823883a 	mov	r17,r19
		r_x = temp;
 8001dc0:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8001dc4:	8c805d2e 	bgeu	r17,r18,8001f3c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 8001dc8:	a4005c2e 	bgeu	r20,r16,8001f3c <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8001dcc:	9c800136 	bltu	r19,r18,8001dd4 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 8001dd0:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001dd4:	e0800217 	ldw	r2,8(fp)
 8001dd8:	10800058 	cmpnei	r2,r2,1
 8001ddc:	1000031e 	bne	r2,zero,8001dec <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 8001de0:	e0bff517 	ldw	r2,-44(fp)
 8001de4:	14000c17 	ldw	r16,48(r2)
 8001de8:	00000206 	br	8001df4 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 8001dec:	e0bff517 	ldw	r2,-44(fp)
 8001df0:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8001df4:	e0bff517 	ldw	r2,-44(fp)
 8001df8:	10800d17 	ldw	r2,52(r2)
 8001dfc:	1000231e 	bne	r2,zero,8001e8c <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8001e00:	e0bff517 	ldw	r2,-44(fp)
 8001e04:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 8001e08:	a484983a 	sll	r2,r20,r18
 8001e0c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001e10:	e0bff517 	ldw	r2,-44(fp)
 8001e14:	10800e17 	ldw	r2,56(r2)
 8001e18:	10800058 	cmpnei	r2,r2,1
 8001e1c:	1000071e 	bne	r2,zero,8001e3c <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 8001e20:	00000406 	br	8001e34 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8001e24:	8c05883a 	add	r2,r17,r16
 8001e28:	a807883a 	mov	r3,r21
 8001e2c:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8001e30:	8c400044 	addi	r17,r17,1
 8001e34:	9c7ffb2e 	bgeu	r19,r17,8001e24 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
 8001e38:	00004106 	br	8001f40 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001e3c:	e0bff517 	ldw	r2,-44(fp)
 8001e40:	10800e17 	ldw	r2,56(r2)
 8001e44:	10800098 	cmpnei	r2,r2,2
 8001e48:	10000e1e 	bne	r2,zero,8001e84 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 8001e4c:	00000506 	br	8001e64 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8001e50:	8c45883a 	add	r2,r17,r17
 8001e54:	1405883a 	add	r2,r2,r16
 8001e58:	a807883a 	mov	r3,r21
 8001e5c:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8001e60:	8c400044 	addi	r17,r17,1
 8001e64:	9c7ffa2e 	bgeu	r19,r17,8001e50 <alt_up_pixel_buffer_dma_draw_hline+0xf4>
 8001e68:	00003506 	br	8001f40 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8001e6c:	8c45883a 	add	r2,r17,r17
 8001e70:	1085883a 	add	r2,r2,r2
 8001e74:	1405883a 	add	r2,r2,r16
 8001e78:	a807883a 	mov	r3,r21
 8001e7c:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8001e80:	8c400044 	addi	r17,r17,1
 8001e84:	9c7ff92e 	bgeu	r19,r17,8001e6c <alt_up_pixel_buffer_dma_draw_hline+0x110>
 8001e88:	00002d06 	br	8001f40 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8001e8c:	e0bff517 	ldw	r2,-44(fp)
 8001e90:	10800e17 	ldw	r2,56(r2)
 8001e94:	10800058 	cmpnei	r2,r2,1
 8001e98:	1000091e 	bne	r2,zero,8001ec0 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 8001e9c:	a485383a 	mul	r2,r20,r18
 8001ea0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8001ea4:	00000406 	br	8001eb8 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8001ea8:	8c05883a 	add	r2,r17,r16
 8001eac:	a807883a 	mov	r3,r21
 8001eb0:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8001eb4:	8c400044 	addi	r17,r17,1
 8001eb8:	9c7ffb2e 	bgeu	r19,r17,8001ea8 <alt_up_pixel_buffer_dma_draw_hline+0x14c>
 8001ebc:	00002006 	br	8001f40 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8001ec0:	e0bff517 	ldw	r2,-44(fp)
 8001ec4:	10800e17 	ldw	r2,56(r2)
 8001ec8:	10800098 	cmpnei	r2,r2,2
 8001ecc:	10000c1e 	bne	r2,zero,8001f00 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 8001ed0:	9485883a 	add	r2,r18,r18
 8001ed4:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 8001ed8:	a485383a 	mul	r2,r20,r18
 8001edc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8001ee0:	00000506 	br	8001ef8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8001ee4:	8c45883a 	add	r2,r17,r17
 8001ee8:	1405883a 	add	r2,r2,r16
 8001eec:	a807883a 	mov	r3,r21
 8001ef0:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8001ef4:	8c400044 	addi	r17,r17,1
 8001ef8:	9c7ffa2e 	bgeu	r19,r17,8001ee4 <alt_up_pixel_buffer_dma_draw_hline+0x188>
 8001efc:	00001006 	br	8001f40 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8001f00:	9485883a 	add	r2,r18,r18
 8001f04:	1085883a 	add	r2,r2,r2
 8001f08:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 8001f0c:	a485383a 	mul	r2,r20,r18
 8001f10:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8001f14:	00000606 	br	8001f30 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8001f18:	8c45883a 	add	r2,r17,r17
 8001f1c:	1085883a 	add	r2,r2,r2
 8001f20:	1405883a 	add	r2,r2,r16
 8001f24:	a807883a 	mov	r3,r21
 8001f28:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8001f2c:	8c400044 	addi	r17,r17,1
 8001f30:	9c7ff92e 	bgeu	r19,r17,8001f18 <alt_up_pixel_buffer_dma_draw_hline+0x1bc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 8001f34:	84a1883a 	add	r16,r16,r18
 8001f38:	00000106 	br	8001f40 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8001f3c:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 8001f40:	e6fff904 	addi	sp,fp,-28
 8001f44:	df000717 	ldw	fp,28(sp)
 8001f48:	dd800617 	ldw	r22,24(sp)
 8001f4c:	dd400517 	ldw	r21,20(sp)
 8001f50:	dd000417 	ldw	r20,16(sp)
 8001f54:	dcc00317 	ldw	r19,12(sp)
 8001f58:	dc800217 	ldw	r18,8(sp)
 8001f5c:	dc400117 	ldw	r17,4(sp)
 8001f60:	dc000017 	ldw	r16,0(sp)
 8001f64:	dec00804 	addi	sp,sp,32
 8001f68:	f800283a 	ret

08001f6c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8001f6c:	defff404 	addi	sp,sp,-48
 8001f70:	df000b15 	stw	fp,44(sp)
 8001f74:	dd800a15 	stw	r22,40(sp)
 8001f78:	dd400915 	stw	r21,36(sp)
 8001f7c:	dd000815 	stw	r20,32(sp)
 8001f80:	dcc00715 	stw	r19,28(sp)
 8001f84:	dc800615 	stw	r18,24(sp)
 8001f88:	dc400515 	stw	r17,20(sp)
 8001f8c:	dc000415 	stw	r16,16(sp)
 8001f90:	df000b04 	addi	fp,sp,44
 8001f94:	e13ff515 	stw	r4,-44(fp)
 8001f98:	e17ff615 	stw	r5,-40(fp)
 8001f9c:	e1bff715 	stw	r6,-36(fp)
 8001fa0:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8001fa4:	e0bff517 	ldw	r2,-44(fp)
 8001fa8:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8001fac:	e0bff517 	ldw	r2,-44(fp)
 8001fb0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8001fb4:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 8001fb8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 8001fbc:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 8001fc0:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8001fc4:	9d00032e 	bgeu	r19,r20,8001fd4 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 8001fc8:	a02b883a 	mov	r21,r20
		t_y = b_y;
 8001fcc:	9829883a 	mov	r20,r19
		b_y = temp;
 8001fd0:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8001fd4:	94406c2e 	bgeu	r18,r17,8002188 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 8001fd8:	a4006b2e 	bgeu	r20,r16,8002188 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8001fdc:	9c000136 	bltu	r19,r16,8001fe4 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 8001fe0:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8001fe4:	e0800217 	ldw	r2,8(fp)
 8001fe8:	10800058 	cmpnei	r2,r2,1
 8001fec:	1000031e 	bne	r2,zero,8001ffc <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 8001ff0:	e0bff517 	ldw	r2,-44(fp)
 8001ff4:	14000c17 	ldw	r16,48(r2)
 8001ff8:	00000206 	br	8002004 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 8001ffc:	e0bff517 	ldw	r2,-44(fp)
 8002000:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8002004:	e0bff517 	ldw	r2,-44(fp)
 8002008:	10800d17 	ldw	r2,52(r2)
 800200c:	1000301e 	bne	r2,zero,80020d0 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8002010:	e0bff517 	ldw	r2,-44(fp)
 8002014:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8002018:	a544983a 	sll	r2,r20,r21
 800201c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8002020:	e0bff517 	ldw	r2,-44(fp)
 8002024:	10800e17 	ldw	r2,56(r2)
 8002028:	10800058 	cmpnei	r2,r2,1
 800202c:	10000b1e 	bne	r2,zero,800205c <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 8002030:	a023883a 	mov	r17,r20
 8002034:	00000706 	br	8002054 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8002038:	9405883a 	add	r2,r18,r16
 800203c:	b007883a 	mov	r3,r22
 8002040:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8002044:	00800044 	movi	r2,1
 8002048:	1544983a 	sll	r2,r2,r21
 800204c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8002050:	8c400044 	addi	r17,r17,1
 8002054:	9c7ff82e 	bgeu	r19,r17,8002038 <alt_up_pixel_buffer_dma_draw_vline+0xcc>
 8002058:	00004c06 	br	800218c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 800205c:	e0bff517 	ldw	r2,-44(fp)
 8002060:	10800e17 	ldw	r2,56(r2)
 8002064:	10800098 	cmpnei	r2,r2,2
 8002068:	10000c1e 	bne	r2,zero,800209c <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 800206c:	a023883a 	mov	r17,r20
 8002070:	00000806 	br	8002094 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8002074:	9485883a 	add	r2,r18,r18
 8002078:	1405883a 	add	r2,r2,r16
 800207c:	b007883a 	mov	r3,r22
 8002080:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8002084:	00800044 	movi	r2,1
 8002088:	1544983a 	sll	r2,r2,r21
 800208c:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8002090:	8c400044 	addi	r17,r17,1
 8002094:	9c7ff72e 	bgeu	r19,r17,8002074 <alt_up_pixel_buffer_dma_draw_vline+0x108>
 8002098:	00003c06 	br	800218c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 800209c:	a023883a 	mov	r17,r20
 80020a0:	00000906 	br	80020c8 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 80020a4:	9485883a 	add	r2,r18,r18
 80020a8:	1085883a 	add	r2,r2,r2
 80020ac:	1405883a 	add	r2,r2,r16
 80020b0:	b007883a 	mov	r3,r22
 80020b4:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80020b8:	00800044 	movi	r2,1
 80020bc:	1544983a 	sll	r2,r2,r21
 80020c0:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80020c4:	8c400044 	addi	r17,r17,1
 80020c8:	9c7ff62e 	bgeu	r19,r17,80020a4 <alt_up_pixel_buffer_dma_draw_vline+0x138>
 80020cc:	00002f06 	br	800218c <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80020d0:	e0bff517 	ldw	r2,-44(fp)
 80020d4:	10800e17 	ldw	r2,56(r2)
 80020d8:	10800058 	cmpnei	r2,r2,1
 80020dc:	10000a1e 	bne	r2,zero,8002108 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 80020e0:	a445383a 	mul	r2,r20,r17
 80020e4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80020e8:	00000506 	br	8002100 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80020ec:	9405883a 	add	r2,r18,r16
 80020f0:	b007883a 	mov	r3,r22
 80020f4:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 80020f8:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80020fc:	a5000044 	addi	r20,r20,1
 8002100:	9d3ffa2e 	bgeu	r19,r20,80020ec <alt_up_pixel_buffer_dma_draw_vline+0x180>
 8002104:	00002106 	br	800218c <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8002108:	e0bff517 	ldw	r2,-44(fp)
 800210c:	10800e17 	ldw	r2,56(r2)
 8002110:	10800098 	cmpnei	r2,r2,2
 8002114:	10000d1e 	bne	r2,zero,800214c <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 8002118:	8c45883a 	add	r2,r17,r17
 800211c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 8002120:	a445383a 	mul	r2,r20,r17
 8002124:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8002128:	00000606 	br	8002144 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 800212c:	9485883a 	add	r2,r18,r18
 8002130:	1405883a 	add	r2,r2,r16
 8002134:	b007883a 	mov	r3,r22
 8002138:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 800213c:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8002140:	a5000044 	addi	r20,r20,1
 8002144:	9d3ff92e 	bgeu	r19,r20,800212c <alt_up_pixel_buffer_dma_draw_vline+0x1c0>
 8002148:	00001006 	br	800218c <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 800214c:	8c45883a 	add	r2,r17,r17
 8002150:	1085883a 	add	r2,r2,r2
 8002154:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 8002158:	a445383a 	mul	r2,r20,r17
 800215c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8002160:	00000706 	br	8002180 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8002164:	9485883a 	add	r2,r18,r18
 8002168:	1085883a 	add	r2,r2,r2
 800216c:	1405883a 	add	r2,r2,r16
 8002170:	b007883a 	mov	r3,r22
 8002174:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8002178:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 800217c:	a5000044 	addi	r20,r20,1
 8002180:	9d3ff82e 	bgeu	r19,r20,8002164 <alt_up_pixel_buffer_dma_draw_vline+0x1f8>
 8002184:	00000106 	br	800218c <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8002188:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 800218c:	e6fff904 	addi	sp,fp,-28
 8002190:	df000717 	ldw	fp,28(sp)
 8002194:	dd800617 	ldw	r22,24(sp)
 8002198:	dd400517 	ldw	r21,20(sp)
 800219c:	dd000417 	ldw	r20,16(sp)
 80021a0:	dcc00317 	ldw	r19,12(sp)
 80021a4:	dc800217 	ldw	r18,8(sp)
 80021a8:	dc400117 	ldw	r17,4(sp)
 80021ac:	dc000017 	ldw	r16,0(sp)
 80021b0:	dec00804 	addi	sp,sp,32
 80021b4:	f800283a 	ret

080021b8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 80021b8:	defff804 	addi	sp,sp,-32
 80021bc:	dfc00715 	stw	ra,28(sp)
 80021c0:	df000615 	stw	fp,24(sp)
 80021c4:	df000604 	addi	fp,sp,24
 80021c8:	e13ffc15 	stw	r4,-16(fp)
 80021cc:	e17ffd15 	stw	r5,-12(fp)
 80021d0:	e1bffe15 	stw	r6,-8(fp)
 80021d4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 80021d8:	e0800417 	ldw	r2,16(fp)
 80021dc:	d8800115 	stw	r2,4(sp)
 80021e0:	e0800317 	ldw	r2,12(fp)
 80021e4:	d8800015 	stw	r2,0(sp)
 80021e8:	e1fffe17 	ldw	r7,-8(fp)
 80021ec:	e1bfff17 	ldw	r6,-4(fp)
 80021f0:	e17ffd17 	ldw	r5,-12(fp)
 80021f4:	e13ffc17 	ldw	r4,-16(fp)
 80021f8:	8001d5c0 	call	8001d5c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 80021fc:	e0800417 	ldw	r2,16(fp)
 8002200:	d8800115 	stw	r2,4(sp)
 8002204:	e0800317 	ldw	r2,12(fp)
 8002208:	d8800015 	stw	r2,0(sp)
 800220c:	e1c00217 	ldw	r7,8(fp)
 8002210:	e1bfff17 	ldw	r6,-4(fp)
 8002214:	e17ffd17 	ldw	r5,-12(fp)
 8002218:	e13ffc17 	ldw	r4,-16(fp)
 800221c:	8001d5c0 	call	8001d5c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8002220:	e0800417 	ldw	r2,16(fp)
 8002224:	d8800115 	stw	r2,4(sp)
 8002228:	e0800317 	ldw	r2,12(fp)
 800222c:	d8800015 	stw	r2,0(sp)
 8002230:	e1c00217 	ldw	r7,8(fp)
 8002234:	e1bffe17 	ldw	r6,-8(fp)
 8002238:	e17ffd17 	ldw	r5,-12(fp)
 800223c:	e13ffc17 	ldw	r4,-16(fp)
 8002240:	8001f6c0 	call	8001f6c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8002244:	e0800417 	ldw	r2,16(fp)
 8002248:	d8800115 	stw	r2,4(sp)
 800224c:	e0800317 	ldw	r2,12(fp)
 8002250:	d8800015 	stw	r2,0(sp)
 8002254:	e1c00217 	ldw	r7,8(fp)
 8002258:	e1bffe17 	ldw	r6,-8(fp)
 800225c:	e17fff17 	ldw	r5,-4(fp)
 8002260:	e13ffc17 	ldw	r4,-16(fp)
 8002264:	8001f6c0 	call	8001f6c <alt_up_pixel_buffer_dma_draw_vline>
}
 8002268:	0001883a 	nop
 800226c:	e037883a 	mov	sp,fp
 8002270:	dfc00117 	ldw	ra,4(sp)
 8002274:	df000017 	ldw	fp,0(sp)
 8002278:	dec00204 	addi	sp,sp,8
 800227c:	f800283a 	ret

08002280 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8002280:	deffff04 	addi	sp,sp,-4
 8002284:	df000015 	stw	fp,0(sp)
 8002288:	d839883a 	mov	fp,sp
 800228c:	2005883a 	mov	r2,r4
 8002290:	3007883a 	mov	r3,r6
 8002294:	3809883a 	mov	r4,r7
 8002298:	e1800117 	ldw	r6,4(fp)
 800229c:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 80022a0:	3800051e 	bne	r7,zero,80022b8 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 80022a4:	2909383a 	mul	r4,r5,r4
 80022a8:	20c7883a 	add	r3,r4,r3
 80022ac:	1885883a 	add	r2,r3,r2
 80022b0:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 80022b4:	00000e06 	br	80022f0 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 80022b8:	39c00058 	cmpnei	r7,r7,1
 80022bc:	3800061e 	bne	r7,zero,80022d8 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 80022c0:	2909383a 	mul	r4,r5,r4
 80022c4:	20c7883a 	add	r3,r4,r3
 80022c8:	18c7883a 	add	r3,r3,r3
 80022cc:	1885883a 	add	r2,r3,r2
 80022d0:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 80022d4:	00000606 	br	80022f0 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80022d8:	2909383a 	mul	r4,r5,r4
 80022dc:	20c7883a 	add	r3,r4,r3
 80022e0:	18c7883a 	add	r3,r3,r3
 80022e4:	18c7883a 	add	r3,r3,r3
 80022e8:	1885883a 	add	r2,r3,r2
 80022ec:	11800035 	stwio	r6,0(r2)
}
 80022f0:	0001883a 	nop
 80022f4:	e037883a 	mov	sp,fp
 80022f8:	df000017 	ldw	fp,0(sp)
 80022fc:	dec00104 	addi	sp,sp,4
 8002300:	f800283a 	ret

08002304 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8002304:	deffeb04 	addi	sp,sp,-84
 8002308:	dfc01415 	stw	ra,80(sp)
 800230c:	df001315 	stw	fp,76(sp)
 8002310:	ddc01215 	stw	r23,72(sp)
 8002314:	dd801115 	stw	r22,68(sp)
 8002318:	dd401015 	stw	r21,64(sp)
 800231c:	dd000f15 	stw	r20,60(sp)
 8002320:	dcc00e15 	stw	r19,56(sp)
 8002324:	dc800d15 	stw	r18,52(sp)
 8002328:	dc400c15 	stw	r17,48(sp)
 800232c:	dc000b15 	stw	r16,44(sp)
 8002330:	df001304 	addi	fp,sp,76
 8002334:	e13fef15 	stw	r4,-68(fp)
 8002338:	e17ff015 	stw	r5,-64(fp)
 800233c:	e1bff115 	stw	r6,-60(fp)
 8002340:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8002344:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8002348:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 800234c:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 8002350:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8002354:	a4c5c83a 	sub	r2,r20,r19
 8002358:	1000010e 	bge	r2,zero,8002360 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 800235c:	0085c83a 	sub	r2,zero,r2
 8002360:	1007883a 	mov	r3,r2
 8002364:	9445c83a 	sub	r2,r18,r17
 8002368:	1000010e 	bge	r2,zero,8002370 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 800236c:	0085c83a 	sub	r2,zero,r2
 8002370:	10c4803a 	cmplt	r2,r2,r3
 8002374:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8002378:	e0bfef17 	ldw	r2,-68(fp)
 800237c:	10800e17 	ldw	r2,56(r2)
 8002380:	10800060 	cmpeqi	r2,r2,1
 8002384:	1000081e 	bne	r2,zero,80023a8 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8002388:	e0bfef17 	ldw	r2,-68(fp)
 800238c:	10800e17 	ldw	r2,56(r2)
 8002390:	10800098 	cmpnei	r2,r2,2
 8002394:	1000021e 	bne	r2,zero,80023a0 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8002398:	00800044 	movi	r2,1
 800239c:	00000306 	br	80023ac <alt_up_pixel_buffer_dma_draw_line+0xa8>
 80023a0:	00800084 	movi	r2,2
 80023a4:	00000106 	br	80023ac <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 80023a8:	0005883a 	mov	r2,zero
 80023ac:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 80023b0:	e0800317 	ldw	r2,12(fp)
 80023b4:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 80023b8:	e0bfef17 	ldw	r2,-68(fp)
 80023bc:	10800d17 	ldw	r2,52(r2)
 80023c0:	1000071e 	bne	r2,zero,80023e0 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 80023c4:	e0bfef17 	ldw	r2,-68(fp)
 80023c8:	10801317 	ldw	r2,76(r2)
 80023cc:	e0fff417 	ldw	r3,-48(fp)
 80023d0:	10c5c83a 	sub	r2,r2,r3
 80023d4:	00c00044 	movi	r3,1
 80023d8:	1884983a 	sll	r2,r3,r2
 80023dc:	00000206 	br	80023e8 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 80023e0:	e0bfef17 	ldw	r2,-68(fp)
 80023e4:	10800f17 	ldw	r2,60(r2)
 80023e8:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 80023ec:	e0800417 	ldw	r2,16(fp)
 80023f0:	10800058 	cmpnei	r2,r2,1
 80023f4:	1000031e 	bne	r2,zero,8002404 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 80023f8:	e0bfef17 	ldw	r2,-68(fp)
 80023fc:	15c00c17 	ldw	r23,48(r2)
 8002400:	00000206 	br	800240c <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8002404:	e0bfef17 	ldw	r2,-68(fp)
 8002408:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 800240c:	e0bff307 	ldb	r2,-52(fp)
 8002410:	0080060e 	bge	zero,r2,800242c <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8002414:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8002418:	9823883a 	mov	r17,r19
		y_0 = error;
 800241c:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 8002420:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8002424:	a025883a 	mov	r18,r20
		y_1 = error;
 8002428:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 800242c:	9440060e 	bge	r18,r17,8002448 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 8002430:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8002434:	9023883a 	mov	r17,r18
		x_1 = error;
 8002438:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 800243c:	9821883a 	mov	r16,r19
		y_0 = y_1;
 8002440:	a027883a 	mov	r19,r20
		y_1 = error;
 8002444:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8002448:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 800244c:	a4c5c83a 	sub	r2,r20,r19
 8002450:	1000010e 	bge	r2,zero,8002458 <alt_up_pixel_buffer_dma_draw_line+0x154>
 8002454:	0085c83a 	sub	r2,zero,r2
 8002458:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 800245c:	a804d7fa 	srli	r2,r21,31
 8002460:	1545883a 	add	r2,r2,r21
 8002464:	1005d07a 	srai	r2,r2,1
 8002468:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 800246c:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8002470:	9d00020e 	bge	r19,r20,800247c <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8002474:	04c00044 	movi	r19,1
 8002478:	00000106 	br	8002480 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 800247c:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8002480:	e0bff307 	ldb	r2,-52(fp)
 8002484:	10800058 	cmpnei	r2,r2,1
 8002488:	1000211e 	bne	r2,zero,8002510 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 800248c:	00000f06 	br	80024cc <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8002490:	e0bff417 	ldw	r2,-48(fp)
 8002494:	d8800115 	stw	r2,4(sp)
 8002498:	e0bff517 	ldw	r2,-44(fp)
 800249c:	d8800015 	stw	r2,0(sp)
 80024a0:	880f883a 	mov	r7,r17
 80024a4:	b00d883a 	mov	r6,r22
 80024a8:	e17ff617 	ldw	r5,-40(fp)
 80024ac:	b809883a 	mov	r4,r23
 80024b0:	80022800 	call	8002280 <helper_plot_pixel>
			error = error + deltay;
 80024b4:	e0bff717 	ldw	r2,-36(fp)
 80024b8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 80024bc:	0400020e 	bge	zero,r16,80024c8 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 80024c0:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 80024c4:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 80024c8:	8c400044 	addi	r17,r17,1
 80024cc:	947ff00e 	bge	r18,r17,8002490 <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 80024d0:	00001006 	br	8002514 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 80024d4:	e0bff417 	ldw	r2,-48(fp)
 80024d8:	d8800115 	stw	r2,4(sp)
 80024dc:	e0bff517 	ldw	r2,-44(fp)
 80024e0:	d8800015 	stw	r2,0(sp)
 80024e4:	b00f883a 	mov	r7,r22
 80024e8:	880d883a 	mov	r6,r17
 80024ec:	e17ff617 	ldw	r5,-40(fp)
 80024f0:	b809883a 	mov	r4,r23
 80024f4:	80022800 	call	8002280 <helper_plot_pixel>
			error = error + deltay;
 80024f8:	e0bff717 	ldw	r2,-36(fp)
 80024fc:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8002500:	0400020e 	bge	zero,r16,800250c <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8002504:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8002508:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 800250c:	8c400044 	addi	r17,r17,1
 8002510:	947ff00e 	bge	r18,r17,80024d4 <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8002514:	0001883a 	nop
 8002518:	e6fff804 	addi	sp,fp,-32
 800251c:	dfc00917 	ldw	ra,36(sp)
 8002520:	df000817 	ldw	fp,32(sp)
 8002524:	ddc00717 	ldw	r23,28(sp)
 8002528:	dd800617 	ldw	r22,24(sp)
 800252c:	dd400517 	ldw	r21,20(sp)
 8002530:	dd000417 	ldw	r20,16(sp)
 8002534:	dcc00317 	ldw	r19,12(sp)
 8002538:	dc800217 	ldw	r18,8(sp)
 800253c:	dc400117 	ldw	r17,4(sp)
 8002540:	dc000017 	ldw	r16,0(sp)
 8002544:	dec00a04 	addi	sp,sp,40
 8002548:	f800283a 	ret

0800254c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800254c:	defff504 	addi	sp,sp,-44
 8002550:	df000a15 	stw	fp,40(sp)
 8002554:	df000a04 	addi	fp,sp,40
 8002558:	e13ffc15 	stw	r4,-16(fp)
 800255c:	e17ffd15 	stw	r5,-12(fp)
 8002560:	e1bffe15 	stw	r6,-8(fp)
 8002564:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8002568:	e03ff615 	stw	zero,-40(fp)
 800256c:	d0a5dd17 	ldw	r2,-26764(gp)
  
  if (alt_ticks_per_second ())
 8002570:	10003c26 	beq	r2,zero,8002664 <alt_alarm_start+0x118>
  {
    if (alarm)
 8002574:	e0bffc17 	ldw	r2,-16(fp)
 8002578:	10003826 	beq	r2,zero,800265c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800257c:	e0bffc17 	ldw	r2,-16(fp)
 8002580:	e0fffe17 	ldw	r3,-8(fp)
 8002584:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8002588:	e0bffc17 	ldw	r2,-16(fp)
 800258c:	e0ffff17 	ldw	r3,-4(fp)
 8002590:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002594:	0005303a 	rdctl	r2,status
 8002598:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800259c:	e0fff917 	ldw	r3,-28(fp)
 80025a0:	00bfff84 	movi	r2,-2
 80025a4:	1884703a 	and	r2,r3,r2
 80025a8:	1001703a 	wrctl	status,r2
  
  return context;
 80025ac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80025b0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80025b4:	d0a5de17 	ldw	r2,-26760(gp)
      
      current_nticks = alt_nticks();
 80025b8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80025bc:	e0fffd17 	ldw	r3,-12(fp)
 80025c0:	e0bff617 	ldw	r2,-40(fp)
 80025c4:	1885883a 	add	r2,r3,r2
 80025c8:	10c00044 	addi	r3,r2,1
 80025cc:	e0bffc17 	ldw	r2,-16(fp)
 80025d0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80025d4:	e0bffc17 	ldw	r2,-16(fp)
 80025d8:	10c00217 	ldw	r3,8(r2)
 80025dc:	e0bff617 	ldw	r2,-40(fp)
 80025e0:	1880042e 	bgeu	r3,r2,80025f4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80025e4:	e0bffc17 	ldw	r2,-16(fp)
 80025e8:	00c00044 	movi	r3,1
 80025ec:	10c00405 	stb	r3,16(r2)
 80025f0:	00000206 	br	80025fc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80025f4:	e0bffc17 	ldw	r2,-16(fp)
 80025f8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80025fc:	e0bffc17 	ldw	r2,-16(fp)
 8002600:	d0e00704 	addi	r3,gp,-32740
 8002604:	e0fffa15 	stw	r3,-24(fp)
 8002608:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800260c:	e0bffb17 	ldw	r2,-20(fp)
 8002610:	e0fffa17 	ldw	r3,-24(fp)
 8002614:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8002618:	e0bffa17 	ldw	r2,-24(fp)
 800261c:	10c00017 	ldw	r3,0(r2)
 8002620:	e0bffb17 	ldw	r2,-20(fp)
 8002624:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8002628:	e0bffa17 	ldw	r2,-24(fp)
 800262c:	10800017 	ldw	r2,0(r2)
 8002630:	e0fffb17 	ldw	r3,-20(fp)
 8002634:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8002638:	e0bffa17 	ldw	r2,-24(fp)
 800263c:	e0fffb17 	ldw	r3,-20(fp)
 8002640:	10c00015 	stw	r3,0(r2)
 8002644:	e0bff817 	ldw	r2,-32(fp)
 8002648:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800264c:	e0bff717 	ldw	r2,-36(fp)
 8002650:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8002654:	0005883a 	mov	r2,zero
 8002658:	00000306 	br	8002668 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800265c:	00bffa84 	movi	r2,-22
 8002660:	00000106 	br	8002668 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8002664:	00bfde84 	movi	r2,-134
  }
}
 8002668:	e037883a 	mov	sp,fp
 800266c:	df000017 	ldw	fp,0(sp)
 8002670:	dec00104 	addi	sp,sp,4
 8002674:	f800283a 	ret

08002678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002678:	defffe04 	addi	sp,sp,-8
 800267c:	dfc00115 	stw	ra,4(sp)
 8002680:	df000015 	stw	fp,0(sp)
 8002684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002688:	d0a00517 	ldw	r2,-32748(gp)
 800268c:	10000326 	beq	r2,zero,800269c <alt_get_errno+0x24>
 8002690:	d0a00517 	ldw	r2,-32748(gp)
 8002694:	103ee83a 	callr	r2
 8002698:	00000106 	br	80026a0 <alt_get_errno+0x28>
 800269c:	d0a5e004 	addi	r2,gp,-26752
}
 80026a0:	e037883a 	mov	sp,fp
 80026a4:	dfc00117 	ldw	ra,4(sp)
 80026a8:	df000017 	ldw	fp,0(sp)
 80026ac:	dec00204 	addi	sp,sp,8
 80026b0:	f800283a 	ret

080026b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80026b4:	defffb04 	addi	sp,sp,-20
 80026b8:	dfc00415 	stw	ra,16(sp)
 80026bc:	df000315 	stw	fp,12(sp)
 80026c0:	df000304 	addi	fp,sp,12
 80026c4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80026c8:	e0bfff17 	ldw	r2,-4(fp)
 80026cc:	10000616 	blt	r2,zero,80026e8 <close+0x34>
 80026d0:	e0bfff17 	ldw	r2,-4(fp)
 80026d4:	10c00324 	muli	r3,r2,12
 80026d8:	00820134 	movhi	r2,2052
 80026dc:	10b33a04 	addi	r2,r2,-13080
 80026e0:	1885883a 	add	r2,r3,r2
 80026e4:	00000106 	br	80026ec <close+0x38>
 80026e8:	0005883a 	mov	r2,zero
 80026ec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80026f0:	e0bffd17 	ldw	r2,-12(fp)
 80026f4:	10001926 	beq	r2,zero,800275c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80026f8:	e0bffd17 	ldw	r2,-12(fp)
 80026fc:	10800017 	ldw	r2,0(r2)
 8002700:	10800417 	ldw	r2,16(r2)
 8002704:	10000626 	beq	r2,zero,8002720 <close+0x6c>
 8002708:	e0bffd17 	ldw	r2,-12(fp)
 800270c:	10800017 	ldw	r2,0(r2)
 8002710:	10800417 	ldw	r2,16(r2)
 8002714:	e13ffd17 	ldw	r4,-12(fp)
 8002718:	103ee83a 	callr	r2
 800271c:	00000106 	br	8002724 <close+0x70>
 8002720:	0005883a 	mov	r2,zero
 8002724:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8002728:	e13fff17 	ldw	r4,-4(fp)
 800272c:	8002cfc0 	call	8002cfc <alt_release_fd>
    if (rval < 0)
 8002730:	e0bffe17 	ldw	r2,-8(fp)
 8002734:	1000070e 	bge	r2,zero,8002754 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8002738:	80026780 	call	8002678 <alt_get_errno>
 800273c:	1007883a 	mov	r3,r2
 8002740:	e0bffe17 	ldw	r2,-8(fp)
 8002744:	0085c83a 	sub	r2,zero,r2
 8002748:	18800015 	stw	r2,0(r3)
      return -1;
 800274c:	00bfffc4 	movi	r2,-1
 8002750:	00000706 	br	8002770 <close+0xbc>
    }
    return 0;
 8002754:	0005883a 	mov	r2,zero
 8002758:	00000506 	br	8002770 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800275c:	80026780 	call	8002678 <alt_get_errno>
 8002760:	1007883a 	mov	r3,r2
 8002764:	00801444 	movi	r2,81
 8002768:	18800015 	stw	r2,0(r3)
    return -1;
 800276c:	00bfffc4 	movi	r2,-1
  }
}
 8002770:	e037883a 	mov	sp,fp
 8002774:	dfc00117 	ldw	ra,4(sp)
 8002778:	df000017 	ldw	fp,0(sp)
 800277c:	dec00204 	addi	sp,sp,8
 8002780:	f800283a 	ret

08002784 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8002784:	defffe04 	addi	sp,sp,-8
 8002788:	df000115 	stw	fp,4(sp)
 800278c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8002790:	e03fff15 	stw	zero,-4(fp)
 8002794:	00000506 	br	80027ac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8002798:	e0bfff17 	ldw	r2,-4(fp)
 800279c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 80027a0:	e0bfff17 	ldw	r2,-4(fp)
 80027a4:	10800804 	addi	r2,r2,32
 80027a8:	e0bfff15 	stw	r2,-4(fp)
 80027ac:	e0bfff17 	ldw	r2,-4(fp)
 80027b0:	10820030 	cmpltui	r2,r2,2048
 80027b4:	103ff81e 	bne	r2,zero,8002798 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80027b8:	0001883a 	nop
 80027bc:	e037883a 	mov	sp,fp
 80027c0:	df000017 	ldw	fp,0(sp)
 80027c4:	dec00104 	addi	sp,sp,4
 80027c8:	f800283a 	ret

080027cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80027cc:	defffc04 	addi	sp,sp,-16
 80027d0:	df000315 	stw	fp,12(sp)
 80027d4:	df000304 	addi	fp,sp,12
 80027d8:	e13ffd15 	stw	r4,-12(fp)
 80027dc:	e17ffe15 	stw	r5,-8(fp)
 80027e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80027e4:	e0bfff17 	ldw	r2,-4(fp)
}
 80027e8:	e037883a 	mov	sp,fp
 80027ec:	df000017 	ldw	fp,0(sp)
 80027f0:	dec00104 	addi	sp,sp,4
 80027f4:	f800283a 	ret

080027f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80027f8:	defffe04 	addi	sp,sp,-8
 80027fc:	dfc00115 	stw	ra,4(sp)
 8002800:	df000015 	stw	fp,0(sp)
 8002804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002808:	d0a00517 	ldw	r2,-32748(gp)
 800280c:	10000326 	beq	r2,zero,800281c <alt_get_errno+0x24>
 8002810:	d0a00517 	ldw	r2,-32748(gp)
 8002814:	103ee83a 	callr	r2
 8002818:	00000106 	br	8002820 <alt_get_errno+0x28>
 800281c:	d0a5e004 	addi	r2,gp,-26752
}
 8002820:	e037883a 	mov	sp,fp
 8002824:	dfc00117 	ldw	ra,4(sp)
 8002828:	df000017 	ldw	fp,0(sp)
 800282c:	dec00204 	addi	sp,sp,8
 8002830:	f800283a 	ret

08002834 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8002834:	defffa04 	addi	sp,sp,-24
 8002838:	dfc00515 	stw	ra,20(sp)
 800283c:	df000415 	stw	fp,16(sp)
 8002840:	df000404 	addi	fp,sp,16
 8002844:	e13ffe15 	stw	r4,-8(fp)
 8002848:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800284c:	e0bffe17 	ldw	r2,-8(fp)
 8002850:	10000326 	beq	r2,zero,8002860 <alt_dev_llist_insert+0x2c>
 8002854:	e0bffe17 	ldw	r2,-8(fp)
 8002858:	10800217 	ldw	r2,8(r2)
 800285c:	1000061e 	bne	r2,zero,8002878 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8002860:	80027f80 	call	80027f8 <alt_get_errno>
 8002864:	1007883a 	mov	r3,r2
 8002868:	00800584 	movi	r2,22
 800286c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8002870:	00bffa84 	movi	r2,-22
 8002874:	00001306 	br	80028c4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8002878:	e0bffe17 	ldw	r2,-8(fp)
 800287c:	e0ffff17 	ldw	r3,-4(fp)
 8002880:	e0fffc15 	stw	r3,-16(fp)
 8002884:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8002888:	e0bffd17 	ldw	r2,-12(fp)
 800288c:	e0fffc17 	ldw	r3,-16(fp)
 8002890:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8002894:	e0bffc17 	ldw	r2,-16(fp)
 8002898:	10c00017 	ldw	r3,0(r2)
 800289c:	e0bffd17 	ldw	r2,-12(fp)
 80028a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80028a4:	e0bffc17 	ldw	r2,-16(fp)
 80028a8:	10800017 	ldw	r2,0(r2)
 80028ac:	e0fffd17 	ldw	r3,-12(fp)
 80028b0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80028b4:	e0bffc17 	ldw	r2,-16(fp)
 80028b8:	e0fffd17 	ldw	r3,-12(fp)
 80028bc:	10c00015 	stw	r3,0(r2)

  return 0;  
 80028c0:	0005883a 	mov	r2,zero
}
 80028c4:	e037883a 	mov	sp,fp
 80028c8:	dfc00117 	ldw	ra,4(sp)
 80028cc:	df000017 	ldw	fp,0(sp)
 80028d0:	dec00204 	addi	sp,sp,8
 80028d4:	f800283a 	ret

080028d8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80028d8:	defffd04 	addi	sp,sp,-12
 80028dc:	dfc00215 	stw	ra,8(sp)
 80028e0:	df000115 	stw	fp,4(sp)
 80028e4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80028e8:	00820034 	movhi	r2,2048
 80028ec:	108da804 	addi	r2,r2,13984
 80028f0:	e0bfff15 	stw	r2,-4(fp)
 80028f4:	00000606 	br	8002910 <_do_ctors+0x38>
        (*ctor) (); 
 80028f8:	e0bfff17 	ldw	r2,-4(fp)
 80028fc:	10800017 	ldw	r2,0(r2)
 8002900:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8002904:	e0bfff17 	ldw	r2,-4(fp)
 8002908:	10bfff04 	addi	r2,r2,-4
 800290c:	e0bfff15 	stw	r2,-4(fp)
 8002910:	e0ffff17 	ldw	r3,-4(fp)
 8002914:	00820034 	movhi	r2,2048
 8002918:	108da904 	addi	r2,r2,13988
 800291c:	18bff62e 	bgeu	r3,r2,80028f8 <_do_ctors+0x20>
        (*ctor) (); 
}
 8002920:	0001883a 	nop
 8002924:	e037883a 	mov	sp,fp
 8002928:	dfc00117 	ldw	ra,4(sp)
 800292c:	df000017 	ldw	fp,0(sp)
 8002930:	dec00204 	addi	sp,sp,8
 8002934:	f800283a 	ret

08002938 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8002938:	defffd04 	addi	sp,sp,-12
 800293c:	dfc00215 	stw	ra,8(sp)
 8002940:	df000115 	stw	fp,4(sp)
 8002944:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8002948:	00820034 	movhi	r2,2048
 800294c:	108da804 	addi	r2,r2,13984
 8002950:	e0bfff15 	stw	r2,-4(fp)
 8002954:	00000606 	br	8002970 <_do_dtors+0x38>
        (*dtor) (); 
 8002958:	e0bfff17 	ldw	r2,-4(fp)
 800295c:	10800017 	ldw	r2,0(r2)
 8002960:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8002964:	e0bfff17 	ldw	r2,-4(fp)
 8002968:	10bfff04 	addi	r2,r2,-4
 800296c:	e0bfff15 	stw	r2,-4(fp)
 8002970:	e0ffff17 	ldw	r3,-4(fp)
 8002974:	00820034 	movhi	r2,2048
 8002978:	108da904 	addi	r2,r2,13988
 800297c:	18bff62e 	bgeu	r3,r2,8002958 <_do_dtors+0x20>
        (*dtor) (); 
}
 8002980:	0001883a 	nop
 8002984:	e037883a 	mov	sp,fp
 8002988:	dfc00117 	ldw	ra,4(sp)
 800298c:	df000017 	ldw	fp,0(sp)
 8002990:	dec00204 	addi	sp,sp,8
 8002994:	f800283a 	ret

08002998 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8002998:	defffa04 	addi	sp,sp,-24
 800299c:	dfc00515 	stw	ra,20(sp)
 80029a0:	df000415 	stw	fp,16(sp)
 80029a4:	df000404 	addi	fp,sp,16
 80029a8:	e13ffe15 	stw	r4,-8(fp)
 80029ac:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80029b0:	e0bfff17 	ldw	r2,-4(fp)
 80029b4:	10800017 	ldw	r2,0(r2)
 80029b8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80029bc:	e13ffe17 	ldw	r4,-8(fp)
 80029c0:	80033400 	call	8003340 <strlen>
 80029c4:	10800044 	addi	r2,r2,1
 80029c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80029cc:	00000d06 	br	8002a04 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80029d0:	e0bffc17 	ldw	r2,-16(fp)
 80029d4:	10800217 	ldw	r2,8(r2)
 80029d8:	e0fffd17 	ldw	r3,-12(fp)
 80029dc:	180d883a 	mov	r6,r3
 80029e0:	e17ffe17 	ldw	r5,-8(fp)
 80029e4:	1009883a 	mov	r4,r2
 80029e8:	80030a00 	call	80030a0 <memcmp>
 80029ec:	1000021e 	bne	r2,zero,80029f8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80029f0:	e0bffc17 	ldw	r2,-16(fp)
 80029f4:	00000706 	br	8002a14 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80029f8:	e0bffc17 	ldw	r2,-16(fp)
 80029fc:	10800017 	ldw	r2,0(r2)
 8002a00:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8002a04:	e0fffc17 	ldw	r3,-16(fp)
 8002a08:	e0bfff17 	ldw	r2,-4(fp)
 8002a0c:	18bff01e 	bne	r3,r2,80029d0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8002a10:	0005883a 	mov	r2,zero
}
 8002a14:	e037883a 	mov	sp,fp
 8002a18:	dfc00117 	ldw	ra,4(sp)
 8002a1c:	df000017 	ldw	fp,0(sp)
 8002a20:	dec00204 	addi	sp,sp,8
 8002a24:	f800283a 	ret

08002a28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8002a28:	defffe04 	addi	sp,sp,-8
 8002a2c:	dfc00115 	stw	ra,4(sp)
 8002a30:	df000015 	stw	fp,0(sp)
 8002a34:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8002a38:	01440004 	movi	r5,4096
 8002a3c:	0009883a 	mov	r4,zero
 8002a40:	8002f280 	call	8002f28 <alt_icache_flush>
#endif
}
 8002a44:	0001883a 	nop
 8002a48:	e037883a 	mov	sp,fp
 8002a4c:	dfc00117 	ldw	ra,4(sp)
 8002a50:	df000017 	ldw	fp,0(sp)
 8002a54:	dec00204 	addi	sp,sp,8
 8002a58:	f800283a 	ret

08002a5c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8002a5c:	defff904 	addi	sp,sp,-28
 8002a60:	dfc00615 	stw	ra,24(sp)
 8002a64:	df000515 	stw	fp,20(sp)
 8002a68:	df000504 	addi	fp,sp,20
 8002a6c:	e13ffc15 	stw	r4,-16(fp)
 8002a70:	e17ffd15 	stw	r5,-12(fp)
 8002a74:	e1bffe15 	stw	r6,-8(fp)
 8002a78:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8002a7c:	e0800217 	ldw	r2,8(fp)
 8002a80:	d8800015 	stw	r2,0(sp)
 8002a84:	e1ffff17 	ldw	r7,-4(fp)
 8002a88:	e1bffe17 	ldw	r6,-8(fp)
 8002a8c:	e17ffd17 	ldw	r5,-12(fp)
 8002a90:	e13ffc17 	ldw	r4,-16(fp)
 8002a94:	8002c0c0 	call	8002c0c <alt_iic_isr_register>
}  
 8002a98:	e037883a 	mov	sp,fp
 8002a9c:	dfc00117 	ldw	ra,4(sp)
 8002aa0:	df000017 	ldw	fp,0(sp)
 8002aa4:	dec00204 	addi	sp,sp,8
 8002aa8:	f800283a 	ret

08002aac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8002aac:	defff904 	addi	sp,sp,-28
 8002ab0:	df000615 	stw	fp,24(sp)
 8002ab4:	df000604 	addi	fp,sp,24
 8002ab8:	e13ffe15 	stw	r4,-8(fp)
 8002abc:	e17fff15 	stw	r5,-4(fp)
 8002ac0:	e0bfff17 	ldw	r2,-4(fp)
 8002ac4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002ac8:	0005303a 	rdctl	r2,status
 8002acc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002ad0:	e0fffb17 	ldw	r3,-20(fp)
 8002ad4:	00bfff84 	movi	r2,-2
 8002ad8:	1884703a 	and	r2,r3,r2
 8002adc:	1001703a 	wrctl	status,r2
  
  return context;
 8002ae0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8002ae4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8002ae8:	00c00044 	movi	r3,1
 8002aec:	e0bffa17 	ldw	r2,-24(fp)
 8002af0:	1884983a 	sll	r2,r3,r2
 8002af4:	1007883a 	mov	r3,r2
 8002af8:	d0a5dc17 	ldw	r2,-26768(gp)
 8002afc:	1884b03a 	or	r2,r3,r2
 8002b00:	d0a5dc15 	stw	r2,-26768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8002b04:	d0a5dc17 	ldw	r2,-26768(gp)
 8002b08:	100170fa 	wrctl	ienable,r2
 8002b0c:	e0bffc17 	ldw	r2,-16(fp)
 8002b10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002b14:	e0bffd17 	ldw	r2,-12(fp)
 8002b18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8002b1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8002b20:	0001883a 	nop
}
 8002b24:	e037883a 	mov	sp,fp
 8002b28:	df000017 	ldw	fp,0(sp)
 8002b2c:	dec00104 	addi	sp,sp,4
 8002b30:	f800283a 	ret

08002b34 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8002b34:	defff904 	addi	sp,sp,-28
 8002b38:	df000615 	stw	fp,24(sp)
 8002b3c:	df000604 	addi	fp,sp,24
 8002b40:	e13ffe15 	stw	r4,-8(fp)
 8002b44:	e17fff15 	stw	r5,-4(fp)
 8002b48:	e0bfff17 	ldw	r2,-4(fp)
 8002b4c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002b50:	0005303a 	rdctl	r2,status
 8002b54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002b58:	e0fffb17 	ldw	r3,-20(fp)
 8002b5c:	00bfff84 	movi	r2,-2
 8002b60:	1884703a 	and	r2,r3,r2
 8002b64:	1001703a 	wrctl	status,r2
  
  return context;
 8002b68:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8002b6c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8002b70:	00c00044 	movi	r3,1
 8002b74:	e0bffa17 	ldw	r2,-24(fp)
 8002b78:	1884983a 	sll	r2,r3,r2
 8002b7c:	0084303a 	nor	r2,zero,r2
 8002b80:	1007883a 	mov	r3,r2
 8002b84:	d0a5dc17 	ldw	r2,-26768(gp)
 8002b88:	1884703a 	and	r2,r3,r2
 8002b8c:	d0a5dc15 	stw	r2,-26768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8002b90:	d0a5dc17 	ldw	r2,-26768(gp)
 8002b94:	100170fa 	wrctl	ienable,r2
 8002b98:	e0bffc17 	ldw	r2,-16(fp)
 8002b9c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002ba0:	e0bffd17 	ldw	r2,-12(fp)
 8002ba4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8002ba8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8002bac:	0001883a 	nop
}
 8002bb0:	e037883a 	mov	sp,fp
 8002bb4:	df000017 	ldw	fp,0(sp)
 8002bb8:	dec00104 	addi	sp,sp,4
 8002bbc:	f800283a 	ret

08002bc0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8002bc0:	defffc04 	addi	sp,sp,-16
 8002bc4:	df000315 	stw	fp,12(sp)
 8002bc8:	df000304 	addi	fp,sp,12
 8002bcc:	e13ffe15 	stw	r4,-8(fp)
 8002bd0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8002bd4:	000530fa 	rdctl	r2,ienable
 8002bd8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8002bdc:	00c00044 	movi	r3,1
 8002be0:	e0bfff17 	ldw	r2,-4(fp)
 8002be4:	1884983a 	sll	r2,r3,r2
 8002be8:	1007883a 	mov	r3,r2
 8002bec:	e0bffd17 	ldw	r2,-12(fp)
 8002bf0:	1884703a 	and	r2,r3,r2
 8002bf4:	1004c03a 	cmpne	r2,r2,zero
 8002bf8:	10803fcc 	andi	r2,r2,255
}
 8002bfc:	e037883a 	mov	sp,fp
 8002c00:	df000017 	ldw	fp,0(sp)
 8002c04:	dec00104 	addi	sp,sp,4
 8002c08:	f800283a 	ret

08002c0c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8002c0c:	defff504 	addi	sp,sp,-44
 8002c10:	dfc00a15 	stw	ra,40(sp)
 8002c14:	df000915 	stw	fp,36(sp)
 8002c18:	df000904 	addi	fp,sp,36
 8002c1c:	e13ffc15 	stw	r4,-16(fp)
 8002c20:	e17ffd15 	stw	r5,-12(fp)
 8002c24:	e1bffe15 	stw	r6,-8(fp)
 8002c28:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8002c2c:	00bffa84 	movi	r2,-22
 8002c30:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8002c34:	e0bffd17 	ldw	r2,-12(fp)
 8002c38:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8002c3c:	e0bff817 	ldw	r2,-32(fp)
 8002c40:	10800808 	cmpgei	r2,r2,32
 8002c44:	1000271e 	bne	r2,zero,8002ce4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002c48:	0005303a 	rdctl	r2,status
 8002c4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002c50:	e0fffb17 	ldw	r3,-20(fp)
 8002c54:	00bfff84 	movi	r2,-2
 8002c58:	1884703a 	and	r2,r3,r2
 8002c5c:	1001703a 	wrctl	status,r2
  
  return context;
 8002c60:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8002c64:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8002c68:	00820134 	movhi	r2,2052
 8002c6c:	10ba8404 	addi	r2,r2,-5616
 8002c70:	e0fff817 	ldw	r3,-32(fp)
 8002c74:	180690fa 	slli	r3,r3,3
 8002c78:	10c5883a 	add	r2,r2,r3
 8002c7c:	e0fffe17 	ldw	r3,-8(fp)
 8002c80:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8002c84:	00820134 	movhi	r2,2052
 8002c88:	10ba8404 	addi	r2,r2,-5616
 8002c8c:	e0fff817 	ldw	r3,-32(fp)
 8002c90:	180690fa 	slli	r3,r3,3
 8002c94:	10c5883a 	add	r2,r2,r3
 8002c98:	10800104 	addi	r2,r2,4
 8002c9c:	e0ffff17 	ldw	r3,-4(fp)
 8002ca0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8002ca4:	e0bffe17 	ldw	r2,-8(fp)
 8002ca8:	10000526 	beq	r2,zero,8002cc0 <alt_iic_isr_register+0xb4>
 8002cac:	e0bff817 	ldw	r2,-32(fp)
 8002cb0:	100b883a 	mov	r5,r2
 8002cb4:	e13ffc17 	ldw	r4,-16(fp)
 8002cb8:	8002aac0 	call	8002aac <alt_ic_irq_enable>
 8002cbc:	00000406 	br	8002cd0 <alt_iic_isr_register+0xc4>
 8002cc0:	e0bff817 	ldw	r2,-32(fp)
 8002cc4:	100b883a 	mov	r5,r2
 8002cc8:	e13ffc17 	ldw	r4,-16(fp)
 8002ccc:	8002b340 	call	8002b34 <alt_ic_irq_disable>
 8002cd0:	e0bff715 	stw	r2,-36(fp)
 8002cd4:	e0bffa17 	ldw	r2,-24(fp)
 8002cd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002cdc:	e0bff917 	ldw	r2,-28(fp)
 8002ce0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8002ce4:	e0bff717 	ldw	r2,-36(fp)
}
 8002ce8:	e037883a 	mov	sp,fp
 8002cec:	dfc00117 	ldw	ra,4(sp)
 8002cf0:	df000017 	ldw	fp,0(sp)
 8002cf4:	dec00204 	addi	sp,sp,8
 8002cf8:	f800283a 	ret

08002cfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8002cfc:	defffe04 	addi	sp,sp,-8
 8002d00:	df000115 	stw	fp,4(sp)
 8002d04:	df000104 	addi	fp,sp,4
 8002d08:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8002d0c:	e0bfff17 	ldw	r2,-4(fp)
 8002d10:	108000d0 	cmplti	r2,r2,3
 8002d14:	10000d1e 	bne	r2,zero,8002d4c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8002d18:	00820134 	movhi	r2,2052
 8002d1c:	10b33a04 	addi	r2,r2,-13080
 8002d20:	e0ffff17 	ldw	r3,-4(fp)
 8002d24:	18c00324 	muli	r3,r3,12
 8002d28:	10c5883a 	add	r2,r2,r3
 8002d2c:	10800204 	addi	r2,r2,8
 8002d30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8002d34:	00820134 	movhi	r2,2052
 8002d38:	10b33a04 	addi	r2,r2,-13080
 8002d3c:	e0ffff17 	ldw	r3,-4(fp)
 8002d40:	18c00324 	muli	r3,r3,12
 8002d44:	10c5883a 	add	r2,r2,r3
 8002d48:	10000015 	stw	zero,0(r2)
  }
}
 8002d4c:	0001883a 	nop
 8002d50:	e037883a 	mov	sp,fp
 8002d54:	df000017 	ldw	fp,0(sp)
 8002d58:	dec00104 	addi	sp,sp,4
 8002d5c:	f800283a 	ret

08002d60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8002d60:	defffa04 	addi	sp,sp,-24
 8002d64:	df000515 	stw	fp,20(sp)
 8002d68:	df000504 	addi	fp,sp,20
 8002d6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002d70:	0005303a 	rdctl	r2,status
 8002d74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002d78:	e0fffc17 	ldw	r3,-16(fp)
 8002d7c:	00bfff84 	movi	r2,-2
 8002d80:	1884703a 	and	r2,r3,r2
 8002d84:	1001703a 	wrctl	status,r2
  
  return context;
 8002d88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8002d8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8002d90:	e0bfff17 	ldw	r2,-4(fp)
 8002d94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8002d98:	e0bffd17 	ldw	r2,-12(fp)
 8002d9c:	10800017 	ldw	r2,0(r2)
 8002da0:	e0fffd17 	ldw	r3,-12(fp)
 8002da4:	18c00117 	ldw	r3,4(r3)
 8002da8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8002dac:	e0bffd17 	ldw	r2,-12(fp)
 8002db0:	10800117 	ldw	r2,4(r2)
 8002db4:	e0fffd17 	ldw	r3,-12(fp)
 8002db8:	18c00017 	ldw	r3,0(r3)
 8002dbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8002dc0:	e0bffd17 	ldw	r2,-12(fp)
 8002dc4:	e0fffd17 	ldw	r3,-12(fp)
 8002dc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8002dcc:	e0bffd17 	ldw	r2,-12(fp)
 8002dd0:	e0fffd17 	ldw	r3,-12(fp)
 8002dd4:	10c00015 	stw	r3,0(r2)
 8002dd8:	e0bffb17 	ldw	r2,-20(fp)
 8002ddc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8002de0:	e0bffe17 	ldw	r2,-8(fp)
 8002de4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8002de8:	0001883a 	nop
 8002dec:	e037883a 	mov	sp,fp
 8002df0:	df000017 	ldw	fp,0(sp)
 8002df4:	dec00104 	addi	sp,sp,4
 8002df8:	f800283a 	ret

08002dfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8002dfc:	defffb04 	addi	sp,sp,-20
 8002e00:	dfc00415 	stw	ra,16(sp)
 8002e04:	df000315 	stw	fp,12(sp)
 8002e08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8002e0c:	d0a00717 	ldw	r2,-32740(gp)
 8002e10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8002e14:	d0a5de17 	ldw	r2,-26760(gp)
 8002e18:	10800044 	addi	r2,r2,1
 8002e1c:	d0a5de15 	stw	r2,-26760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8002e20:	00002e06 	br	8002edc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8002e24:	e0bffd17 	ldw	r2,-12(fp)
 8002e28:	10800017 	ldw	r2,0(r2)
 8002e2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8002e30:	e0bffd17 	ldw	r2,-12(fp)
 8002e34:	10800403 	ldbu	r2,16(r2)
 8002e38:	10803fcc 	andi	r2,r2,255
 8002e3c:	10000426 	beq	r2,zero,8002e50 <alt_tick+0x54>
 8002e40:	d0a5de17 	ldw	r2,-26760(gp)
 8002e44:	1000021e 	bne	r2,zero,8002e50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8002e48:	e0bffd17 	ldw	r2,-12(fp)
 8002e4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8002e50:	e0bffd17 	ldw	r2,-12(fp)
 8002e54:	10800217 	ldw	r2,8(r2)
 8002e58:	d0e5de17 	ldw	r3,-26760(gp)
 8002e5c:	18801d36 	bltu	r3,r2,8002ed4 <alt_tick+0xd8>
 8002e60:	e0bffd17 	ldw	r2,-12(fp)
 8002e64:	10800403 	ldbu	r2,16(r2)
 8002e68:	10803fcc 	andi	r2,r2,255
 8002e6c:	1000191e 	bne	r2,zero,8002ed4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8002e70:	e0bffd17 	ldw	r2,-12(fp)
 8002e74:	10800317 	ldw	r2,12(r2)
 8002e78:	e0fffd17 	ldw	r3,-12(fp)
 8002e7c:	18c00517 	ldw	r3,20(r3)
 8002e80:	1809883a 	mov	r4,r3
 8002e84:	103ee83a 	callr	r2
 8002e88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8002e8c:	e0bfff17 	ldw	r2,-4(fp)
 8002e90:	1000031e 	bne	r2,zero,8002ea0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8002e94:	e13ffd17 	ldw	r4,-12(fp)
 8002e98:	8002d600 	call	8002d60 <alt_alarm_stop>
 8002e9c:	00000d06 	br	8002ed4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8002ea0:	e0bffd17 	ldw	r2,-12(fp)
 8002ea4:	10c00217 	ldw	r3,8(r2)
 8002ea8:	e0bfff17 	ldw	r2,-4(fp)
 8002eac:	1887883a 	add	r3,r3,r2
 8002eb0:	e0bffd17 	ldw	r2,-12(fp)
 8002eb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8002eb8:	e0bffd17 	ldw	r2,-12(fp)
 8002ebc:	10c00217 	ldw	r3,8(r2)
 8002ec0:	d0a5de17 	ldw	r2,-26760(gp)
 8002ec4:	1880032e 	bgeu	r3,r2,8002ed4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8002ec8:	e0bffd17 	ldw	r2,-12(fp)
 8002ecc:	00c00044 	movi	r3,1
 8002ed0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8002ed4:	e0bffe17 	ldw	r2,-8(fp)
 8002ed8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8002edc:	e0fffd17 	ldw	r3,-12(fp)
 8002ee0:	d0a00704 	addi	r2,gp,-32740
 8002ee4:	18bfcf1e 	bne	r3,r2,8002e24 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8002ee8:	0001883a 	nop
}
 8002eec:	0001883a 	nop
 8002ef0:	e037883a 	mov	sp,fp
 8002ef4:	dfc00117 	ldw	ra,4(sp)
 8002ef8:	df000017 	ldw	fp,0(sp)
 8002efc:	dec00204 	addi	sp,sp,8
 8002f00:	f800283a 	ret

08002f04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8002f04:	deffff04 	addi	sp,sp,-4
 8002f08:	df000015 	stw	fp,0(sp)
 8002f0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8002f10:	000170fa 	wrctl	ienable,zero
}
 8002f14:	0001883a 	nop
 8002f18:	e037883a 	mov	sp,fp
 8002f1c:	df000017 	ldw	fp,0(sp)
 8002f20:	dec00104 	addi	sp,sp,4
 8002f24:	f800283a 	ret

08002f28 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8002f28:	defffb04 	addi	sp,sp,-20
 8002f2c:	df000415 	stw	fp,16(sp)
 8002f30:	df000404 	addi	fp,sp,16
 8002f34:	e13ffe15 	stw	r4,-8(fp)
 8002f38:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8002f3c:	e0bfff17 	ldw	r2,-4(fp)
 8002f40:	10840070 	cmpltui	r2,r2,4097
 8002f44:	1000021e 	bne	r2,zero,8002f50 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8002f48:	00840004 	movi	r2,4096
 8002f4c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8002f50:	e0fffe17 	ldw	r3,-8(fp)
 8002f54:	e0bfff17 	ldw	r2,-4(fp)
 8002f58:	1885883a 	add	r2,r3,r2
 8002f5c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8002f60:	e0bffe17 	ldw	r2,-8(fp)
 8002f64:	e0bffc15 	stw	r2,-16(fp)
 8002f68:	00000506 	br	8002f80 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8002f6c:	e0bffc17 	ldw	r2,-16(fp)
 8002f70:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8002f74:	e0bffc17 	ldw	r2,-16(fp)
 8002f78:	10800804 	addi	r2,r2,32
 8002f7c:	e0bffc15 	stw	r2,-16(fp)
 8002f80:	e0fffc17 	ldw	r3,-16(fp)
 8002f84:	e0bffd17 	ldw	r2,-12(fp)
 8002f88:	18bff836 	bltu	r3,r2,8002f6c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8002f8c:	e0bffe17 	ldw	r2,-8(fp)
 8002f90:	108007cc 	andi	r2,r2,31
 8002f94:	10000226 	beq	r2,zero,8002fa0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8002f98:	e0bffc17 	ldw	r2,-16(fp)
 8002f9c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8002fa0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8002fa4:	0001883a 	nop
 8002fa8:	e037883a 	mov	sp,fp
 8002fac:	df000017 	ldw	fp,0(sp)
 8002fb0:	dec00104 	addi	sp,sp,4
 8002fb4:	f800283a 	ret

08002fb8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8002fb8:	defffe04 	addi	sp,sp,-8
 8002fbc:	df000115 	stw	fp,4(sp)
 8002fc0:	df000104 	addi	fp,sp,4
 8002fc4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8002fc8:	e0bfff17 	ldw	r2,-4(fp)
 8002fcc:	10bffe84 	addi	r2,r2,-6
 8002fd0:	10c00428 	cmpgeui	r3,r2,16
 8002fd4:	18001a1e 	bne	r3,zero,8003040 <alt_exception_cause_generated_bad_addr+0x88>
 8002fd8:	100690ba 	slli	r3,r2,2
 8002fdc:	00820034 	movhi	r2,2048
 8002fe0:	108bfc04 	addi	r2,r2,12272
 8002fe4:	1885883a 	add	r2,r3,r2
 8002fe8:	10800017 	ldw	r2,0(r2)
 8002fec:	1000683a 	jmp	r2
 8002ff0:	08003030 	cmpltui	zero,at,192
 8002ff4:	08003030 	cmpltui	zero,at,192
 8002ff8:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 8002ffc:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 8003000:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 8003004:	08003030 	cmpltui	zero,at,192
 8003008:	08003038 	rdprs	zero,at,192
 800300c:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 8003010:	08003030 	cmpltui	zero,at,192
 8003014:	08003030 	cmpltui	zero,at,192
 8003018:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 800301c:	08003030 	cmpltui	zero,at,192
 8003020:	08003038 	rdprs	zero,at,192
 8003024:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 8003028:	08003040 	call	800304 <__alt_mem_sdram_controller_0-0x77ffcfc>
 800302c:	08003030 	cmpltui	zero,at,192
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8003030:	00800044 	movi	r2,1
 8003034:	00000306 	br	8003044 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8003038:	0005883a 	mov	r2,zero
 800303c:	00000106 	br	8003044 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8003040:	0005883a 	mov	r2,zero
  }
}
 8003044:	e037883a 	mov	sp,fp
 8003048:	df000017 	ldw	fp,0(sp)
 800304c:	dec00104 	addi	sp,sp,4
 8003050:	f800283a 	ret

08003054 <atexit>:
 8003054:	200b883a 	mov	r5,r4
 8003058:	000f883a 	mov	r7,zero
 800305c:	000d883a 	mov	r6,zero
 8003060:	0009883a 	mov	r4,zero
 8003064:	80033d81 	jmpi	80033d8 <__register_exitproc>

08003068 <exit>:
 8003068:	defffe04 	addi	sp,sp,-8
 800306c:	000b883a 	mov	r5,zero
 8003070:	dc000015 	stw	r16,0(sp)
 8003074:	dfc00115 	stw	ra,4(sp)
 8003078:	2021883a 	mov	r16,r4
 800307c:	80034f00 	call	80034f0 <__call_exitprocs>
 8003080:	00820134 	movhi	r2,2052
 8003084:	10b4ac04 	addi	r2,r2,-11600
 8003088:	11000017 	ldw	r4,0(r2)
 800308c:	20800f17 	ldw	r2,60(r4)
 8003090:	10000126 	beq	r2,zero,8003098 <exit+0x30>
 8003094:	103ee83a 	callr	r2
 8003098:	8009883a 	mov	r4,r16
 800309c:	80036700 	call	8003670 <_exit>

080030a0 <memcmp>:
 80030a0:	01c000c4 	movi	r7,3
 80030a4:	3980192e 	bgeu	r7,r6,800310c <memcmp+0x6c>
 80030a8:	2144b03a 	or	r2,r4,r5
 80030ac:	11c4703a 	and	r2,r2,r7
 80030b0:	10000f26 	beq	r2,zero,80030f0 <memcmp+0x50>
 80030b4:	20800003 	ldbu	r2,0(r4)
 80030b8:	28c00003 	ldbu	r3,0(r5)
 80030bc:	10c0151e 	bne	r2,r3,8003114 <memcmp+0x74>
 80030c0:	31bfff84 	addi	r6,r6,-2
 80030c4:	01ffffc4 	movi	r7,-1
 80030c8:	00000406 	br	80030dc <memcmp+0x3c>
 80030cc:	20800003 	ldbu	r2,0(r4)
 80030d0:	28c00003 	ldbu	r3,0(r5)
 80030d4:	31bfffc4 	addi	r6,r6,-1
 80030d8:	10c00e1e 	bne	r2,r3,8003114 <memcmp+0x74>
 80030dc:	21000044 	addi	r4,r4,1
 80030e0:	29400044 	addi	r5,r5,1
 80030e4:	31fff91e 	bne	r6,r7,80030cc <memcmp+0x2c>
 80030e8:	0005883a 	mov	r2,zero
 80030ec:	f800283a 	ret
 80030f0:	20c00017 	ldw	r3,0(r4)
 80030f4:	28800017 	ldw	r2,0(r5)
 80030f8:	18bfee1e 	bne	r3,r2,80030b4 <memcmp+0x14>
 80030fc:	31bfff04 	addi	r6,r6,-4
 8003100:	21000104 	addi	r4,r4,4
 8003104:	29400104 	addi	r5,r5,4
 8003108:	39bff936 	bltu	r7,r6,80030f0 <memcmp+0x50>
 800310c:	303fe91e 	bne	r6,zero,80030b4 <memcmp+0x14>
 8003110:	003ff506 	br	80030e8 <memcmp+0x48>
 8003114:	10c5c83a 	sub	r2,r2,r3
 8003118:	f800283a 	ret

0800311c <memcpy>:
 800311c:	defffd04 	addi	sp,sp,-12
 8003120:	dfc00215 	stw	ra,8(sp)
 8003124:	dc400115 	stw	r17,4(sp)
 8003128:	dc000015 	stw	r16,0(sp)
 800312c:	00c003c4 	movi	r3,15
 8003130:	2005883a 	mov	r2,r4
 8003134:	1980452e 	bgeu	r3,r6,800324c <memcpy+0x130>
 8003138:	2906b03a 	or	r3,r5,r4
 800313c:	18c000cc 	andi	r3,r3,3
 8003140:	1800441e 	bne	r3,zero,8003254 <memcpy+0x138>
 8003144:	347ffc04 	addi	r17,r6,-16
 8003148:	8822d13a 	srli	r17,r17,4
 800314c:	28c00104 	addi	r3,r5,4
 8003150:	23400104 	addi	r13,r4,4
 8003154:	8820913a 	slli	r16,r17,4
 8003158:	2b000204 	addi	r12,r5,8
 800315c:	22c00204 	addi	r11,r4,8
 8003160:	84000504 	addi	r16,r16,20
 8003164:	2a800304 	addi	r10,r5,12
 8003168:	22400304 	addi	r9,r4,12
 800316c:	2c21883a 	add	r16,r5,r16
 8003170:	2811883a 	mov	r8,r5
 8003174:	200f883a 	mov	r7,r4
 8003178:	41000017 	ldw	r4,0(r8)
 800317c:	1fc00017 	ldw	ra,0(r3)
 8003180:	63c00017 	ldw	r15,0(r12)
 8003184:	39000015 	stw	r4,0(r7)
 8003188:	53800017 	ldw	r14,0(r10)
 800318c:	6fc00015 	stw	ra,0(r13)
 8003190:	5bc00015 	stw	r15,0(r11)
 8003194:	4b800015 	stw	r14,0(r9)
 8003198:	18c00404 	addi	r3,r3,16
 800319c:	39c00404 	addi	r7,r7,16
 80031a0:	42000404 	addi	r8,r8,16
 80031a4:	6b400404 	addi	r13,r13,16
 80031a8:	63000404 	addi	r12,r12,16
 80031ac:	5ac00404 	addi	r11,r11,16
 80031b0:	52800404 	addi	r10,r10,16
 80031b4:	4a400404 	addi	r9,r9,16
 80031b8:	1c3fef1e 	bne	r3,r16,8003178 <memcpy+0x5c>
 80031bc:	89c00044 	addi	r7,r17,1
 80031c0:	380e913a 	slli	r7,r7,4
 80031c4:	310003cc 	andi	r4,r6,15
 80031c8:	02c000c4 	movi	r11,3
 80031cc:	11c7883a 	add	r3,r2,r7
 80031d0:	29cb883a 	add	r5,r5,r7
 80031d4:	5900212e 	bgeu	r11,r4,800325c <memcpy+0x140>
 80031d8:	1813883a 	mov	r9,r3
 80031dc:	2811883a 	mov	r8,r5
 80031e0:	200f883a 	mov	r7,r4
 80031e4:	42800017 	ldw	r10,0(r8)
 80031e8:	4a400104 	addi	r9,r9,4
 80031ec:	39ffff04 	addi	r7,r7,-4
 80031f0:	4abfff15 	stw	r10,-4(r9)
 80031f4:	42000104 	addi	r8,r8,4
 80031f8:	59fffa36 	bltu	r11,r7,80031e4 <memcpy+0xc8>
 80031fc:	213fff04 	addi	r4,r4,-4
 8003200:	2008d0ba 	srli	r4,r4,2
 8003204:	318000cc 	andi	r6,r6,3
 8003208:	21000044 	addi	r4,r4,1
 800320c:	2109883a 	add	r4,r4,r4
 8003210:	2109883a 	add	r4,r4,r4
 8003214:	1907883a 	add	r3,r3,r4
 8003218:	290b883a 	add	r5,r5,r4
 800321c:	30000626 	beq	r6,zero,8003238 <memcpy+0x11c>
 8003220:	198d883a 	add	r6,r3,r6
 8003224:	29c00003 	ldbu	r7,0(r5)
 8003228:	18c00044 	addi	r3,r3,1
 800322c:	29400044 	addi	r5,r5,1
 8003230:	19ffffc5 	stb	r7,-1(r3)
 8003234:	19bffb1e 	bne	r3,r6,8003224 <memcpy+0x108>
 8003238:	dfc00217 	ldw	ra,8(sp)
 800323c:	dc400117 	ldw	r17,4(sp)
 8003240:	dc000017 	ldw	r16,0(sp)
 8003244:	dec00304 	addi	sp,sp,12
 8003248:	f800283a 	ret
 800324c:	2007883a 	mov	r3,r4
 8003250:	003ff206 	br	800321c <memcpy+0x100>
 8003254:	2007883a 	mov	r3,r4
 8003258:	003ff106 	br	8003220 <memcpy+0x104>
 800325c:	200d883a 	mov	r6,r4
 8003260:	003fee06 	br	800321c <memcpy+0x100>

08003264 <strcmp>:
 8003264:	2144b03a 	or	r2,r4,r5
 8003268:	108000cc 	andi	r2,r2,3
 800326c:	1000171e 	bne	r2,zero,80032cc <strcmp+0x68>
 8003270:	20800017 	ldw	r2,0(r4)
 8003274:	28c00017 	ldw	r3,0(r5)
 8003278:	10c0141e 	bne	r2,r3,80032cc <strcmp+0x68>
 800327c:	027fbff4 	movhi	r9,65279
 8003280:	4a7fbfc4 	addi	r9,r9,-257
 8003284:	0086303a 	nor	r3,zero,r2
 8003288:	02202074 	movhi	r8,32897
 800328c:	1245883a 	add	r2,r2,r9
 8003290:	42202004 	addi	r8,r8,-32640
 8003294:	10c4703a 	and	r2,r2,r3
 8003298:	1204703a 	and	r2,r2,r8
 800329c:	10000226 	beq	r2,zero,80032a8 <strcmp+0x44>
 80032a0:	00002306 	br	8003330 <strcmp+0xcc>
 80032a4:	1000221e 	bne	r2,zero,8003330 <strcmp+0xcc>
 80032a8:	21000104 	addi	r4,r4,4
 80032ac:	20c00017 	ldw	r3,0(r4)
 80032b0:	29400104 	addi	r5,r5,4
 80032b4:	29800017 	ldw	r6,0(r5)
 80032b8:	1a4f883a 	add	r7,r3,r9
 80032bc:	00c4303a 	nor	r2,zero,r3
 80032c0:	3884703a 	and	r2,r7,r2
 80032c4:	1204703a 	and	r2,r2,r8
 80032c8:	19bff626 	beq	r3,r6,80032a4 <strcmp+0x40>
 80032cc:	20800003 	ldbu	r2,0(r4)
 80032d0:	10c03fcc 	andi	r3,r2,255
 80032d4:	18c0201c 	xori	r3,r3,128
 80032d8:	18ffe004 	addi	r3,r3,-128
 80032dc:	18000c26 	beq	r3,zero,8003310 <strcmp+0xac>
 80032e0:	29800007 	ldb	r6,0(r5)
 80032e4:	19800326 	beq	r3,r6,80032f4 <strcmp+0x90>
 80032e8:	00001306 	br	8003338 <strcmp+0xd4>
 80032ec:	29800007 	ldb	r6,0(r5)
 80032f0:	11800b1e 	bne	r2,r6,8003320 <strcmp+0xbc>
 80032f4:	21000044 	addi	r4,r4,1
 80032f8:	20c00003 	ldbu	r3,0(r4)
 80032fc:	29400044 	addi	r5,r5,1
 8003300:	18803fcc 	andi	r2,r3,255
 8003304:	1080201c 	xori	r2,r2,128
 8003308:	10bfe004 	addi	r2,r2,-128
 800330c:	103ff71e 	bne	r2,zero,80032ec <strcmp+0x88>
 8003310:	0007883a 	mov	r3,zero
 8003314:	28800003 	ldbu	r2,0(r5)
 8003318:	1885c83a 	sub	r2,r3,r2
 800331c:	f800283a 	ret
 8003320:	28800003 	ldbu	r2,0(r5)
 8003324:	18c03fcc 	andi	r3,r3,255
 8003328:	1885c83a 	sub	r2,r3,r2
 800332c:	f800283a 	ret
 8003330:	0005883a 	mov	r2,zero
 8003334:	f800283a 	ret
 8003338:	10c03fcc 	andi	r3,r2,255
 800333c:	003ff506 	br	8003314 <strcmp+0xb0>

08003340 <strlen>:
 8003340:	208000cc 	andi	r2,r4,3
 8003344:	10002026 	beq	r2,zero,80033c8 <strlen+0x88>
 8003348:	20800007 	ldb	r2,0(r4)
 800334c:	10002026 	beq	r2,zero,80033d0 <strlen+0x90>
 8003350:	2005883a 	mov	r2,r4
 8003354:	00000206 	br	8003360 <strlen+0x20>
 8003358:	10c00007 	ldb	r3,0(r2)
 800335c:	18001826 	beq	r3,zero,80033c0 <strlen+0x80>
 8003360:	10800044 	addi	r2,r2,1
 8003364:	10c000cc 	andi	r3,r2,3
 8003368:	183ffb1e 	bne	r3,zero,8003358 <strlen+0x18>
 800336c:	10c00017 	ldw	r3,0(r2)
 8003370:	01ffbff4 	movhi	r7,65279
 8003374:	39ffbfc4 	addi	r7,r7,-257
 8003378:	00ca303a 	nor	r5,zero,r3
 800337c:	01a02074 	movhi	r6,32897
 8003380:	19c7883a 	add	r3,r3,r7
 8003384:	31a02004 	addi	r6,r6,-32640
 8003388:	1946703a 	and	r3,r3,r5
 800338c:	1986703a 	and	r3,r3,r6
 8003390:	1800091e 	bne	r3,zero,80033b8 <strlen+0x78>
 8003394:	10800104 	addi	r2,r2,4
 8003398:	10c00017 	ldw	r3,0(r2)
 800339c:	19cb883a 	add	r5,r3,r7
 80033a0:	00c6303a 	nor	r3,zero,r3
 80033a4:	28c6703a 	and	r3,r5,r3
 80033a8:	1986703a 	and	r3,r3,r6
 80033ac:	183ff926 	beq	r3,zero,8003394 <strlen+0x54>
 80033b0:	00000106 	br	80033b8 <strlen+0x78>
 80033b4:	10800044 	addi	r2,r2,1
 80033b8:	10c00007 	ldb	r3,0(r2)
 80033bc:	183ffd1e 	bne	r3,zero,80033b4 <strlen+0x74>
 80033c0:	1105c83a 	sub	r2,r2,r4
 80033c4:	f800283a 	ret
 80033c8:	2005883a 	mov	r2,r4
 80033cc:	003fe706 	br	800336c <strlen+0x2c>
 80033d0:	0005883a 	mov	r2,zero
 80033d4:	f800283a 	ret

080033d8 <__register_exitproc>:
 80033d8:	defffa04 	addi	sp,sp,-24
 80033dc:	dc000315 	stw	r16,12(sp)
 80033e0:	04020134 	movhi	r16,2052
 80033e4:	8434ac04 	addi	r16,r16,-11600
 80033e8:	80c00017 	ldw	r3,0(r16)
 80033ec:	dc400415 	stw	r17,16(sp)
 80033f0:	dfc00515 	stw	ra,20(sp)
 80033f4:	18805217 	ldw	r2,328(r3)
 80033f8:	2023883a 	mov	r17,r4
 80033fc:	10003726 	beq	r2,zero,80034dc <__register_exitproc+0x104>
 8003400:	10c00117 	ldw	r3,4(r2)
 8003404:	010007c4 	movi	r4,31
 8003408:	20c00e16 	blt	r4,r3,8003444 <__register_exitproc+0x6c>
 800340c:	1a000044 	addi	r8,r3,1
 8003410:	8800221e 	bne	r17,zero,800349c <__register_exitproc+0xc4>
 8003414:	18c00084 	addi	r3,r3,2
 8003418:	18c7883a 	add	r3,r3,r3
 800341c:	18c7883a 	add	r3,r3,r3
 8003420:	12000115 	stw	r8,4(r2)
 8003424:	10c7883a 	add	r3,r2,r3
 8003428:	19400015 	stw	r5,0(r3)
 800342c:	0005883a 	mov	r2,zero
 8003430:	dfc00517 	ldw	ra,20(sp)
 8003434:	dc400417 	ldw	r17,16(sp)
 8003438:	dc000317 	ldw	r16,12(sp)
 800343c:	dec00604 	addi	sp,sp,24
 8003440:	f800283a 	ret
 8003444:	00800034 	movhi	r2,0
 8003448:	10800004 	addi	r2,r2,0
 800344c:	10002626 	beq	r2,zero,80034e8 <__register_exitproc+0x110>
 8003450:	01006404 	movi	r4,400
 8003454:	d9400015 	stw	r5,0(sp)
 8003458:	d9800115 	stw	r6,4(sp)
 800345c:	d9c00215 	stw	r7,8(sp)
 8003460:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x8000000>
 8003464:	d9400017 	ldw	r5,0(sp)
 8003468:	d9800117 	ldw	r6,4(sp)
 800346c:	d9c00217 	ldw	r7,8(sp)
 8003470:	10001d26 	beq	r2,zero,80034e8 <__register_exitproc+0x110>
 8003474:	81000017 	ldw	r4,0(r16)
 8003478:	10000115 	stw	zero,4(r2)
 800347c:	02000044 	movi	r8,1
 8003480:	22405217 	ldw	r9,328(r4)
 8003484:	0007883a 	mov	r3,zero
 8003488:	12400015 	stw	r9,0(r2)
 800348c:	20805215 	stw	r2,328(r4)
 8003490:	10006215 	stw	zero,392(r2)
 8003494:	10006315 	stw	zero,396(r2)
 8003498:	883fde26 	beq	r17,zero,8003414 <__register_exitproc+0x3c>
 800349c:	18c9883a 	add	r4,r3,r3
 80034a0:	2109883a 	add	r4,r4,r4
 80034a4:	1109883a 	add	r4,r2,r4
 80034a8:	21802215 	stw	r6,136(r4)
 80034ac:	01800044 	movi	r6,1
 80034b0:	12406217 	ldw	r9,392(r2)
 80034b4:	30cc983a 	sll	r6,r6,r3
 80034b8:	4992b03a 	or	r9,r9,r6
 80034bc:	12406215 	stw	r9,392(r2)
 80034c0:	21c04215 	stw	r7,264(r4)
 80034c4:	01000084 	movi	r4,2
 80034c8:	893fd21e 	bne	r17,r4,8003414 <__register_exitproc+0x3c>
 80034cc:	11006317 	ldw	r4,396(r2)
 80034d0:	218cb03a 	or	r6,r4,r6
 80034d4:	11806315 	stw	r6,396(r2)
 80034d8:	003fce06 	br	8003414 <__register_exitproc+0x3c>
 80034dc:	18805304 	addi	r2,r3,332
 80034e0:	18805215 	stw	r2,328(r3)
 80034e4:	003fc606 	br	8003400 <__register_exitproc+0x28>
 80034e8:	00bfffc4 	movi	r2,-1
 80034ec:	003fd006 	br	8003430 <__register_exitproc+0x58>

080034f0 <__call_exitprocs>:
 80034f0:	defff504 	addi	sp,sp,-44
 80034f4:	df000915 	stw	fp,36(sp)
 80034f8:	dd400615 	stw	r21,24(sp)
 80034fc:	dc800315 	stw	r18,12(sp)
 8003500:	dfc00a15 	stw	ra,40(sp)
 8003504:	ddc00815 	stw	r23,32(sp)
 8003508:	dd800715 	stw	r22,28(sp)
 800350c:	dd000515 	stw	r20,20(sp)
 8003510:	dcc00415 	stw	r19,16(sp)
 8003514:	dc400215 	stw	r17,8(sp)
 8003518:	dc000115 	stw	r16,4(sp)
 800351c:	d9000015 	stw	r4,0(sp)
 8003520:	2839883a 	mov	fp,r5
 8003524:	04800044 	movi	r18,1
 8003528:	057fffc4 	movi	r21,-1
 800352c:	00820134 	movhi	r2,2052
 8003530:	10b4ac04 	addi	r2,r2,-11600
 8003534:	12000017 	ldw	r8,0(r2)
 8003538:	45005217 	ldw	r20,328(r8)
 800353c:	44c05204 	addi	r19,r8,328
 8003540:	a0001c26 	beq	r20,zero,80035b4 <__call_exitprocs+0xc4>
 8003544:	a0800117 	ldw	r2,4(r20)
 8003548:	15ffffc4 	addi	r23,r2,-1
 800354c:	b8000d16 	blt	r23,zero,8003584 <__call_exitprocs+0x94>
 8003550:	14000044 	addi	r16,r2,1
 8003554:	8421883a 	add	r16,r16,r16
 8003558:	8421883a 	add	r16,r16,r16
 800355c:	84402004 	addi	r17,r16,128
 8003560:	a463883a 	add	r17,r20,r17
 8003564:	a421883a 	add	r16,r20,r16
 8003568:	e0001e26 	beq	fp,zero,80035e4 <__call_exitprocs+0xf4>
 800356c:	80804017 	ldw	r2,256(r16)
 8003570:	e0801c26 	beq	fp,r2,80035e4 <__call_exitprocs+0xf4>
 8003574:	bdffffc4 	addi	r23,r23,-1
 8003578:	843fff04 	addi	r16,r16,-4
 800357c:	8c7fff04 	addi	r17,r17,-4
 8003580:	bd7ff91e 	bne	r23,r21,8003568 <__call_exitprocs+0x78>
 8003584:	00800034 	movhi	r2,0
 8003588:	10800004 	addi	r2,r2,0
 800358c:	10000926 	beq	r2,zero,80035b4 <__call_exitprocs+0xc4>
 8003590:	a0800117 	ldw	r2,4(r20)
 8003594:	1000301e 	bne	r2,zero,8003658 <__call_exitprocs+0x168>
 8003598:	a0800017 	ldw	r2,0(r20)
 800359c:	10003226 	beq	r2,zero,8003668 <__call_exitprocs+0x178>
 80035a0:	a009883a 	mov	r4,r20
 80035a4:	98800015 	stw	r2,0(r19)
 80035a8:	00000000 	call	0 <__alt_mem_sdram_controller_0-0x8000000>
 80035ac:	9d000017 	ldw	r20,0(r19)
 80035b0:	a03fe41e 	bne	r20,zero,8003544 <__call_exitprocs+0x54>
 80035b4:	dfc00a17 	ldw	ra,40(sp)
 80035b8:	df000917 	ldw	fp,36(sp)
 80035bc:	ddc00817 	ldw	r23,32(sp)
 80035c0:	dd800717 	ldw	r22,28(sp)
 80035c4:	dd400617 	ldw	r21,24(sp)
 80035c8:	dd000517 	ldw	r20,20(sp)
 80035cc:	dcc00417 	ldw	r19,16(sp)
 80035d0:	dc800317 	ldw	r18,12(sp)
 80035d4:	dc400217 	ldw	r17,8(sp)
 80035d8:	dc000117 	ldw	r16,4(sp)
 80035dc:	dec00b04 	addi	sp,sp,44
 80035e0:	f800283a 	ret
 80035e4:	a0800117 	ldw	r2,4(r20)
 80035e8:	80c00017 	ldw	r3,0(r16)
 80035ec:	10bfffc4 	addi	r2,r2,-1
 80035f0:	15c01426 	beq	r2,r23,8003644 <__call_exitprocs+0x154>
 80035f4:	80000015 	stw	zero,0(r16)
 80035f8:	183fde26 	beq	r3,zero,8003574 <__call_exitprocs+0x84>
 80035fc:	95c8983a 	sll	r4,r18,r23
 8003600:	a0806217 	ldw	r2,392(r20)
 8003604:	a5800117 	ldw	r22,4(r20)
 8003608:	2084703a 	and	r2,r4,r2
 800360c:	10000b26 	beq	r2,zero,800363c <__call_exitprocs+0x14c>
 8003610:	a0806317 	ldw	r2,396(r20)
 8003614:	2088703a 	and	r4,r4,r2
 8003618:	20000c1e 	bne	r4,zero,800364c <__call_exitprocs+0x15c>
 800361c:	89400017 	ldw	r5,0(r17)
 8003620:	d9000017 	ldw	r4,0(sp)
 8003624:	183ee83a 	callr	r3
 8003628:	a0800117 	ldw	r2,4(r20)
 800362c:	15bfbf1e 	bne	r2,r22,800352c <__call_exitprocs+0x3c>
 8003630:	98800017 	ldw	r2,0(r19)
 8003634:	153fcf26 	beq	r2,r20,8003574 <__call_exitprocs+0x84>
 8003638:	003fbc06 	br	800352c <__call_exitprocs+0x3c>
 800363c:	183ee83a 	callr	r3
 8003640:	003ff906 	br	8003628 <__call_exitprocs+0x138>
 8003644:	a5c00115 	stw	r23,4(r20)
 8003648:	003feb06 	br	80035f8 <__call_exitprocs+0x108>
 800364c:	89000017 	ldw	r4,0(r17)
 8003650:	183ee83a 	callr	r3
 8003654:	003ff406 	br	8003628 <__call_exitprocs+0x138>
 8003658:	a0800017 	ldw	r2,0(r20)
 800365c:	a027883a 	mov	r19,r20
 8003660:	1029883a 	mov	r20,r2
 8003664:	003fb606 	br	8003540 <__call_exitprocs+0x50>
 8003668:	0005883a 	mov	r2,zero
 800366c:	003ffb06 	br	800365c <__call_exitprocs+0x16c>

08003670 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8003670:	defffd04 	addi	sp,sp,-12
 8003674:	df000215 	stw	fp,8(sp)
 8003678:	df000204 	addi	fp,sp,8
 800367c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8003680:	0001883a 	nop
 8003684:	e0bfff17 	ldw	r2,-4(fp)
 8003688:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800368c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8003690:	10000226 	beq	r2,zero,800369c <_exit+0x2c>
    ALT_SIM_FAIL();
 8003694:	002af070 	cmpltui	zero,zero,43969
 8003698:	00000106 	br	80036a0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800369c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80036a0:	003fff06 	br	80036a0 <_exit+0x30>
