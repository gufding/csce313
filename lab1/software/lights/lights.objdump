
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00006d5c memsz 0x00006d5c flags r-x
    LOAD off    0x00007d7c vaddr 0x08006d7c paddr 0x080087e8 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000a254 vaddr 0x0800a254 paddr 0x0800a254 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006aa4  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000094  08006ce8  08006ce8  00007ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  08006d7c  080087e8  00007d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  0800a254  0800a254  0000a254  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0800a3e4  0800a3e4  000097e8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000097e8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a98  00000000  00000000  00009810  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017026  00000000  00000000  0000a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063a0  00000000  00000000  000212ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006ef0  00000000  00000000  0002766e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001698  00000000  00000000  0002e560  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002824  00000000  00000000  0002fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b8c  00000000  00000000  0003241c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00036fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b0  00000000  00000000  00037008  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039cba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00039cbd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039cc9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039cca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00039ccb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00039cd6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00039ce1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00039cec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  00039cf7  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  00039d10  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006c48d  00000000  00000000  0003ee87  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08006ce8 l    d  .rodata	00000000 .rodata
08006d7c l    d  .rwdata	00000000 .rwdata
0800a254 l    d  .bss	00000000 .bss
0800a3e4 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
0800a280 l     O .bss	0000001c binarr.3185
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
080019b8 l     F .text	00000008 __fp_unlock
080019cc l     F .text	0000019c __sinit.part.1
08001b68 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08006d7c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
080044c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080045cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080045f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080046e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080047c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
080048b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08004a84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080087d8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08004d00 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08004e34 l     F .text	00000034 alt_dev_reg
08007750 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800510c l     F .text	0000020c altera_avalon_jtag_uart_irq
08005318 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08005c1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08006090 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080061d0 l     F .text	0000003c alt_get_errno
0800620c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800a27c g     O .bss	00000004 alt_instruction_exception_handler
08000290 g     F .text	000000a4 decToBinary
0800440c g     F .text	00000054 _isatty_r
080049c0 g     F .text	0000007c alt_main
080017d0 g     F .text	000000c0 _puts_r
0800a2e4 g     O .bss	00000100 alt_irq
08004134 g     F .text	00000060 _lseek_r
080087e8 g       *ABS*	00000000 __flash_rwdata_start
0800a3e4 g       *ABS*	00000000 __alt_heap_start
080036e8 g     F .text	0000005c __sseek
08001d08 g     F .text	00000010 __sinit
08001b70 g     F .text	00000068 __sfmoreglue
08004a60 g     F .text	00000024 __malloc_unlock
08002dd4 g     F .text	0000015c memmove
08001cf0 g     F .text	00000018 _cleanup
080065c8 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
080043b0 g     F .text	0000005c _fstat_r
0800a260 g     O .bss	00000004 errno
08003664 g     F .text	00000008 __seofread
0800a268 g     O .bss	00000004 alt_argv
080107b0 g       *ABS*	00000000 _gp
08004cd0 g     F .text	00000030 usleep
080075d0 g     O .rwdata	00000180 alt_fd_list
08000e54 g     F .text	000001e0 randLights
080065ec g     F .text	00000090 alt_find_dev
08002c8c g     F .text	00000148 memcpy
080019c0 g     F .text	0000000c _cleanup_r
08006154 g     F .text	0000007c alt_io_redirect
08006ce8 g       *ABS*	00000000 __DTOR_END__
08001890 g     F .text	00000014 puts
080068b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08005510 g     F .text	0000021c altera_avalon_jtag_uart_read
08001714 g     F .text	00000064 .hidden __udivsi3
08004720 g     F .text	000000a4 isatty
08006828 g     F .text	00000090 alt_icache_flush
0800a25c g     O .bss	00000004 __malloc_top_pad
08001d58 g     F .text	000004bc __sfvwrite_r
080035bc g     F .text	00000054 _sbrk_r
08004350 g     F .text	00000060 _read_r
080087d0 g     O .rwdata	00000004 alt_max_fd
08003954 g     F .text	000000f0 _fclose_r
08003cd0 g     F .text	00000030 fflush
0800a258 g     O .bss	00000004 __malloc_max_sbrked_mem
080048ec g     F .text	000000d4 lseek
080087b0 g     O .rwdata	00000004 _global_impure_ptr
08003058 g     F .text	00000564 _realloc_r
0800a3e4 g       *ABS*	00000000 __bss_end
08005fa0 g     F .text	000000f0 alt_iic_isr_register
080064c0 g     F .text	00000108 alt_tick
08001d28 g     F .text	00000018 __fp_lock_all
08005f54 g     F .text	0000004c alt_ic_irq_enabled
0800a2c4 g     O .bss	00000020 hexCount
08006424 g     F .text	0000009c alt_alarm_stop
0800a270 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
080075a8 g     O .rwdata	00000028 alt_dev_null
08005bd4 g     F .text	00000048 alt_dcache_flush_all
080087e8 g       *ABS*	00000000 __ram_rwdata_end
080087c8 g     O .rwdata	00000008 alt_dev_list
08004d3c g     F .text	000000f8 write
08006d7c g       *ABS*	00000000 __ram_rodata_end
08004634 g     F .text	000000b0 fstat
08001778 g     F .text	00000058 .hidden __umodsi3
0800a3e4 g       *ABS*	00000000 end
0800504c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08006ce8 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0800572c g     F .text	00000224 altera_avalon_jtag_uart_write
08001d18 g     F .text	00000004 __sfp_lock_acquire
08002ba8 g     F .text	000000e4 memchr
08003e24 g     F .text	00000310 _free_r
08006b34 g     F .text	00000180 __call_exitprocs
080087b8 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
0800a274 g     O .bss	00000004 _alt_tick_rate
080018bc g     F .text	00000064 rand
0800a278 g     O .bss	00000004 _alt_nticks
08004ac0 g     F .text	000000fc read
08004ea0 g     F .text	00000048 alt_sys_init
08006a1c g     F .text	00000118 __register_exitproc
080053b8 g     F .text	00000068 altera_avalon_jtag_uart_close
08006d7c g       *ABS*	00000000 __ram_rwdata_start
08006ce8 g       *ABS*	00000000 __ram_rodata_start
0800a29c g     O .bss	00000028 __malloc_current_mallinfo
08004ee8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006784 g     F .text	000000a4 alt_get_fd
08005a7c g     F .text	00000158 alt_busy_sleep
08003900 g     F .text	00000054 _close_r
080069a0 g     F .text	0000007c memcmp
08004fa8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800a3e4 g       *ABS*	00000000 __alt_stack_base
08004ff8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001034 g     F .text	000003ec patternLights
080037ac g     F .text	00000154 __swsetup_r
08001bd8 g     F .text	00000118 __sfp
080071a0 g     O .rwdata	00000408 __malloc_av_
08001d24 g     F .text	00000004 __sinit_lock_release
08003610 g     F .text	00000054 __sread
0800667c g     F .text	00000108 alt_find_file
08005c58 g     F .text	000000a4 alt_dev_llist_insert
08004a3c g     F .text	00000024 __malloc_lock
08004c20 g     F .text	000000b0 sbrk
08003c74 g     F .text	0000005c _fflush_r
0800a254 g       *ABS*	00000000 __bss_start
08002f30 g     F .text	00000128 memset
08001420 g     F .text	000001fc main
0800a26c g     O .bss	00000004 alt_envp
0800a254 g     O .bss	00000004 __malloc_max_total_mem
08004f48 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080018a4 g     F .text	00000018 srand
08003744 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08003a44 g     F .text	00000014 fclose
0800239c g     F .text	0000080c _malloc_r
080087d4 g     O .rwdata	00000004 alt_errno
08002214 g     F .text	000000c4 _fwalk
0800161c g     F .text	00000084 .hidden __divsi3
08003d00 g     F .text	00000124 _malloc_trim_r
08006ce8 g       *ABS*	00000000 __CTOR_END__
08006ce8 g       *ABS*	00000000 __flash_rodata_start
08006ce8 g       *ABS*	00000000 __DTOR_LIST__
08000334 g     F .text	00000b20 count
08004e68 g     F .text	00000038 alt_irq_init
08004bbc g     F .text	00000064 alt_release_fd
08006954 g     F .text	00000014 atexit
0800374c g     F .text	00000060 _write_r
080087b4 g     O .rwdata	00000004 _impure_ptr
0800a264 g     O .bss	00000004 alt_argc
08003a58 g     F .text	0000021c __sflush_r
08005d5c g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08001d40 g     F .text	00000018 __fp_unlock_all
080087c0 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08005df0 g     F .text	00000050 alt_ic_isr_register
080087e8 g       *ABS*	00000000 _edata
0800a3e4 g       *ABS*	00000000 _end
08000244 g       *ABS*	00000000 __ram_exceptions_end
08005420 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08005ec8 g     F .text	0000008c alt_ic_irq_disable
0800366c g     F .text	0000007c __swrite
080087bc g     O .rwdata	00000004 __malloc_trim_threshold
08006968 g     F .text	00000038 exit
080022d8 g     F .text	000000c4 _fwalk_reent
080016a0 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08001d1c g     F .text	00000004 __sfp_lock_release
08006cb4 g     F .text	00000034 _exit
08005950 g     F .text	0000012c alt_alarm_start
08004460 g     F .text	00000060 .hidden __muldi3
08004194 g     F .text	000001bc __smakebuf_r
08001920 g     F .text	00000098 strlen
080062d0 g     F .text	00000154 open
08005dbc g     F .text	00000034 alt_icache_flush_all
080087dc g     O .rwdata	00000004 alt_priority_mask
08005e40 g     F .text	00000088 alt_ic_irq_enable
080087e0 g     O .rwdata	00000008 alt_alarm_list
08005cfc g     F .text	00000060 _do_ctors
080044fc g     F .text	000000d0 close
0800482c g     F .text	00000084 alt_load
08001d20 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10a8b904 	addi	r2,r2,-23836
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10a8b904 	addi	r2,r2,-23836
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6b317 	ldw	r2,-25908(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6b317 	ldw	r2,-25908(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d681ec14 	ori	gp,gp,1968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	10a89514 	ori	r2,r2,41556

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18e8f914 	ori	r3,r3,41956

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800482c0 	call	800482c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	80049c00 	call	80049c0 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <decToBinary>:
#define SEVEN 0b1111000
#define EIGHT 0b0000000
#define NINE  0b0010000

// Function that converts a decimal to a binary
int* decToBinary (int n) {
 8000290:	defffc04 	addi	sp,sp,-16
 8000294:	df000315 	stw	fp,12(sp)
 8000298:	df000304 	addi	fp,sp,12
 800029c:	e13fff15 	stw	r4,-4(fp)
  static int binarr[7];
  for (int i = 7; i >= 0; i--) {
 80002a0:	008001c4 	movi	r2,7
 80002a4:	e0bffd15 	stw	r2,-12(fp)
 80002a8:	00001a06 	br	8000314 <decToBinary+0x84>
    int k = n >> i;
 80002ac:	e0ffff17 	ldw	r3,-4(fp)
 80002b0:	e0bffd17 	ldw	r2,-12(fp)
 80002b4:	1885d83a 	sra	r2,r3,r2
 80002b8:	e0bffe15 	stw	r2,-8(fp)
    if (k & 1) binarr[i] = 1;
 80002bc:	e0bffe17 	ldw	r2,-8(fp)
 80002c0:	1080004c 	andi	r2,r2,1
 80002c4:	10000926 	beq	r2,zero,80002ec <decToBinary+0x5c>
 80002c8:	00820074 	movhi	r2,2049
 80002cc:	10a8a004 	addi	r2,r2,-23936
 80002d0:	e0fffd17 	ldw	r3,-12(fp)
 80002d4:	18c7883a 	add	r3,r3,r3
 80002d8:	18c7883a 	add	r3,r3,r3
 80002dc:	10c5883a 	add	r2,r2,r3
 80002e0:	00c00044 	movi	r3,1
 80002e4:	10c00015 	stw	r3,0(r2)
 80002e8:	00000706 	br	8000308 <decToBinary+0x78>
    else binarr[i] = 0;
 80002ec:	00820074 	movhi	r2,2049
 80002f0:	10a8a004 	addi	r2,r2,-23936
 80002f4:	e0fffd17 	ldw	r3,-12(fp)
 80002f8:	18c7883a 	add	r3,r3,r3
 80002fc:	18c7883a 	add	r3,r3,r3
 8000300:	10c5883a 	add	r2,r2,r3
 8000304:	10000015 	stw	zero,0(r2)
#define NINE  0b0010000

// Function that converts a decimal to a binary
int* decToBinary (int n) {
  static int binarr[7];
  for (int i = 7; i >= 0; i--) {
 8000308:	e0bffd17 	ldw	r2,-12(fp)
 800030c:	10bfffc4 	addi	r2,r2,-1
 8000310:	e0bffd15 	stw	r2,-12(fp)
 8000314:	e0bffd17 	ldw	r2,-12(fp)
 8000318:	103fe40e 	bge	r2,zero,80002ac <decToBinary+0x1c>
    int k = n >> i;
    if (k & 1) binarr[i] = 1;
    else binarr[i] = 0;
  }
  return binarr;
 800031c:	00820074 	movhi	r2,2049
 8000320:	10a8a004 	addi	r2,r2,-23936
}
 8000324:	e037883a 	mov	sp,fp
 8000328:	df000017 	ldw	fp,0(sp)
 800032c:	dec00104 	addi	sp,sp,4
 8000330:	f800283a 	ret

08000334 <count>:

// storage for the present state in the hex display count
int hexCount[ 8 ];
// counting function for the hex disylays
void count( void )
{
 8000334:	deffff04 	addi	sp,sp,-4
 8000338:	df000015 	stw	fp,0(sp)
 800033c:	d839883a 	mov	fp,sp
	switch ( hexCount[ 0 ] )
 8000340:	00820074 	movhi	r2,2049
 8000344:	10a8b104 	addi	r2,r2,-23868
 8000348:	10800017 	ldw	r2,0(r2)
 800034c:	10c002a8 	cmpgeui	r3,r2,10
 8000350:	18008b1e 	bne	r3,zero,8000580 <count+0x24c>
 8000354:	100690ba 	slli	r3,r2,2
 8000358:	00820034 	movhi	r2,2048
 800035c:	1080db04 	addi	r2,r2,876
 8000360:	1885883a 	add	r2,r3,r2
 8000364:	10800017 	ldw	r2,0(r2)
 8000368:	1000683a 	jmp	r2
 800036c:	08000394 	ori	zero,at,14
 8000370:	080003c4 	addi	zero,at,15
 8000374:	080003f4 	orhi	zero,at,15
 8000378:	08000424 	muli	zero,at,16
 800037c:	08000454 	ori	zero,at,17
 8000380:	08000484 	addi	zero,at,18
 8000384:	080004b4 	orhi	zero,at,18
 8000388:	080004e4 	muli	zero,at,19
 800038c:	08000514 	ori	zero,at,20
 8000390:	08000544 	addi	zero,at,21
	{
		case 0:
			hexCount[ 0 ]++;
 8000394:	00820074 	movhi	r2,2049
 8000398:	10a8b104 	addi	r2,r2,-23868
 800039c:	10800017 	ldw	r2,0(r2)
 80003a0:	10c00044 	addi	r3,r2,1
 80003a4:	00820074 	movhi	r2,2049
 80003a8:	10a8b104 	addi	r2,r2,-23868
 80003ac:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, ZERO );
 80003b0:	00c01004 	movi	r3,64
 80003b4:	00840034 	movhi	r2,4096
 80003b8:	10841c04 	addi	r2,r2,4208
 80003bc:	10c00035 	stwio	r3,0(r2)
            break;
 80003c0:	00006f06 	br	8000580 <count+0x24c>
		case 1:
			hexCount[ 0 ]++;
 80003c4:	00820074 	movhi	r2,2049
 80003c8:	10a8b104 	addi	r2,r2,-23868
 80003cc:	10800017 	ldw	r2,0(r2)
 80003d0:	10c00044 	addi	r3,r2,1
 80003d4:	00820074 	movhi	r2,2049
 80003d8:	10a8b104 	addi	r2,r2,-23868
 80003dc:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, ONE );
 80003e0:	00c01e44 	movi	r3,121
 80003e4:	00840034 	movhi	r2,4096
 80003e8:	10841c04 	addi	r2,r2,4208
 80003ec:	10c00035 	stwio	r3,0(r2)
            break;
 80003f0:	00006306 	br	8000580 <count+0x24c>
		case 2:
			hexCount[ 0 ]++;
 80003f4:	00820074 	movhi	r2,2049
 80003f8:	10a8b104 	addi	r2,r2,-23868
 80003fc:	10800017 	ldw	r2,0(r2)
 8000400:	10c00044 	addi	r3,r2,1
 8000404:	00820074 	movhi	r2,2049
 8000408:	10a8b104 	addi	r2,r2,-23868
 800040c:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, TWO );
 8000410:	00c00904 	movi	r3,36
 8000414:	00840034 	movhi	r2,4096
 8000418:	10841c04 	addi	r2,r2,4208
 800041c:	10c00035 	stwio	r3,0(r2)
            break;
 8000420:	00005706 	br	8000580 <count+0x24c>
		case 3:
			hexCount[ 0 ]++;
 8000424:	00820074 	movhi	r2,2049
 8000428:	10a8b104 	addi	r2,r2,-23868
 800042c:	10800017 	ldw	r2,0(r2)
 8000430:	10c00044 	addi	r3,r2,1
 8000434:	00820074 	movhi	r2,2049
 8000438:	10a8b104 	addi	r2,r2,-23868
 800043c:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, THREE );
 8000440:	00c00c04 	movi	r3,48
 8000444:	00840034 	movhi	r2,4096
 8000448:	10841c04 	addi	r2,r2,4208
 800044c:	10c00035 	stwio	r3,0(r2)
            break;
 8000450:	00004b06 	br	8000580 <count+0x24c>
		case 4:
			hexCount[ 0 ]++;
 8000454:	00820074 	movhi	r2,2049
 8000458:	10a8b104 	addi	r2,r2,-23868
 800045c:	10800017 	ldw	r2,0(r2)
 8000460:	10c00044 	addi	r3,r2,1
 8000464:	00820074 	movhi	r2,2049
 8000468:	10a8b104 	addi	r2,r2,-23868
 800046c:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, FOUR );
 8000470:	00c00644 	movi	r3,25
 8000474:	00840034 	movhi	r2,4096
 8000478:	10841c04 	addi	r2,r2,4208
 800047c:	10c00035 	stwio	r3,0(r2)
            break;
 8000480:	00003f06 	br	8000580 <count+0x24c>
		case 5:
			hexCount[ 0 ]++;
 8000484:	00820074 	movhi	r2,2049
 8000488:	10a8b104 	addi	r2,r2,-23868
 800048c:	10800017 	ldw	r2,0(r2)
 8000490:	10c00044 	addi	r3,r2,1
 8000494:	00820074 	movhi	r2,2049
 8000498:	10a8b104 	addi	r2,r2,-23868
 800049c:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, FIVE );
 80004a0:	00c00484 	movi	r3,18
 80004a4:	00840034 	movhi	r2,4096
 80004a8:	10841c04 	addi	r2,r2,4208
 80004ac:	10c00035 	stwio	r3,0(r2)
            break;
 80004b0:	00003306 	br	8000580 <count+0x24c>
		case 6:
			hexCount[ 0 ]++;
 80004b4:	00820074 	movhi	r2,2049
 80004b8:	10a8b104 	addi	r2,r2,-23868
 80004bc:	10800017 	ldw	r2,0(r2)
 80004c0:	10c00044 	addi	r3,r2,1
 80004c4:	00820074 	movhi	r2,2049
 80004c8:	10a8b104 	addi	r2,r2,-23868
 80004cc:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, SIX );
 80004d0:	00c00084 	movi	r3,2
 80004d4:	00840034 	movhi	r2,4096
 80004d8:	10841c04 	addi	r2,r2,4208
 80004dc:	10c00035 	stwio	r3,0(r2)
            break;
 80004e0:	00002706 	br	8000580 <count+0x24c>
		case 7:
			hexCount[ 0 ]++;
 80004e4:	00820074 	movhi	r2,2049
 80004e8:	10a8b104 	addi	r2,r2,-23868
 80004ec:	10800017 	ldw	r2,0(r2)
 80004f0:	10c00044 	addi	r3,r2,1
 80004f4:	00820074 	movhi	r2,2049
 80004f8:	10a8b104 	addi	r2,r2,-23868
 80004fc:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, SEVEN );
 8000500:	00c01e04 	movi	r3,120
 8000504:	00840034 	movhi	r2,4096
 8000508:	10841c04 	addi	r2,r2,4208
 800050c:	10c00035 	stwio	r3,0(r2)
            break;
 8000510:	00001b06 	br	8000580 <count+0x24c>
		case 8:
			hexCount[ 0 ]++;
 8000514:	00820074 	movhi	r2,2049
 8000518:	10a8b104 	addi	r2,r2,-23868
 800051c:	10800017 	ldw	r2,0(r2)
 8000520:	10c00044 	addi	r3,r2,1
 8000524:	00820074 	movhi	r2,2049
 8000528:	10a8b104 	addi	r2,r2,-23868
 800052c:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, EIGHT );
 8000530:	0007883a 	mov	r3,zero
 8000534:	00840034 	movhi	r2,4096
 8000538:	10841c04 	addi	r2,r2,4208
 800053c:	10c00035 	stwio	r3,0(r2)
            break;
 8000540:	00000f06 	br	8000580 <count+0x24c>
		case 9:
			hexCount[ 0 ] = 0;
 8000544:	00820074 	movhi	r2,2049
 8000548:	10a8b104 	addi	r2,r2,-23868
 800054c:	10000015 	stw	zero,0(r2)
			hexCount[ 1 ]++;
 8000550:	00820074 	movhi	r2,2049
 8000554:	10a8b104 	addi	r2,r2,-23868
 8000558:	10800117 	ldw	r2,4(r2)
 800055c:	10c00044 	addi	r3,r2,1
 8000560:	00820074 	movhi	r2,2049
 8000564:	10a8b104 	addi	r2,r2,-23868
 8000568:	10c00115 	stw	r3,4(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, NINE );
 800056c:	00c00404 	movi	r3,16
 8000570:	00840034 	movhi	r2,4096
 8000574:	10841c04 	addi	r2,r2,4208
 8000578:	10c00035 	stwio	r3,0(r2)
            break;
 800057c:	0001883a 	nop
	}
	
	switch ( hexCount[ 1 ] )
 8000580:	00820074 	movhi	r2,2049
 8000584:	10a8b104 	addi	r2,r2,-23868
 8000588:	10800117 	ldw	r2,4(r2)
 800058c:	10c002a8 	cmpgeui	r3,r2,10
 8000590:	18004c1e 	bne	r3,zero,80006c4 <count+0x390>
 8000594:	100690ba 	slli	r3,r2,2
 8000598:	00820034 	movhi	r2,2048
 800059c:	10816b04 	addi	r2,r2,1452
 80005a0:	1885883a 	add	r2,r3,r2
 80005a4:	10800017 	ldw	r2,0(r2)
 80005a8:	1000683a 	jmp	r2
 80005ac:	080005d4 	ori	zero,at,23
 80005b0:	080005e8 	cmpgeui	zero,at,23
 80005b4:	080005fc 	xorhi	zero,at,23
 80005b8:	08000610 	cmplti	zero,at,24
 80005bc:	08000624 	muli	zero,at,24
 80005c0:	08000638 	rdprs	zero,at,24
 80005c4:	0800064c 	andi	zero,at,25
 80005c8:	08000660 	cmpeqi	zero,at,25
 80005cc:	08000674 	orhi	zero,at,25
 80005d0:	08000688 	cmpgei	zero,at,26
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, ZERO );
 80005d4:	00c01004 	movi	r3,64
 80005d8:	00840034 	movhi	r2,4096
 80005dc:	10841804 	addi	r2,r2,4192
 80005e0:	10c00035 	stwio	r3,0(r2)
			break;
 80005e4:	00003706 	br	80006c4 <count+0x390>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, ONE );
 80005e8:	00c01e44 	movi	r3,121
 80005ec:	00840034 	movhi	r2,4096
 80005f0:	10841804 	addi	r2,r2,4192
 80005f4:	10c00035 	stwio	r3,0(r2)
            break;
 80005f8:	00003206 	br	80006c4 <count+0x390>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, TWO );
 80005fc:	00c00904 	movi	r3,36
 8000600:	00840034 	movhi	r2,4096
 8000604:	10841804 	addi	r2,r2,4192
 8000608:	10c00035 	stwio	r3,0(r2)
            break;
 800060c:	00002d06 	br	80006c4 <count+0x390>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, THREE );
 8000610:	00c00c04 	movi	r3,48
 8000614:	00840034 	movhi	r2,4096
 8000618:	10841804 	addi	r2,r2,4192
 800061c:	10c00035 	stwio	r3,0(r2)
            break;
 8000620:	00002806 	br	80006c4 <count+0x390>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, FOUR );
 8000624:	00c00644 	movi	r3,25
 8000628:	00840034 	movhi	r2,4096
 800062c:	10841804 	addi	r2,r2,4192
 8000630:	10c00035 	stwio	r3,0(r2)
            break;
 8000634:	00002306 	br	80006c4 <count+0x390>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, FIVE );
 8000638:	00c00484 	movi	r3,18
 800063c:	00840034 	movhi	r2,4096
 8000640:	10841804 	addi	r2,r2,4192
 8000644:	10c00035 	stwio	r3,0(r2)
            break;
 8000648:	00001e06 	br	80006c4 <count+0x390>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, SIX );
 800064c:	00c00084 	movi	r3,2
 8000650:	00840034 	movhi	r2,4096
 8000654:	10841804 	addi	r2,r2,4192
 8000658:	10c00035 	stwio	r3,0(r2)
            break;
 800065c:	00001906 	br	80006c4 <count+0x390>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, SEVEN );
 8000660:	00c01e04 	movi	r3,120
 8000664:	00840034 	movhi	r2,4096
 8000668:	10841804 	addi	r2,r2,4192
 800066c:	10c00035 	stwio	r3,0(r2)
            break;
 8000670:	00001406 	br	80006c4 <count+0x390>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, EIGHT );
 8000674:	0007883a 	mov	r3,zero
 8000678:	00840034 	movhi	r2,4096
 800067c:	10841804 	addi	r2,r2,4192
 8000680:	10c00035 	stwio	r3,0(r2)
            break;
 8000684:	00000f06 	br	80006c4 <count+0x390>
		case 9:
			hexCount[ 1 ] = 0;
 8000688:	00820074 	movhi	r2,2049
 800068c:	10a8b104 	addi	r2,r2,-23868
 8000690:	10000115 	stw	zero,4(r2)
			hexCount[ 2 ]++;
 8000694:	00820074 	movhi	r2,2049
 8000698:	10a8b104 	addi	r2,r2,-23868
 800069c:	10800217 	ldw	r2,8(r2)
 80006a0:	10c00044 	addi	r3,r2,1
 80006a4:	00820074 	movhi	r2,2049
 80006a8:	10a8b104 	addi	r2,r2,-23868
 80006ac:	10c00215 	stw	r3,8(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, NINE );
 80006b0:	00c00404 	movi	r3,16
 80006b4:	00840034 	movhi	r2,4096
 80006b8:	10841804 	addi	r2,r2,4192
 80006bc:	10c00035 	stwio	r3,0(r2)
            break;
 80006c0:	0001883a 	nop
	}
	
	switch ( hexCount[ 2 ] )
 80006c4:	00820074 	movhi	r2,2049
 80006c8:	10a8b104 	addi	r2,r2,-23868
 80006cc:	10800217 	ldw	r2,8(r2)
 80006d0:	10c002a8 	cmpgeui	r3,r2,10
 80006d4:	18004c1e 	bne	r3,zero,8000808 <count+0x4d4>
 80006d8:	100690ba 	slli	r3,r2,2
 80006dc:	00820034 	movhi	r2,2048
 80006e0:	1081bc04 	addi	r2,r2,1776
 80006e4:	1885883a 	add	r2,r3,r2
 80006e8:	10800017 	ldw	r2,0(r2)
 80006ec:	1000683a 	jmp	r2
 80006f0:	08000718 	cmpnei	zero,at,28
 80006f4:	0800072c 	andhi	zero,at,28
 80006f8:	08000740 	call	800074 <__alt_mem_new_sdram_controller_0-0x77fff8c>
 80006fc:	08000754 	ori	zero,at,29
 8000700:	08000768 	cmpgeui	zero,at,29
 8000704:	0800077c 	xorhi	zero,at,29
 8000708:	08000790 	cmplti	zero,at,30
 800070c:	080007a4 	muli	zero,at,30
 8000710:	080007b8 	rdprs	zero,at,30
 8000714:	080007cc 	andi	zero,at,31
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, ZERO );
 8000718:	00c01004 	movi	r3,64
 800071c:	00840034 	movhi	r2,4096
 8000720:	10841404 	addi	r2,r2,4176
 8000724:	10c00035 	stwio	r3,0(r2)
            break;
 8000728:	00003706 	br	8000808 <count+0x4d4>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, ONE );
 800072c:	00c01e44 	movi	r3,121
 8000730:	00840034 	movhi	r2,4096
 8000734:	10841404 	addi	r2,r2,4176
 8000738:	10c00035 	stwio	r3,0(r2)
            break;
 800073c:	00003206 	br	8000808 <count+0x4d4>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, TWO );
 8000740:	00c00904 	movi	r3,36
 8000744:	00840034 	movhi	r2,4096
 8000748:	10841404 	addi	r2,r2,4176
 800074c:	10c00035 	stwio	r3,0(r2)
            break;
 8000750:	00002d06 	br	8000808 <count+0x4d4>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, THREE );
 8000754:	00c00c04 	movi	r3,48
 8000758:	00840034 	movhi	r2,4096
 800075c:	10841404 	addi	r2,r2,4176
 8000760:	10c00035 	stwio	r3,0(r2)
            break;
 8000764:	00002806 	br	8000808 <count+0x4d4>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, FOUR );
 8000768:	00c00644 	movi	r3,25
 800076c:	00840034 	movhi	r2,4096
 8000770:	10841404 	addi	r2,r2,4176
 8000774:	10c00035 	stwio	r3,0(r2)
            break;
 8000778:	00002306 	br	8000808 <count+0x4d4>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, FIVE );
 800077c:	00c00484 	movi	r3,18
 8000780:	00840034 	movhi	r2,4096
 8000784:	10841404 	addi	r2,r2,4176
 8000788:	10c00035 	stwio	r3,0(r2)
            break;
 800078c:	00001e06 	br	8000808 <count+0x4d4>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, SIX );
 8000790:	00c00084 	movi	r3,2
 8000794:	00840034 	movhi	r2,4096
 8000798:	10841404 	addi	r2,r2,4176
 800079c:	10c00035 	stwio	r3,0(r2)
            break;
 80007a0:	00001906 	br	8000808 <count+0x4d4>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, SEVEN );
 80007a4:	00c01e04 	movi	r3,120
 80007a8:	00840034 	movhi	r2,4096
 80007ac:	10841404 	addi	r2,r2,4176
 80007b0:	10c00035 	stwio	r3,0(r2)
            break;
 80007b4:	00001406 	br	8000808 <count+0x4d4>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, EIGHT );
 80007b8:	0007883a 	mov	r3,zero
 80007bc:	00840034 	movhi	r2,4096
 80007c0:	10841404 	addi	r2,r2,4176
 80007c4:	10c00035 	stwio	r3,0(r2)
            break;
 80007c8:	00000f06 	br	8000808 <count+0x4d4>
		case 9:
			hexCount[ 2 ] = 0;
 80007cc:	00820074 	movhi	r2,2049
 80007d0:	10a8b104 	addi	r2,r2,-23868
 80007d4:	10000215 	stw	zero,8(r2)
			hexCount[ 3 ]++;
 80007d8:	00820074 	movhi	r2,2049
 80007dc:	10a8b104 	addi	r2,r2,-23868
 80007e0:	10800317 	ldw	r2,12(r2)
 80007e4:	10c00044 	addi	r3,r2,1
 80007e8:	00820074 	movhi	r2,2049
 80007ec:	10a8b104 	addi	r2,r2,-23868
 80007f0:	10c00315 	stw	r3,12(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, NINE );
 80007f4:	00c00404 	movi	r3,16
 80007f8:	00840034 	movhi	r2,4096
 80007fc:	10841404 	addi	r2,r2,4176
 8000800:	10c00035 	stwio	r3,0(r2)
            break;
 8000804:	0001883a 	nop
	}
	
	switch ( hexCount[ 3 ] )
 8000808:	00820074 	movhi	r2,2049
 800080c:	10a8b104 	addi	r2,r2,-23868
 8000810:	10800317 	ldw	r2,12(r2)
 8000814:	10c002a8 	cmpgeui	r3,r2,10
 8000818:	18004c1e 	bne	r3,zero,800094c <count+0x618>
 800081c:	100690ba 	slli	r3,r2,2
 8000820:	00820034 	movhi	r2,2048
 8000824:	10820d04 	addi	r2,r2,2100
 8000828:	1885883a 	add	r2,r3,r2
 800082c:	10800017 	ldw	r2,0(r2)
 8000830:	1000683a 	jmp	r2
 8000834:	0800085c 	xori	zero,at,33
 8000838:	08000870 	cmpltui	zero,at,33
 800083c:	08000884 	addi	zero,at,34
 8000840:	08000898 	cmpnei	zero,at,34
 8000844:	080008ac 	andhi	zero,at,34
 8000848:	080008c0 	call	80008c <__alt_mem_new_sdram_controller_0-0x77fff74>
 800084c:	080008d4 	ori	zero,at,35
 8000850:	080008e8 	cmpgeui	zero,at,35
 8000854:	080008fc 	xorhi	zero,at,35
 8000858:	08000910 	cmplti	zero,at,36
	{
		case 0:
			
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, ZERO );
 800085c:	00c01004 	movi	r3,64
 8000860:	00840034 	movhi	r2,4096
 8000864:	10841004 	addi	r2,r2,4160
 8000868:	10c00035 	stwio	r3,0(r2)
            break;
 800086c:	00003706 	br	800094c <count+0x618>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, ONE );
 8000870:	00c01e44 	movi	r3,121
 8000874:	00840034 	movhi	r2,4096
 8000878:	10841004 	addi	r2,r2,4160
 800087c:	10c00035 	stwio	r3,0(r2)
            break;
 8000880:	00003206 	br	800094c <count+0x618>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, TWO );
 8000884:	00c00904 	movi	r3,36
 8000888:	00840034 	movhi	r2,4096
 800088c:	10841004 	addi	r2,r2,4160
 8000890:	10c00035 	stwio	r3,0(r2)
            break;
 8000894:	00002d06 	br	800094c <count+0x618>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, THREE );
 8000898:	00c00c04 	movi	r3,48
 800089c:	00840034 	movhi	r2,4096
 80008a0:	10841004 	addi	r2,r2,4160
 80008a4:	10c00035 	stwio	r3,0(r2)
            break;
 80008a8:	00002806 	br	800094c <count+0x618>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, FOUR );
 80008ac:	00c00644 	movi	r3,25
 80008b0:	00840034 	movhi	r2,4096
 80008b4:	10841004 	addi	r2,r2,4160
 80008b8:	10c00035 	stwio	r3,0(r2)
            break;
 80008bc:	00002306 	br	800094c <count+0x618>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, FIVE );
 80008c0:	00c00484 	movi	r3,18
 80008c4:	00840034 	movhi	r2,4096
 80008c8:	10841004 	addi	r2,r2,4160
 80008cc:	10c00035 	stwio	r3,0(r2)
            break;
 80008d0:	00001e06 	br	800094c <count+0x618>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, SIX );
 80008d4:	00c00084 	movi	r3,2
 80008d8:	00840034 	movhi	r2,4096
 80008dc:	10841004 	addi	r2,r2,4160
 80008e0:	10c00035 	stwio	r3,0(r2)
            break;
 80008e4:	00001906 	br	800094c <count+0x618>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, SEVEN );
 80008e8:	00c01e04 	movi	r3,120
 80008ec:	00840034 	movhi	r2,4096
 80008f0:	10841004 	addi	r2,r2,4160
 80008f4:	10c00035 	stwio	r3,0(r2)
            break;
 80008f8:	00001406 	br	800094c <count+0x618>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, EIGHT );
 80008fc:	0007883a 	mov	r3,zero
 8000900:	00840034 	movhi	r2,4096
 8000904:	10841004 	addi	r2,r2,4160
 8000908:	10c00035 	stwio	r3,0(r2)
            break;
 800090c:	00000f06 	br	800094c <count+0x618>
		case 9:
			hexCount[ 3 ] = 0;
 8000910:	00820074 	movhi	r2,2049
 8000914:	10a8b104 	addi	r2,r2,-23868
 8000918:	10000315 	stw	zero,12(r2)
			hexCount[ 4 ]++;
 800091c:	00820074 	movhi	r2,2049
 8000920:	10a8b104 	addi	r2,r2,-23868
 8000924:	10800417 	ldw	r2,16(r2)
 8000928:	10c00044 	addi	r3,r2,1
 800092c:	00820074 	movhi	r2,2049
 8000930:	10a8b104 	addi	r2,r2,-23868
 8000934:	10c00415 	stw	r3,16(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, NINE );
 8000938:	00c00404 	movi	r3,16
 800093c:	00840034 	movhi	r2,4096
 8000940:	10841004 	addi	r2,r2,4160
 8000944:	10c00035 	stwio	r3,0(r2)
            break;
 8000948:	0001883a 	nop
	}
	
	switch ( hexCount[ 4 ] )
 800094c:	00820074 	movhi	r2,2049
 8000950:	10a8b104 	addi	r2,r2,-23868
 8000954:	10800417 	ldw	r2,16(r2)
 8000958:	10c002a8 	cmpgeui	r3,r2,10
 800095c:	18004c1e 	bne	r3,zero,8000a90 <count+0x75c>
 8000960:	100690ba 	slli	r3,r2,2
 8000964:	00820034 	movhi	r2,2048
 8000968:	10825e04 	addi	r2,r2,2424
 800096c:	1885883a 	add	r2,r3,r2
 8000970:	10800017 	ldw	r2,0(r2)
 8000974:	1000683a 	jmp	r2
 8000978:	080009a0 	cmpeqi	zero,at,38
 800097c:	080009b4 	orhi	zero,at,38
 8000980:	080009c8 	cmpgei	zero,at,39
 8000984:	080009dc 	xori	zero,at,39
 8000988:	080009f0 	cmpltui	zero,at,39
 800098c:	08000a04 	addi	zero,at,40
 8000990:	08000a18 	cmpnei	zero,at,40
 8000994:	08000a2c 	andhi	zero,at,40
 8000998:	08000a40 	call	8000a4 <__alt_mem_new_sdram_controller_0-0x77fff5c>
 800099c:	08000a54 	ori	zero,at,41
	{
		case 0:
			
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, ZERO );
 80009a0:	00c01004 	movi	r3,64
 80009a4:	00840034 	movhi	r2,4096
 80009a8:	10840c04 	addi	r2,r2,4144
 80009ac:	10c00035 	stwio	r3,0(r2)
            break;
 80009b0:	00003706 	br	8000a90 <count+0x75c>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, ONE );
 80009b4:	00c01e44 	movi	r3,121
 80009b8:	00840034 	movhi	r2,4096
 80009bc:	10840c04 	addi	r2,r2,4144
 80009c0:	10c00035 	stwio	r3,0(r2)
            break;
 80009c4:	00003206 	br	8000a90 <count+0x75c>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, TWO );
 80009c8:	00c00904 	movi	r3,36
 80009cc:	00840034 	movhi	r2,4096
 80009d0:	10840c04 	addi	r2,r2,4144
 80009d4:	10c00035 	stwio	r3,0(r2)
            break;
 80009d8:	00002d06 	br	8000a90 <count+0x75c>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, THREE );
 80009dc:	00c00c04 	movi	r3,48
 80009e0:	00840034 	movhi	r2,4096
 80009e4:	10840c04 	addi	r2,r2,4144
 80009e8:	10c00035 	stwio	r3,0(r2)
            break;
 80009ec:	00002806 	br	8000a90 <count+0x75c>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, FOUR );
 80009f0:	00c00644 	movi	r3,25
 80009f4:	00840034 	movhi	r2,4096
 80009f8:	10840c04 	addi	r2,r2,4144
 80009fc:	10c00035 	stwio	r3,0(r2)
            break;
 8000a00:	00002306 	br	8000a90 <count+0x75c>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, FIVE );
 8000a04:	00c00484 	movi	r3,18
 8000a08:	00840034 	movhi	r2,4096
 8000a0c:	10840c04 	addi	r2,r2,4144
 8000a10:	10c00035 	stwio	r3,0(r2)
            break;
 8000a14:	00001e06 	br	8000a90 <count+0x75c>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, SIX );
 8000a18:	00c00084 	movi	r3,2
 8000a1c:	00840034 	movhi	r2,4096
 8000a20:	10840c04 	addi	r2,r2,4144
 8000a24:	10c00035 	stwio	r3,0(r2)
            break;
 8000a28:	00001906 	br	8000a90 <count+0x75c>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, SEVEN );
 8000a2c:	00c01e04 	movi	r3,120
 8000a30:	00840034 	movhi	r2,4096
 8000a34:	10840c04 	addi	r2,r2,4144
 8000a38:	10c00035 	stwio	r3,0(r2)
            break;
 8000a3c:	00001406 	br	8000a90 <count+0x75c>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, EIGHT );
 8000a40:	0007883a 	mov	r3,zero
 8000a44:	00840034 	movhi	r2,4096
 8000a48:	10840c04 	addi	r2,r2,4144
 8000a4c:	10c00035 	stwio	r3,0(r2)
            break;
 8000a50:	00000f06 	br	8000a90 <count+0x75c>
		case 9:
			hexCount[ 4 ] = 0;
 8000a54:	00820074 	movhi	r2,2049
 8000a58:	10a8b104 	addi	r2,r2,-23868
 8000a5c:	10000415 	stw	zero,16(r2)
			hexCount[ 5 ]++;
 8000a60:	00820074 	movhi	r2,2049
 8000a64:	10a8b104 	addi	r2,r2,-23868
 8000a68:	10800517 	ldw	r2,20(r2)
 8000a6c:	10c00044 	addi	r3,r2,1
 8000a70:	00820074 	movhi	r2,2049
 8000a74:	10a8b104 	addi	r2,r2,-23868
 8000a78:	10c00515 	stw	r3,20(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, NINE );
 8000a7c:	00c00404 	movi	r3,16
 8000a80:	00840034 	movhi	r2,4096
 8000a84:	10840c04 	addi	r2,r2,4144
 8000a88:	10c00035 	stwio	r3,0(r2)
            break;
 8000a8c:	0001883a 	nop
	}

	switch ( hexCount[ 5 ] )
 8000a90:	00820074 	movhi	r2,2049
 8000a94:	10a8b104 	addi	r2,r2,-23868
 8000a98:	10800517 	ldw	r2,20(r2)
 8000a9c:	10c002a8 	cmpgeui	r3,r2,10
 8000aa0:	18004c1e 	bne	r3,zero,8000bd4 <count+0x8a0>
 8000aa4:	100690ba 	slli	r3,r2,2
 8000aa8:	00820034 	movhi	r2,2048
 8000aac:	1082af04 	addi	r2,r2,2748
 8000ab0:	1885883a 	add	r2,r3,r2
 8000ab4:	10800017 	ldw	r2,0(r2)
 8000ab8:	1000683a 	jmp	r2
 8000abc:	08000ae4 	muli	zero,at,43
 8000ac0:	08000af8 	rdprs	zero,at,43
 8000ac4:	08000b0c 	andi	zero,at,44
 8000ac8:	08000b20 	cmpeqi	zero,at,44
 8000acc:	08000b34 	orhi	zero,at,44
 8000ad0:	08000b48 	cmpgei	zero,at,45
 8000ad4:	08000b5c 	xori	zero,at,45
 8000ad8:	08000b70 	cmpltui	zero,at,45
 8000adc:	08000b84 	addi	zero,at,46
 8000ae0:	08000b98 	cmpnei	zero,at,46
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, ZERO );
 8000ae4:	00c01004 	movi	r3,64
 8000ae8:	00840034 	movhi	r2,4096
 8000aec:	10840804 	addi	r2,r2,4128
 8000af0:	10c00035 	stwio	r3,0(r2)
            break;
 8000af4:	00003706 	br	8000bd4 <count+0x8a0>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, ONE );
 8000af8:	00c01e44 	movi	r3,121
 8000afc:	00840034 	movhi	r2,4096
 8000b00:	10840804 	addi	r2,r2,4128
 8000b04:	10c00035 	stwio	r3,0(r2)
            break;
 8000b08:	00003206 	br	8000bd4 <count+0x8a0>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, TWO );
 8000b0c:	00c00904 	movi	r3,36
 8000b10:	00840034 	movhi	r2,4096
 8000b14:	10840804 	addi	r2,r2,4128
 8000b18:	10c00035 	stwio	r3,0(r2)
            break;
 8000b1c:	00002d06 	br	8000bd4 <count+0x8a0>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, THREE );
 8000b20:	00c00c04 	movi	r3,48
 8000b24:	00840034 	movhi	r2,4096
 8000b28:	10840804 	addi	r2,r2,4128
 8000b2c:	10c00035 	stwio	r3,0(r2)
            break;
 8000b30:	00002806 	br	8000bd4 <count+0x8a0>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, FOUR );
 8000b34:	00c00644 	movi	r3,25
 8000b38:	00840034 	movhi	r2,4096
 8000b3c:	10840804 	addi	r2,r2,4128
 8000b40:	10c00035 	stwio	r3,0(r2)
            break;
 8000b44:	00002306 	br	8000bd4 <count+0x8a0>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, FIVE );
 8000b48:	00c00484 	movi	r3,18
 8000b4c:	00840034 	movhi	r2,4096
 8000b50:	10840804 	addi	r2,r2,4128
 8000b54:	10c00035 	stwio	r3,0(r2)
            break;
 8000b58:	00001e06 	br	8000bd4 <count+0x8a0>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, SIX );
 8000b5c:	00c00084 	movi	r3,2
 8000b60:	00840034 	movhi	r2,4096
 8000b64:	10840804 	addi	r2,r2,4128
 8000b68:	10c00035 	stwio	r3,0(r2)
            break;
 8000b6c:	00001906 	br	8000bd4 <count+0x8a0>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, SEVEN );
 8000b70:	00c01e04 	movi	r3,120
 8000b74:	00840034 	movhi	r2,4096
 8000b78:	10840804 	addi	r2,r2,4128
 8000b7c:	10c00035 	stwio	r3,0(r2)
            break;
 8000b80:	00001406 	br	8000bd4 <count+0x8a0>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, EIGHT );
 8000b84:	0007883a 	mov	r3,zero
 8000b88:	00840034 	movhi	r2,4096
 8000b8c:	10840804 	addi	r2,r2,4128
 8000b90:	10c00035 	stwio	r3,0(r2)
            break;
 8000b94:	00000f06 	br	8000bd4 <count+0x8a0>
		case 9:
			hexCount[ 5 ] = 0;
 8000b98:	00820074 	movhi	r2,2049
 8000b9c:	10a8b104 	addi	r2,r2,-23868
 8000ba0:	10000515 	stw	zero,20(r2)
			hexCount[ 6 ]++;
 8000ba4:	00820074 	movhi	r2,2049
 8000ba8:	10a8b104 	addi	r2,r2,-23868
 8000bac:	10800617 	ldw	r2,24(r2)
 8000bb0:	10c00044 	addi	r3,r2,1
 8000bb4:	00820074 	movhi	r2,2049
 8000bb8:	10a8b104 	addi	r2,r2,-23868
 8000bbc:	10c00615 	stw	r3,24(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, NINE );
 8000bc0:	00c00404 	movi	r3,16
 8000bc4:	00840034 	movhi	r2,4096
 8000bc8:	10840804 	addi	r2,r2,4128
 8000bcc:	10c00035 	stwio	r3,0(r2)
            break;
 8000bd0:	0001883a 	nop
	}

	switch ( hexCount[ 6 ] )
 8000bd4:	00820074 	movhi	r2,2049
 8000bd8:	10a8b104 	addi	r2,r2,-23868
 8000bdc:	10800617 	ldw	r2,24(r2)
 8000be0:	10c002a8 	cmpgeui	r3,r2,10
 8000be4:	18004c1e 	bne	r3,zero,8000d18 <count+0x9e4>
 8000be8:	100690ba 	slli	r3,r2,2
 8000bec:	00820034 	movhi	r2,2048
 8000bf0:	10830004 	addi	r2,r2,3072
 8000bf4:	1885883a 	add	r2,r3,r2
 8000bf8:	10800017 	ldw	r2,0(r2)
 8000bfc:	1000683a 	jmp	r2
 8000c00:	08000c28 	cmpgeui	zero,at,48
 8000c04:	08000c3c 	xorhi	zero,at,48
 8000c08:	08000c50 	cmplti	zero,at,49
 8000c0c:	08000c64 	muli	zero,at,49
 8000c10:	08000c78 	rdprs	zero,at,49
 8000c14:	08000c8c 	andi	zero,at,50
 8000c18:	08000ca0 	cmpeqi	zero,at,50
 8000c1c:	08000cb4 	orhi	zero,at,50
 8000c20:	08000cc8 	cmpgei	zero,at,51
 8000c24:	08000cdc 	xori	zero,at,51
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, ZERO );
 8000c28:	00c01004 	movi	r3,64
 8000c2c:	00840034 	movhi	r2,4096
 8000c30:	10840404 	addi	r2,r2,4112
 8000c34:	10c00035 	stwio	r3,0(r2)
            break;
 8000c38:	00003706 	br	8000d18 <count+0x9e4>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, ONE );
 8000c3c:	00c01e44 	movi	r3,121
 8000c40:	00840034 	movhi	r2,4096
 8000c44:	10840404 	addi	r2,r2,4112
 8000c48:	10c00035 	stwio	r3,0(r2)
            break;
 8000c4c:	00003206 	br	8000d18 <count+0x9e4>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, TWO );
 8000c50:	00c00904 	movi	r3,36
 8000c54:	00840034 	movhi	r2,4096
 8000c58:	10840404 	addi	r2,r2,4112
 8000c5c:	10c00035 	stwio	r3,0(r2)
            break;
 8000c60:	00002d06 	br	8000d18 <count+0x9e4>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, THREE );
 8000c64:	00c00c04 	movi	r3,48
 8000c68:	00840034 	movhi	r2,4096
 8000c6c:	10840404 	addi	r2,r2,4112
 8000c70:	10c00035 	stwio	r3,0(r2)
            break;
 8000c74:	00002806 	br	8000d18 <count+0x9e4>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, FOUR );
 8000c78:	00c00644 	movi	r3,25
 8000c7c:	00840034 	movhi	r2,4096
 8000c80:	10840404 	addi	r2,r2,4112
 8000c84:	10c00035 	stwio	r3,0(r2)
            break;
 8000c88:	00002306 	br	8000d18 <count+0x9e4>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, FIVE );
 8000c8c:	00c00484 	movi	r3,18
 8000c90:	00840034 	movhi	r2,4096
 8000c94:	10840404 	addi	r2,r2,4112
 8000c98:	10c00035 	stwio	r3,0(r2)
            break;
 8000c9c:	00001e06 	br	8000d18 <count+0x9e4>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, SIX );
 8000ca0:	00c00084 	movi	r3,2
 8000ca4:	00840034 	movhi	r2,4096
 8000ca8:	10840404 	addi	r2,r2,4112
 8000cac:	10c00035 	stwio	r3,0(r2)
            break;
 8000cb0:	00001906 	br	8000d18 <count+0x9e4>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, SEVEN );
 8000cb4:	00c01e04 	movi	r3,120
 8000cb8:	00840034 	movhi	r2,4096
 8000cbc:	10840404 	addi	r2,r2,4112
 8000cc0:	10c00035 	stwio	r3,0(r2)
            break;
 8000cc4:	00001406 	br	8000d18 <count+0x9e4>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, EIGHT );
 8000cc8:	0007883a 	mov	r3,zero
 8000ccc:	00840034 	movhi	r2,4096
 8000cd0:	10840404 	addi	r2,r2,4112
 8000cd4:	10c00035 	stwio	r3,0(r2)
            break;
 8000cd8:	00000f06 	br	8000d18 <count+0x9e4>
		case 9:
			hexCount[ 6 ] = 0;
 8000cdc:	00820074 	movhi	r2,2049
 8000ce0:	10a8b104 	addi	r2,r2,-23868
 8000ce4:	10000615 	stw	zero,24(r2)
			hexCount[ 7 ]++;
 8000ce8:	00820074 	movhi	r2,2049
 8000cec:	10a8b104 	addi	r2,r2,-23868
 8000cf0:	10800717 	ldw	r2,28(r2)
 8000cf4:	10c00044 	addi	r3,r2,1
 8000cf8:	00820074 	movhi	r2,2049
 8000cfc:	10a8b104 	addi	r2,r2,-23868
 8000d00:	10c00715 	stw	r3,28(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, NINE );
 8000d04:	00c00404 	movi	r3,16
 8000d08:	00840034 	movhi	r2,4096
 8000d0c:	10840404 	addi	r2,r2,4112
 8000d10:	10c00035 	stwio	r3,0(r2)
            break;
 8000d14:	0001883a 	nop
	}

	switch ( hexCount[ 7 ] )
 8000d18:	00820074 	movhi	r2,2049
 8000d1c:	10a8b104 	addi	r2,r2,-23868
 8000d20:	10800717 	ldw	r2,28(r2)
 8000d24:	10c002a8 	cmpgeui	r3,r2,10
 8000d28:	1800451e 	bne	r3,zero,8000e40 <count+0xb0c>
 8000d2c:	100690ba 	slli	r3,r2,2
 8000d30:	00820034 	movhi	r2,2048
 8000d34:	10835104 	addi	r2,r2,3396
 8000d38:	1885883a 	add	r2,r3,r2
 8000d3c:	10800017 	ldw	r2,0(r2)
 8000d40:	1000683a 	jmp	r2
 8000d44:	08000d6c 	andhi	zero,at,53
 8000d48:	08000d80 	call	8000d8 <__alt_mem_new_sdram_controller_0-0x77fff28>
 8000d4c:	08000d94 	ori	zero,at,54
 8000d50:	08000da8 	cmpgeui	zero,at,54
 8000d54:	08000dbc 	xorhi	zero,at,54
 8000d58:	08000dd0 	cmplti	zero,at,55
 8000d5c:	08000de4 	muli	zero,at,55
 8000d60:	08000df8 	rdprs	zero,at,55
 8000d64:	08000e0c 	andi	zero,at,56
 8000d68:	08000e20 	cmpeqi	zero,at,56
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, ZERO );
 8000d6c:	00c01004 	movi	r3,64
 8000d70:	00840034 	movhi	r2,4096
 8000d74:	10840004 	addi	r2,r2,4096
 8000d78:	10c00035 	stwio	r3,0(r2)
            break;
 8000d7c:	00003006 	br	8000e40 <count+0xb0c>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, ONE );
 8000d80:	00c01e44 	movi	r3,121
 8000d84:	00840034 	movhi	r2,4096
 8000d88:	10840004 	addi	r2,r2,4096
 8000d8c:	10c00035 	stwio	r3,0(r2)
            break;
 8000d90:	00002b06 	br	8000e40 <count+0xb0c>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, TWO );
 8000d94:	00c00904 	movi	r3,36
 8000d98:	00840034 	movhi	r2,4096
 8000d9c:	10840004 	addi	r2,r2,4096
 8000da0:	10c00035 	stwio	r3,0(r2)
            break;
 8000da4:	00002606 	br	8000e40 <count+0xb0c>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, THREE );
 8000da8:	00c00c04 	movi	r3,48
 8000dac:	00840034 	movhi	r2,4096
 8000db0:	10840004 	addi	r2,r2,4096
 8000db4:	10c00035 	stwio	r3,0(r2)
            break;
 8000db8:	00002106 	br	8000e40 <count+0xb0c>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, FOUR );
 8000dbc:	00c00644 	movi	r3,25
 8000dc0:	00840034 	movhi	r2,4096
 8000dc4:	10840004 	addi	r2,r2,4096
 8000dc8:	10c00035 	stwio	r3,0(r2)
            break;
 8000dcc:	00001c06 	br	8000e40 <count+0xb0c>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, FIVE );
 8000dd0:	00c00484 	movi	r3,18
 8000dd4:	00840034 	movhi	r2,4096
 8000dd8:	10840004 	addi	r2,r2,4096
 8000ddc:	10c00035 	stwio	r3,0(r2)
            break;
 8000de0:	00001706 	br	8000e40 <count+0xb0c>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, SIX );
 8000de4:	00c00084 	movi	r3,2
 8000de8:	00840034 	movhi	r2,4096
 8000dec:	10840004 	addi	r2,r2,4096
 8000df0:	10c00035 	stwio	r3,0(r2)
            break;
 8000df4:	00001206 	br	8000e40 <count+0xb0c>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, SEVEN );
 8000df8:	00c01e04 	movi	r3,120
 8000dfc:	00840034 	movhi	r2,4096
 8000e00:	10840004 	addi	r2,r2,4096
 8000e04:	10c00035 	stwio	r3,0(r2)
            break;
 8000e08:	00000d06 	br	8000e40 <count+0xb0c>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, EIGHT );
 8000e0c:	0007883a 	mov	r3,zero
 8000e10:	00840034 	movhi	r2,4096
 8000e14:	10840004 	addi	r2,r2,4096
 8000e18:	10c00035 	stwio	r3,0(r2)
            break;
 8000e1c:	00000806 	br	8000e40 <count+0xb0c>
		case 9:
			hexCount[ 7 ] = 0;
 8000e20:	00820074 	movhi	r2,2049
 8000e24:	10a8b104 	addi	r2,r2,-23868
 8000e28:	10000715 	stw	zero,28(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, NINE );
 8000e2c:	00c00404 	movi	r3,16
 8000e30:	00840034 	movhi	r2,4096
 8000e34:	10840004 	addi	r2,r2,4096
 8000e38:	10c00035 	stwio	r3,0(r2)
			break;
 8000e3c:	0001883a 	nop
	}
}
 8000e40:	0001883a 	nop
 8000e44:	e037883a 	mov	sp,fp
 8000e48:	df000017 	ldw	fp,0(sp)
 8000e4c:	dec00104 	addi	sp,sp,4
 8000e50:	f800283a 	ret

08000e54 <randLights>:

// Randomly light up the 7-seg displays
void randLights () {
 8000e54:	defffd04 	addi	sp,sp,-12
 8000e58:	dfc00215 	stw	ra,8(sp)
 8000e5c:	df000115 	stw	fp,4(sp)
 8000e60:	df000104 	addi	fp,sp,4
  // Generate a random 7 bit number to correspond to each 7-seg display
  int* rand_config = decToBinary(rand() % 255);
 8000e64:	80018bc0 	call	80018bc <rand>
 8000e68:	01403fc4 	movi	r5,255
 8000e6c:	1009883a 	mov	r4,r2
 8000e70:	80016a00 	call	80016a0 <__modsi3>
 8000e74:	1009883a 	mov	r4,r2
 8000e78:	80002900 	call	8000290 <decToBinary>
 8000e7c:	e0bfff15 	stw	r2,-4(fp)

  // Read each bit and light up positive bits
  if (rand_config[0] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
 8000e80:	e0bfff17 	ldw	r2,-4(fp)
 8000e84:	10800017 	ldw	r2,0(r2)
 8000e88:	1000051e 	bne	r2,zero,8000ea0 <randLights+0x4c>
 8000e8c:	00c01fc4 	movi	r3,127
 8000e90:	00840034 	movhi	r2,4096
 8000e94:	10841c04 	addi	r2,r2,4208
 8000e98:	10c00035 	stwio	r3,0(r2)
 8000e9c:	00000406 	br	8000eb0 <randLights+0x5c>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0);
 8000ea0:	0007883a 	mov	r3,zero
 8000ea4:	00840034 	movhi	r2,4096
 8000ea8:	10841c04 	addi	r2,r2,4208
 8000eac:	10c00035 	stwio	r3,0(r2)
  if (rand_config[1] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 8000eb0:	e0bfff17 	ldw	r2,-4(fp)
 8000eb4:	10800104 	addi	r2,r2,4
 8000eb8:	10800017 	ldw	r2,0(r2)
 8000ebc:	1000051e 	bne	r2,zero,8000ed4 <randLights+0x80>
 8000ec0:	00c01fc4 	movi	r3,127
 8000ec4:	00840034 	movhi	r2,4096
 8000ec8:	10841804 	addi	r2,r2,4192
 8000ecc:	10c00035 	stwio	r3,0(r2)
 8000ed0:	00000406 	br	8000ee4 <randLights+0x90>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0);
 8000ed4:	0007883a 	mov	r3,zero
 8000ed8:	00840034 	movhi	r2,4096
 8000edc:	10841804 	addi	r2,r2,4192
 8000ee0:	10c00035 	stwio	r3,0(r2)
  if (rand_config[2] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 8000ee4:	e0bfff17 	ldw	r2,-4(fp)
 8000ee8:	10800204 	addi	r2,r2,8
 8000eec:	10800017 	ldw	r2,0(r2)
 8000ef0:	1000051e 	bne	r2,zero,8000f08 <randLights+0xb4>
 8000ef4:	00c01fc4 	movi	r3,127
 8000ef8:	00840034 	movhi	r2,4096
 8000efc:	10841404 	addi	r2,r2,4176
 8000f00:	10c00035 	stwio	r3,0(r2)
 8000f04:	00000406 	br	8000f18 <randLights+0xc4>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0);
 8000f08:	0007883a 	mov	r3,zero
 8000f0c:	00840034 	movhi	r2,4096
 8000f10:	10841404 	addi	r2,r2,4176
 8000f14:	10c00035 	stwio	r3,0(r2)
  if (rand_config[3] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 8000f18:	e0bfff17 	ldw	r2,-4(fp)
 8000f1c:	10800304 	addi	r2,r2,12
 8000f20:	10800017 	ldw	r2,0(r2)
 8000f24:	1000051e 	bne	r2,zero,8000f3c <randLights+0xe8>
 8000f28:	00c01fc4 	movi	r3,127
 8000f2c:	00840034 	movhi	r2,4096
 8000f30:	10841004 	addi	r2,r2,4160
 8000f34:	10c00035 	stwio	r3,0(r2)
 8000f38:	00000406 	br	8000f4c <randLights+0xf8>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 0);
 8000f3c:	0007883a 	mov	r3,zero
 8000f40:	00840034 	movhi	r2,4096
 8000f44:	10841004 	addi	r2,r2,4160
 8000f48:	10c00035 	stwio	r3,0(r2)
  if (rand_config[4] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 8000f4c:	e0bfff17 	ldw	r2,-4(fp)
 8000f50:	10800404 	addi	r2,r2,16
 8000f54:	10800017 	ldw	r2,0(r2)
 8000f58:	1000051e 	bne	r2,zero,8000f70 <randLights+0x11c>
 8000f5c:	00c01fc4 	movi	r3,127
 8000f60:	00840034 	movhi	r2,4096
 8000f64:	10840c04 	addi	r2,r2,4144
 8000f68:	10c00035 	stwio	r3,0(r2)
 8000f6c:	00000406 	br	8000f80 <randLights+0x12c>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 0);
 8000f70:	0007883a 	mov	r3,zero
 8000f74:	00840034 	movhi	r2,4096
 8000f78:	10840c04 	addi	r2,r2,4144
 8000f7c:	10c00035 	stwio	r3,0(r2)
  if (rand_config[5] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 8000f80:	e0bfff17 	ldw	r2,-4(fp)
 8000f84:	10800504 	addi	r2,r2,20
 8000f88:	10800017 	ldw	r2,0(r2)
 8000f8c:	1000051e 	bne	r2,zero,8000fa4 <randLights+0x150>
 8000f90:	00c01fc4 	movi	r3,127
 8000f94:	00840034 	movhi	r2,4096
 8000f98:	10840804 	addi	r2,r2,4128
 8000f9c:	10c00035 	stwio	r3,0(r2)
 8000fa0:	00000406 	br	8000fb4 <randLights+0x160>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
 8000fa4:	0007883a 	mov	r3,zero
 8000fa8:	00840034 	movhi	r2,4096
 8000fac:	10840804 	addi	r2,r2,4128
 8000fb0:	10c00035 	stwio	r3,0(r2)
  if (rand_config[6] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 8000fb4:	e0bfff17 	ldw	r2,-4(fp)
 8000fb8:	10800604 	addi	r2,r2,24
 8000fbc:	10800017 	ldw	r2,0(r2)
 8000fc0:	1000051e 	bne	r2,zero,8000fd8 <randLights+0x184>
 8000fc4:	00c01fc4 	movi	r3,127
 8000fc8:	00840034 	movhi	r2,4096
 8000fcc:	10840404 	addi	r2,r2,4112
 8000fd0:	10c00035 	stwio	r3,0(r2)
 8000fd4:	00000406 	br	8000fe8 <randLights+0x194>
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 0);
 8000fd8:	0007883a 	mov	r3,zero
 8000fdc:	00840034 	movhi	r2,4096
 8000fe0:	10840404 	addi	r2,r2,4112
 8000fe4:	10c00035 	stwio	r3,0(r2)
  if (rand_config[7] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
 8000fe8:	e0bfff17 	ldw	r2,-4(fp)
 8000fec:	10800704 	addi	r2,r2,28
 8000ff0:	10800017 	ldw	r2,0(r2)
 8000ff4:	1000051e 	bne	r2,zero,800100c <randLights+0x1b8>
 8000ff8:	00c01fc4 	movi	r3,127
 8000ffc:	00840034 	movhi	r2,4096
 8001000:	10840004 	addi	r2,r2,4096
 8001004:	10c00035 	stwio	r3,0(r2)
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 0);
}
 8001008:	00000406 	br	800101c <randLights+0x1c8>
  if (rand_config[5] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
  if (rand_config[6] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 0);
  if (rand_config[7] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
  else IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 0);
 800100c:	0007883a 	mov	r3,zero
 8001010:	00840034 	movhi	r2,4096
 8001014:	10840004 	addi	r2,r2,4096
 8001018:	10c00035 	stwio	r3,0(r2)
}
 800101c:	0001883a 	nop
 8001020:	e037883a 	mov	sp,fp
 8001024:	dfc00117 	ldw	ra,4(sp)
 8001028:	df000017 	ldw	fp,0(sp)
 800102c:	dec00204 	addi	sp,sp,8
 8001030:	f800283a 	ret

08001034 <patternLights>:

// Light up
void patternLights (int pos) {
 8001034:	defffe04 	addi	sp,sp,-8
 8001038:	df000115 	stw	fp,4(sp)
 800103c:	df000104 	addi	fp,sp,4
 8001040:	e13fff15 	stw	r4,-4(fp)
  if (pos == 0) {
 8001044:	e0bfff17 	ldw	r2,-4(fp)
 8001048:	1000211e 	bne	r2,zero,80010d0 <patternLights+0x9c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 126);
 800104c:	00c01f84 	movi	r3,126
 8001050:	00840034 	movhi	r2,4096
 8001054:	10841c04 	addi	r2,r2,4208
 8001058:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 800105c:	00c01fc4 	movi	r3,127
 8001060:	00840034 	movhi	r2,4096
 8001064:	10841804 	addi	r2,r2,4192
 8001068:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 800106c:	00c01fc4 	movi	r3,127
 8001070:	00840034 	movhi	r2,4096
 8001074:	10841404 	addi	r2,r2,4176
 8001078:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 800107c:	00c01fc4 	movi	r3,127
 8001080:	00840034 	movhi	r2,4096
 8001084:	10841004 	addi	r2,r2,4160
 8001088:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 800108c:	00c01fc4 	movi	r3,127
 8001090:	00840034 	movhi	r2,4096
 8001094:	10840c04 	addi	r2,r2,4144
 8001098:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 800109c:	00c01fc4 	movi	r3,127
 80010a0:	00840034 	movhi	r2,4096
 80010a4:	10840804 	addi	r2,r2,4128
 80010a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 80010ac:	00c01fc4 	movi	r3,127
 80010b0:	00840034 	movhi	r2,4096
 80010b4:	10840404 	addi	r2,r2,4112
 80010b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
 80010bc:	00c01fc4 	movi	r3,127
 80010c0:	00840034 	movhi	r2,4096
 80010c4:	10840004 	addi	r2,r2,4096
 80010c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80010cc:	0000cf06 	br	800140c <patternLights+0x3d8>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
  }
  else if (pos == 1) {
 80010d0:	e0bfff17 	ldw	r2,-4(fp)
 80010d4:	10800058 	cmpnei	r2,r2,1
 80010d8:	1000091e 	bne	r2,zero,8001100 <patternLights+0xcc>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
 80010dc:	00c01fc4 	movi	r3,127
 80010e0:	00840034 	movhi	r2,4096
 80010e4:	10841c04 	addi	r2,r2,4208
 80010e8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 126);
 80010ec:	00c01f84 	movi	r3,126
 80010f0:	00840034 	movhi	r2,4096
 80010f4:	10841804 	addi	r2,r2,4192
 80010f8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80010fc:	0000c306 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 1) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 126);
  }
  else if (pos == 2) {
 8001100:	e0bfff17 	ldw	r2,-4(fp)
 8001104:	10800098 	cmpnei	r2,r2,2
 8001108:	1000091e 	bne	r2,zero,8001130 <patternLights+0xfc>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 800110c:	00c01fc4 	movi	r3,127
 8001110:	00840034 	movhi	r2,4096
 8001114:	10841804 	addi	r2,r2,4192
 8001118:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 126);
 800111c:	00c01f84 	movi	r3,126
 8001120:	00840034 	movhi	r2,4096
 8001124:	10841404 	addi	r2,r2,4176
 8001128:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800112c:	0000b706 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 2) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 126);
  }
  else if (pos == 4) {
 8001130:	e0bfff17 	ldw	r2,-4(fp)
 8001134:	10800118 	cmpnei	r2,r2,4
 8001138:	1000091e 	bne	r2,zero,8001160 <patternLights+0x12c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 800113c:	00c01fc4 	movi	r3,127
 8001140:	00840034 	movhi	r2,4096
 8001144:	10841404 	addi	r2,r2,4176
 8001148:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 126);
 800114c:	00c01f84 	movi	r3,126
 8001150:	00840034 	movhi	r2,4096
 8001154:	10841004 	addi	r2,r2,4160
 8001158:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800115c:	0000ab06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 4) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 126);
  }
  else if (pos == 5) {
 8001160:	e0bfff17 	ldw	r2,-4(fp)
 8001164:	10800158 	cmpnei	r2,r2,5
 8001168:	1000091e 	bne	r2,zero,8001190 <patternLights+0x15c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 800116c:	00c01fc4 	movi	r3,127
 8001170:	00840034 	movhi	r2,4096
 8001174:	10841004 	addi	r2,r2,4160
 8001178:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 126);
 800117c:	00c01f84 	movi	r3,126
 8001180:	00840034 	movhi	r2,4096
 8001184:	10840c04 	addi	r2,r2,4144
 8001188:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800118c:	00009f06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 5) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 126);
  }
  else if (pos == 6) {
 8001190:	e0bfff17 	ldw	r2,-4(fp)
 8001194:	10800198 	cmpnei	r2,r2,6
 8001198:	1000091e 	bne	r2,zero,80011c0 <patternLights+0x18c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 800119c:	00c01fc4 	movi	r3,127
 80011a0:	00840034 	movhi	r2,4096
 80011a4:	10840c04 	addi	r2,r2,4144
 80011a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 126);
 80011ac:	00c01f84 	movi	r3,126
 80011b0:	00840034 	movhi	r2,4096
 80011b4:	10840804 	addi	r2,r2,4128
 80011b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80011bc:	00009306 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 6) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 126);
  }
  else if (pos == 7) {
 80011c0:	e0bfff17 	ldw	r2,-4(fp)
 80011c4:	108001d8 	cmpnei	r2,r2,7
 80011c8:	1000091e 	bne	r2,zero,80011f0 <patternLights+0x1bc>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 80011cc:	00c01fc4 	movi	r3,127
 80011d0:	00840034 	movhi	r2,4096
 80011d4:	10840804 	addi	r2,r2,4128
 80011d8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 126);
 80011dc:	00c01f84 	movi	r3,126
 80011e0:	00840034 	movhi	r2,4096
 80011e4:	10840404 	addi	r2,r2,4112
 80011e8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80011ec:	00008706 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 7) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 126);
  }
  else if (pos == 8) {
 80011f0:	e0bfff17 	ldw	r2,-4(fp)
 80011f4:	10800218 	cmpnei	r2,r2,8
 80011f8:	1000091e 	bne	r2,zero,8001220 <patternLights+0x1ec>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 80011fc:	00c01fc4 	movi	r3,127
 8001200:	00840034 	movhi	r2,4096
 8001204:	10840404 	addi	r2,r2,4112
 8001208:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 126);
 800120c:	00c01f84 	movi	r3,126
 8001210:	00840034 	movhi	r2,4096
 8001214:	10840004 	addi	r2,r2,4096
 8001218:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800121c:	00007b06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 8) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 126);
  }
  else if (pos == 9) {
 8001220:	e0bfff17 	ldw	r2,-4(fp)
 8001224:	10800258 	cmpnei	r2,r2,9
 8001228:	1000051e 	bne	r2,zero,8001240 <patternLights+0x20c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 95);
 800122c:	00c017c4 	movi	r3,95
 8001230:	00840034 	movhi	r2,4096
 8001234:	10840004 	addi	r2,r2,4096
 8001238:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800123c:	00007306 	br	800140c <patternLights+0x3d8>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 126);
  }
  else if (pos == 9) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 95);
  }
  else if (pos == 10) {
 8001240:	e0bfff17 	ldw	r2,-4(fp)
 8001244:	10800298 	cmpnei	r2,r2,10
 8001248:	1000051e 	bne	r2,zero,8001260 <patternLights+0x22c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 111);
 800124c:	00c01bc4 	movi	r3,111
 8001250:	00840034 	movhi	r2,4096
 8001254:	10840004 	addi	r2,r2,4096
 8001258:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800125c:	00006b06 	br	800140c <patternLights+0x3d8>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 95);
  }
  else if (pos == 10) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 111);
  }
  else if (pos == 11) {
 8001260:	e0bfff17 	ldw	r2,-4(fp)
 8001264:	108002d8 	cmpnei	r2,r2,11
 8001268:	1000051e 	bne	r2,zero,8001280 <patternLights+0x24c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 119);
 800126c:	00c01dc4 	movi	r3,119
 8001270:	00840034 	movhi	r2,4096
 8001274:	10840004 	addi	r2,r2,4096
 8001278:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800127c:	00006306 	br	800140c <patternLights+0x3d8>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 111);
  }
  else if (pos == 11) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 119);
  }
  else if (pos == 12) {
 8001280:	e0bfff17 	ldw	r2,-4(fp)
 8001284:	10800318 	cmpnei	r2,r2,12
 8001288:	1000091e 	bne	r2,zero,80012b0 <patternLights+0x27c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
 800128c:	00c01fc4 	movi	r3,127
 8001290:	00840034 	movhi	r2,4096
 8001294:	10840004 	addi	r2,r2,4096
 8001298:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 119);
 800129c:	00c01dc4 	movi	r3,119
 80012a0:	00840034 	movhi	r2,4096
 80012a4:	10840404 	addi	r2,r2,4112
 80012a8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80012ac:	00005706 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 12) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 119);
  }
  else if (pos == 13) {
 80012b0:	e0bfff17 	ldw	r2,-4(fp)
 80012b4:	10800358 	cmpnei	r2,r2,13
 80012b8:	1000091e 	bne	r2,zero,80012e0 <patternLights+0x2ac>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 80012bc:	00c01fc4 	movi	r3,127
 80012c0:	00840034 	movhi	r2,4096
 80012c4:	10840404 	addi	r2,r2,4112
 80012c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 119);
 80012cc:	00c01dc4 	movi	r3,119
 80012d0:	00840034 	movhi	r2,4096
 80012d4:	10840804 	addi	r2,r2,4128
 80012d8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80012dc:	00004b06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 13) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 119);
  }
  else if (pos == 14) {
 80012e0:	e0bfff17 	ldw	r2,-4(fp)
 80012e4:	10800398 	cmpnei	r2,r2,14
 80012e8:	1000091e 	bne	r2,zero,8001310 <patternLights+0x2dc>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 80012ec:	00c01fc4 	movi	r3,127
 80012f0:	00840034 	movhi	r2,4096
 80012f4:	10840804 	addi	r2,r2,4128
 80012f8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 119);
 80012fc:	00c01dc4 	movi	r3,119
 8001300:	00840034 	movhi	r2,4096
 8001304:	10840c04 	addi	r2,r2,4144
 8001308:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800130c:	00003f06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 14) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 119);
  }
  else if (pos == 15) {
 8001310:	e0bfff17 	ldw	r2,-4(fp)
 8001314:	108003d8 	cmpnei	r2,r2,15
 8001318:	1000091e 	bne	r2,zero,8001340 <patternLights+0x30c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 800131c:	00c01fc4 	movi	r3,127
 8001320:	00840034 	movhi	r2,4096
 8001324:	10840c04 	addi	r2,r2,4144
 8001328:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 119);
 800132c:	00c01dc4 	movi	r3,119
 8001330:	00840034 	movhi	r2,4096
 8001334:	10841004 	addi	r2,r2,4160
 8001338:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800133c:	00003306 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 15) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 119);
  }
  else if (pos == 16) {
 8001340:	e0bfff17 	ldw	r2,-4(fp)
 8001344:	10800418 	cmpnei	r2,r2,16
 8001348:	1000091e 	bne	r2,zero,8001370 <patternLights+0x33c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 800134c:	00c01fc4 	movi	r3,127
 8001350:	00840034 	movhi	r2,4096
 8001354:	10841004 	addi	r2,r2,4160
 8001358:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 119);
 800135c:	00c01dc4 	movi	r3,119
 8001360:	00840034 	movhi	r2,4096
 8001364:	10841404 	addi	r2,r2,4176
 8001368:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800136c:	00002706 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 16) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 119);
  }
  else if (pos == 17) {
 8001370:	e0bfff17 	ldw	r2,-4(fp)
 8001374:	10800458 	cmpnei	r2,r2,17
 8001378:	1000091e 	bne	r2,zero,80013a0 <patternLights+0x36c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 800137c:	00c01fc4 	movi	r3,127
 8001380:	00840034 	movhi	r2,4096
 8001384:	10841404 	addi	r2,r2,4176
 8001388:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 119);
 800138c:	00c01dc4 	movi	r3,119
 8001390:	00840034 	movhi	r2,4096
 8001394:	10841804 	addi	r2,r2,4192
 8001398:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 800139c:	00001b06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 17) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 119);
  }
  else if (pos == 18) {
 80013a0:	e0bfff17 	ldw	r2,-4(fp)
 80013a4:	10800498 	cmpnei	r2,r2,18
 80013a8:	1000091e 	bne	r2,zero,80013d0 <patternLights+0x39c>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 80013ac:	00c01fc4 	movi	r3,127
 80013b0:	00840034 	movhi	r2,4096
 80013b4:	10841804 	addi	r2,r2,4192
 80013b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 119);
 80013bc:	00c01dc4 	movi	r3,119
 80013c0:	00840034 	movhi	r2,4096
 80013c4:	10841c04 	addi	r2,r2,4208
 80013c8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80013cc:	00000f06 	br	800140c <patternLights+0x3d8>
  }
  else if (pos == 18) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 119);
  }
  else if (pos == 19) {
 80013d0:	e0bfff17 	ldw	r2,-4(fp)
 80013d4:	108004d8 	cmpnei	r2,r2,19
 80013d8:	1000051e 	bne	r2,zero,80013f0 <patternLights+0x3bc>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
 80013dc:	00c01ec4 	movi	r3,123
 80013e0:	00840034 	movhi	r2,4096
 80013e4:	10841c04 	addi	r2,r2,4208
 80013e8:	10c00035 	stwio	r3,0(r2)
  }
  else if (pos == 20) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
  }
}
 80013ec:	00000706 	br	800140c <patternLights+0x3d8>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 119);
  }
  else if (pos == 19) {
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
  }
  else if (pos == 20) {
 80013f0:	e0bfff17 	ldw	r2,-4(fp)
 80013f4:	10800518 	cmpnei	r2,r2,20
 80013f8:	1000041e 	bne	r2,zero,800140c <patternLights+0x3d8>
    IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
 80013fc:	00c01f44 	movi	r3,125
 8001400:	00840034 	movhi	r2,4096
 8001404:	10841c04 	addi	r2,r2,4208
 8001408:	10c00035 	stwio	r3,0(r2)
  }
}
 800140c:	0001883a 	nop
 8001410:	e037883a 	mov	sp,fp
 8001414:	df000017 	ldw	fp,0(sp)
 8001418:	dec00104 	addi	sp,sp,4
 800141c:	f800283a 	ret

08001420 <main>:

int main()
{
 8001420:	defff804 	addi	sp,sp,-32
 8001424:	dfc00715 	stw	ra,28(sp)
 8001428:	df000615 	stw	fp,24(sp)
 800142c:	df000604 	addi	fp,sp,24
  alt_u32 current_value;
  alt_u32 current_state;
  alt_u8 current_direction;
  alt_u32 keys;

  current_state=3;
 8001430:	008000c4 	movi	r2,3
 8001434:	e0bffb15 	stw	r2,-20(fp)
  current_value=1;
 8001438:	00800044 	movi	r2,1
 800143c:	e0bffa15 	stw	r2,-24(fp)
  current_direction=0;
 8001440:	e03ffc05 	stb	zero,-16(fp)

  int pos = 0;
 8001444:	e03ffd15 	stw	zero,-12(fp)

  printf ("Program running (UART)...\n");
 8001448:	01020034 	movhi	r4,2048
 800144c:	211b3a04 	addi	r4,r4,27880
 8001450:	80018900 	call	8001890 <puts>

  while (1) {
    // read the current state of the keys
    keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 8001454:	00840034 	movhi	r2,4096
 8001458:	10842004 	addi	r2,r2,4224
 800145c:	10800037 	ldwio	r2,0(r2)
 8001460:	e0bfff15 	stw	r2,-4(fp)

    // switch speed if necessary
    if ((keys != 7) && (keys != current_state)) {
 8001464:	e0bfff17 	ldw	r2,-4(fp)
 8001468:	108001e0 	cmpeqi	r2,r2,7
 800146c:	1000281e 	bne	r2,zero,8001510 <main+0xf0>
 8001470:	e0ffff17 	ldw	r3,-4(fp)
 8001474:	e0bffb17 	ldw	r2,-20(fp)
 8001478:	18802526 	beq	r3,r2,8001510 <main+0xf0>
      if (keys == 3) {  // key 3, 250 ms, rand 7-seg config
 800147c:	e0bfff17 	ldw	r2,-4(fp)
 8001480:	108000d8 	cmpnei	r2,r2,3
 8001484:	1000041e 	bne	r2,zero,8001498 <main+0x78>
        printf ("speed set to 250 ms\n");
 8001488:	01020034 	movhi	r4,2048
 800148c:	211b4104 	addi	r4,r4,27908
 8001490:	80018900 	call	8001890 <puts>
 8001494:	00001c06 	br	8001508 <main+0xe8>
      }
      else if (keys == 5) {  // key 2
 8001498:	e0bfff17 	ldw	r2,-4(fp)
 800149c:	10800158 	cmpnei	r2,r2,5
 80014a0:	1000041e 	bne	r2,zero,80014b4 <main+0x94>
        printf ("speed set to 150 ms\n");
 80014a4:	01020034 	movhi	r4,2048
 80014a8:	211b4604 	addi	r4,r4,27928
 80014ac:	80018900 	call	8001890 <puts>
 80014b0:	00001506 	br	8001508 <main+0xe8>
      }
      else if (keys == 6) {  // key 1
 80014b4:	e0bfff17 	ldw	r2,-4(fp)
 80014b8:	10800198 	cmpnei	r2,r2,6
 80014bc:	1000121e 	bne	r2,zero,8001508 <main+0xe8>
        printf ("speed set to 50 ms\n");
 80014c0:	01020034 	movhi	r4,2048
 80014c4:	211b4b04 	addi	r4,r4,27948
 80014c8:	80018900 	call	8001890 <puts>
        for ( int i = 0; i < 9; i++ ) hexCount[ i ] = 0;
 80014cc:	e03ffe15 	stw	zero,-8(fp)
 80014d0:	00000a06 	br	80014fc <main+0xdc>
 80014d4:	00820074 	movhi	r2,2049
 80014d8:	10a8b104 	addi	r2,r2,-23868
 80014dc:	e0fffe17 	ldw	r3,-8(fp)
 80014e0:	18c7883a 	add	r3,r3,r3
 80014e4:	18c7883a 	add	r3,r3,r3
 80014e8:	10c5883a 	add	r2,r2,r3
 80014ec:	10000015 	stw	zero,0(r2)
 80014f0:	e0bffe17 	ldw	r2,-8(fp)
 80014f4:	10800044 	addi	r2,r2,1
 80014f8:	e0bffe15 	stw	r2,-8(fp)
 80014fc:	e0bffe17 	ldw	r2,-8(fp)
 8001500:	10800250 	cmplti	r2,r2,9
 8001504:	103ff31e 	bne	r2,zero,80014d4 <main+0xb4>

      }
      current_state=keys;
 8001508:	e0bfff17 	ldw	r2,-4(fp)
 800150c:	e0bffb15 	stw	r2,-20(fp)
    }

    // manage LEDS
    if ((current_direction==0) && (current_value==(1 << 25))) {  // switch direction if necessary
 8001510:	e0bffc03 	ldbu	r2,-16(fp)
 8001514:	1000061e 	bne	r2,zero,8001530 <main+0x110>
 8001518:	e0fffa17 	ldw	r3,-24(fp)
 800151c:	00808034 	movhi	r2,512
 8001520:	1880031e 	bne	r3,r2,8001530 <main+0x110>
        current_direction=1;
 8001524:	00800044 	movi	r2,1
 8001528:	e0bffc05 	stb	r2,-16(fp)
 800152c:	00001106 	br	8001574 <main+0x154>
    }
    else if ((current_direction==1) && (current_value==1)) {
 8001530:	e0bffc03 	ldbu	r2,-16(fp)
 8001534:	10800058 	cmpnei	r2,r2,1
 8001538:	1000051e 	bne	r2,zero,8001550 <main+0x130>
 800153c:	e0bffa17 	ldw	r2,-24(fp)
 8001540:	10800058 	cmpnei	r2,r2,1
 8001544:	1000021e 	bne	r2,zero,8001550 <main+0x130>
        current_direction=0;
 8001548:	e03ffc05 	stb	zero,-16(fp)
 800154c:	00000906 	br	8001574 <main+0x154>
    }
    else if (current_direction==0) {  // move light
 8001550:	e0bffc03 	ldbu	r2,-16(fp)
 8001554:	1000041e 	bne	r2,zero,8001568 <main+0x148>
      current_value = current_value << 1;
 8001558:	e0bffa17 	ldw	r2,-24(fp)
 800155c:	1085883a 	add	r2,r2,r2
 8001560:	e0bffa15 	stw	r2,-24(fp)
 8001564:	00000306 	br	8001574 <main+0x154>
    }
    else {
      current_value = current_value >> 1;
 8001568:	e0bffa17 	ldw	r2,-24(fp)
 800156c:	1004d07a 	srli	r2,r2,1
 8001570:	e0bffa15 	stw	r2,-24(fp)
    }

    // update lights
    if (current_state == 3) randLights();
 8001574:	e0bffb17 	ldw	r2,-20(fp)
 8001578:	108000d8 	cmpnei	r2,r2,3
 800157c:	1000011e 	bne	r2,zero,8001584 <main+0x164>
 8001580:	8000e540 	call	8000e54 <randLights>
    if (current_state == 5) {
 8001584:	e0bffb17 	ldw	r2,-20(fp)
 8001588:	10800158 	cmpnei	r2,r2,5
 800158c:	10000a1e 	bne	r2,zero,80015b8 <main+0x198>
      patternLights(pos);
 8001590:	e13ffd17 	ldw	r4,-12(fp)
 8001594:	80010340 	call	8001034 <patternLights>
      if (pos == 20) pos = 0;
 8001598:	e0bffd17 	ldw	r2,-12(fp)
 800159c:	10800518 	cmpnei	r2,r2,20
 80015a0:	1000021e 	bne	r2,zero,80015ac <main+0x18c>
 80015a4:	e03ffd15 	stw	zero,-12(fp)
 80015a8:	00000306 	br	80015b8 <main+0x198>
      else pos++;
 80015ac:	e0bffd17 	ldw	r2,-12(fp)
 80015b0:	10800044 	addi	r2,r2,1
 80015b4:	e0bffd15 	stw	r2,-12(fp)
    }
    if (current_state == 6) count( );
 80015b8:	e0bffb17 	ldw	r2,-20(fp)
 80015bc:	10800198 	cmpnei	r2,r2,6
 80015c0:	1000011e 	bne	r2,zero,80015c8 <main+0x1a8>
 80015c4:	80003340 	call	8000334 <count>

    IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE,current_value);
 80015c8:	e0fffa17 	ldw	r3,-24(fp)
 80015cc:	00840034 	movhi	r2,4096
 80015d0:	10842404 	addi	r2,r2,4240
 80015d4:	10c00035 	stwio	r3,0(r2)

    // wait
    if (current_state==3) usleep (250000);
 80015d8:	e0bffb17 	ldw	r2,-20(fp)
 80015dc:	108000d8 	cmpnei	r2,r2,3
 80015e0:	1000041e 	bne	r2,zero,80015f4 <main+0x1d4>
 80015e4:	01000134 	movhi	r4,4
 80015e8:	21342404 	addi	r4,r4,-12144
 80015ec:	8004cd00 	call	8004cd0 <usleep>
 80015f0:	003f9806 	br	8001454 <main+0x34>
    else if (current_state==5) usleep (125000);
 80015f4:	e0bffb17 	ldw	r2,-20(fp)
 80015f8:	10800158 	cmpnei	r2,r2,5
 80015fc:	1000041e 	bne	r2,zero,8001610 <main+0x1f0>
 8001600:	010000b4 	movhi	r4,2
 8001604:	213a1204 	addi	r4,r4,-6072
 8001608:	8004cd00 	call	8004cd0 <usleep>
 800160c:	003f9106 	br	8001454 <main+0x34>
    else usleep (50000);
 8001610:	0130d414 	movui	r4,50000
 8001614:	8004cd00 	call	8004cd0 <usleep>
  }
 8001618:	003f8e06 	br	8001454 <main+0x34>

0800161c <__divsi3>:
 800161c:	20001b16 	blt	r4,zero,800168c <__divsi3+0x70>
 8001620:	000f883a 	mov	r7,zero
 8001624:	28001616 	blt	r5,zero,8001680 <__divsi3+0x64>
 8001628:	200d883a 	mov	r6,r4
 800162c:	29001a2e 	bgeu	r5,r4,8001698 <__divsi3+0x7c>
 8001630:	00800804 	movi	r2,32
 8001634:	00c00044 	movi	r3,1
 8001638:	00000106 	br	8001640 <__divsi3+0x24>
 800163c:	10000d26 	beq	r2,zero,8001674 <__divsi3+0x58>
 8001640:	294b883a 	add	r5,r5,r5
 8001644:	10bfffc4 	addi	r2,r2,-1
 8001648:	18c7883a 	add	r3,r3,r3
 800164c:	293ffb36 	bltu	r5,r4,800163c <__divsi3+0x20>
 8001650:	0005883a 	mov	r2,zero
 8001654:	18000726 	beq	r3,zero,8001674 <__divsi3+0x58>
 8001658:	0005883a 	mov	r2,zero
 800165c:	31400236 	bltu	r6,r5,8001668 <__divsi3+0x4c>
 8001660:	314dc83a 	sub	r6,r6,r5
 8001664:	10c4b03a 	or	r2,r2,r3
 8001668:	1806d07a 	srli	r3,r3,1
 800166c:	280ad07a 	srli	r5,r5,1
 8001670:	183ffa1e 	bne	r3,zero,800165c <__divsi3+0x40>
 8001674:	38000126 	beq	r7,zero,800167c <__divsi3+0x60>
 8001678:	0085c83a 	sub	r2,zero,r2
 800167c:	f800283a 	ret
 8001680:	014bc83a 	sub	r5,zero,r5
 8001684:	39c0005c 	xori	r7,r7,1
 8001688:	003fe706 	br	8001628 <__divsi3+0xc>
 800168c:	0109c83a 	sub	r4,zero,r4
 8001690:	01c00044 	movi	r7,1
 8001694:	003fe306 	br	8001624 <__divsi3+0x8>
 8001698:	00c00044 	movi	r3,1
 800169c:	003fee06 	br	8001658 <__divsi3+0x3c>

080016a0 <__modsi3>:
 80016a0:	20001716 	blt	r4,zero,8001700 <__modsi3+0x60>
 80016a4:	000f883a 	mov	r7,zero
 80016a8:	2005883a 	mov	r2,r4
 80016ac:	28001216 	blt	r5,zero,80016f8 <__modsi3+0x58>
 80016b0:	2900162e 	bgeu	r5,r4,800170c <__modsi3+0x6c>
 80016b4:	01800804 	movi	r6,32
 80016b8:	00c00044 	movi	r3,1
 80016bc:	00000106 	br	80016c4 <__modsi3+0x24>
 80016c0:	30000a26 	beq	r6,zero,80016ec <__modsi3+0x4c>
 80016c4:	294b883a 	add	r5,r5,r5
 80016c8:	31bfffc4 	addi	r6,r6,-1
 80016cc:	18c7883a 	add	r3,r3,r3
 80016d0:	293ffb36 	bltu	r5,r4,80016c0 <__modsi3+0x20>
 80016d4:	18000526 	beq	r3,zero,80016ec <__modsi3+0x4c>
 80016d8:	1806d07a 	srli	r3,r3,1
 80016dc:	11400136 	bltu	r2,r5,80016e4 <__modsi3+0x44>
 80016e0:	1145c83a 	sub	r2,r2,r5
 80016e4:	280ad07a 	srli	r5,r5,1
 80016e8:	183ffb1e 	bne	r3,zero,80016d8 <__modsi3+0x38>
 80016ec:	38000126 	beq	r7,zero,80016f4 <__modsi3+0x54>
 80016f0:	0085c83a 	sub	r2,zero,r2
 80016f4:	f800283a 	ret
 80016f8:	014bc83a 	sub	r5,zero,r5
 80016fc:	003fec06 	br	80016b0 <__modsi3+0x10>
 8001700:	0109c83a 	sub	r4,zero,r4
 8001704:	01c00044 	movi	r7,1
 8001708:	003fe706 	br	80016a8 <__modsi3+0x8>
 800170c:	00c00044 	movi	r3,1
 8001710:	003ff106 	br	80016d8 <__modsi3+0x38>

08001714 <__udivsi3>:
 8001714:	200d883a 	mov	r6,r4
 8001718:	2900152e 	bgeu	r5,r4,8001770 <__udivsi3+0x5c>
 800171c:	28001416 	blt	r5,zero,8001770 <__udivsi3+0x5c>
 8001720:	00800804 	movi	r2,32
 8001724:	00c00044 	movi	r3,1
 8001728:	00000206 	br	8001734 <__udivsi3+0x20>
 800172c:	10000e26 	beq	r2,zero,8001768 <__udivsi3+0x54>
 8001730:	28000516 	blt	r5,zero,8001748 <__udivsi3+0x34>
 8001734:	294b883a 	add	r5,r5,r5
 8001738:	10bfffc4 	addi	r2,r2,-1
 800173c:	18c7883a 	add	r3,r3,r3
 8001740:	293ffa36 	bltu	r5,r4,800172c <__udivsi3+0x18>
 8001744:	18000826 	beq	r3,zero,8001768 <__udivsi3+0x54>
 8001748:	0005883a 	mov	r2,zero
 800174c:	31400236 	bltu	r6,r5,8001758 <__udivsi3+0x44>
 8001750:	314dc83a 	sub	r6,r6,r5
 8001754:	10c4b03a 	or	r2,r2,r3
 8001758:	1806d07a 	srli	r3,r3,1
 800175c:	280ad07a 	srli	r5,r5,1
 8001760:	183ffa1e 	bne	r3,zero,800174c <__udivsi3+0x38>
 8001764:	f800283a 	ret
 8001768:	0005883a 	mov	r2,zero
 800176c:	f800283a 	ret
 8001770:	00c00044 	movi	r3,1
 8001774:	003ff406 	br	8001748 <__udivsi3+0x34>

08001778 <__umodsi3>:
 8001778:	2005883a 	mov	r2,r4
 800177c:	2900122e 	bgeu	r5,r4,80017c8 <__umodsi3+0x50>
 8001780:	28001116 	blt	r5,zero,80017c8 <__umodsi3+0x50>
 8001784:	01800804 	movi	r6,32
 8001788:	00c00044 	movi	r3,1
 800178c:	00000206 	br	8001798 <__umodsi3+0x20>
 8001790:	30000c26 	beq	r6,zero,80017c4 <__umodsi3+0x4c>
 8001794:	28000516 	blt	r5,zero,80017ac <__umodsi3+0x34>
 8001798:	294b883a 	add	r5,r5,r5
 800179c:	31bfffc4 	addi	r6,r6,-1
 80017a0:	18c7883a 	add	r3,r3,r3
 80017a4:	293ffa36 	bltu	r5,r4,8001790 <__umodsi3+0x18>
 80017a8:	18000626 	beq	r3,zero,80017c4 <__umodsi3+0x4c>
 80017ac:	1806d07a 	srli	r3,r3,1
 80017b0:	11400136 	bltu	r2,r5,80017b8 <__umodsi3+0x40>
 80017b4:	1145c83a 	sub	r2,r2,r5
 80017b8:	280ad07a 	srli	r5,r5,1
 80017bc:	183ffb1e 	bne	r3,zero,80017ac <__umodsi3+0x34>
 80017c0:	f800283a 	ret
 80017c4:	f800283a 	ret
 80017c8:	00c00044 	movi	r3,1
 80017cc:	003ff706 	br	80017ac <__umodsi3+0x34>

080017d0 <_puts_r>:
 80017d0:	defff604 	addi	sp,sp,-40
 80017d4:	dc000715 	stw	r16,28(sp)
 80017d8:	2021883a 	mov	r16,r4
 80017dc:	2809883a 	mov	r4,r5
 80017e0:	dc400815 	stw	r17,32(sp)
 80017e4:	dfc00915 	stw	ra,36(sp)
 80017e8:	2823883a 	mov	r17,r5
 80017ec:	80019200 	call	8001920 <strlen>
 80017f0:	10c00044 	addi	r3,r2,1
 80017f4:	d8800115 	stw	r2,4(sp)
 80017f8:	00820034 	movhi	r2,2048
 80017fc:	109b5004 	addi	r2,r2,27968
 8001800:	d8800215 	stw	r2,8(sp)
 8001804:	00800044 	movi	r2,1
 8001808:	d8800315 	stw	r2,12(sp)
 800180c:	00800084 	movi	r2,2
 8001810:	dc400015 	stw	r17,0(sp)
 8001814:	d8c00615 	stw	r3,24(sp)
 8001818:	dec00415 	stw	sp,16(sp)
 800181c:	d8800515 	stw	r2,20(sp)
 8001820:	80000226 	beq	r16,zero,800182c <_puts_r+0x5c>
 8001824:	80800e17 	ldw	r2,56(r16)
 8001828:	10001426 	beq	r2,zero,800187c <_puts_r+0xac>
 800182c:	81400217 	ldw	r5,8(r16)
 8001830:	2880030b 	ldhu	r2,12(r5)
 8001834:	10c8000c 	andi	r3,r2,8192
 8001838:	1800061e 	bne	r3,zero,8001854 <_puts_r+0x84>
 800183c:	29001917 	ldw	r4,100(r5)
 8001840:	00f7ffc4 	movi	r3,-8193
 8001844:	10880014 	ori	r2,r2,8192
 8001848:	20c6703a 	and	r3,r4,r3
 800184c:	2880030d 	sth	r2,12(r5)
 8001850:	28c01915 	stw	r3,100(r5)
 8001854:	d9800404 	addi	r6,sp,16
 8001858:	8009883a 	mov	r4,r16
 800185c:	8001d580 	call	8001d58 <__sfvwrite_r>
 8001860:	1000091e 	bne	r2,zero,8001888 <_puts_r+0xb8>
 8001864:	00800284 	movi	r2,10
 8001868:	dfc00917 	ldw	ra,36(sp)
 800186c:	dc400817 	ldw	r17,32(sp)
 8001870:	dc000717 	ldw	r16,28(sp)
 8001874:	dec00a04 	addi	sp,sp,40
 8001878:	f800283a 	ret
 800187c:	8009883a 	mov	r4,r16
 8001880:	8001d080 	call	8001d08 <__sinit>
 8001884:	003fe906 	br	800182c <_puts_r+0x5c>
 8001888:	00bfffc4 	movi	r2,-1
 800188c:	003ff606 	br	8001868 <_puts_r+0x98>

08001890 <puts>:
 8001890:	00820074 	movhi	r2,2049
 8001894:	10a1ed04 	addi	r2,r2,-30796
 8001898:	200b883a 	mov	r5,r4
 800189c:	11000017 	ldw	r4,0(r2)
 80018a0:	80017d01 	jmpi	80017d0 <_puts_r>

080018a4 <srand>:
 80018a4:	00820074 	movhi	r2,2049
 80018a8:	10a1ed04 	addi	r2,r2,-30796
 80018ac:	10800017 	ldw	r2,0(r2)
 80018b0:	11002915 	stw	r4,164(r2)
 80018b4:	10002a15 	stw	zero,168(r2)
 80018b8:	f800283a 	ret

080018bc <rand>:
 80018bc:	00820074 	movhi	r2,2049
 80018c0:	defffe04 	addi	sp,sp,-8
 80018c4:	10a1ed04 	addi	r2,r2,-30796
 80018c8:	dc000015 	stw	r16,0(sp)
 80018cc:	14000017 	ldw	r16,0(r2)
 80018d0:	dfc00115 	stw	ra,4(sp)
 80018d4:	01932574 	movhi	r6,19605
 80018d8:	81002917 	ldw	r4,164(r16)
 80018dc:	81402a17 	ldw	r5,168(r16)
 80018e0:	01d614b4 	movhi	r7,22610
 80018e4:	319fcb44 	addi	r6,r6,32557
 80018e8:	39fd0b44 	addi	r7,r7,-3027
 80018ec:	80044600 	call	8004460 <__muldi3>
 80018f0:	11000044 	addi	r4,r2,1
 80018f4:	2085803a 	cmpltu	r2,r4,r2
 80018f8:	10c7883a 	add	r3,r2,r3
 80018fc:	00a00034 	movhi	r2,32768
 8001900:	10bfffc4 	addi	r2,r2,-1
 8001904:	1884703a 	and	r2,r3,r2
 8001908:	81002915 	stw	r4,164(r16)
 800190c:	80c02a15 	stw	r3,168(r16)
 8001910:	dfc00117 	ldw	ra,4(sp)
 8001914:	dc000017 	ldw	r16,0(sp)
 8001918:	dec00204 	addi	sp,sp,8
 800191c:	f800283a 	ret

08001920 <strlen>:
 8001920:	208000cc 	andi	r2,r4,3
 8001924:	10002026 	beq	r2,zero,80019a8 <strlen+0x88>
 8001928:	20800007 	ldb	r2,0(r4)
 800192c:	10002026 	beq	r2,zero,80019b0 <strlen+0x90>
 8001930:	2005883a 	mov	r2,r4
 8001934:	00000206 	br	8001940 <strlen+0x20>
 8001938:	10c00007 	ldb	r3,0(r2)
 800193c:	18001826 	beq	r3,zero,80019a0 <strlen+0x80>
 8001940:	10800044 	addi	r2,r2,1
 8001944:	10c000cc 	andi	r3,r2,3
 8001948:	183ffb1e 	bne	r3,zero,8001938 <strlen+0x18>
 800194c:	10c00017 	ldw	r3,0(r2)
 8001950:	01ffbff4 	movhi	r7,65279
 8001954:	39ffbfc4 	addi	r7,r7,-257
 8001958:	00ca303a 	nor	r5,zero,r3
 800195c:	01a02074 	movhi	r6,32897
 8001960:	19c7883a 	add	r3,r3,r7
 8001964:	31a02004 	addi	r6,r6,-32640
 8001968:	1946703a 	and	r3,r3,r5
 800196c:	1986703a 	and	r3,r3,r6
 8001970:	1800091e 	bne	r3,zero,8001998 <strlen+0x78>
 8001974:	10800104 	addi	r2,r2,4
 8001978:	10c00017 	ldw	r3,0(r2)
 800197c:	19cb883a 	add	r5,r3,r7
 8001980:	00c6303a 	nor	r3,zero,r3
 8001984:	28c6703a 	and	r3,r5,r3
 8001988:	1986703a 	and	r3,r3,r6
 800198c:	183ff926 	beq	r3,zero,8001974 <strlen+0x54>
 8001990:	00000106 	br	8001998 <strlen+0x78>
 8001994:	10800044 	addi	r2,r2,1
 8001998:	10c00007 	ldb	r3,0(r2)
 800199c:	183ffd1e 	bne	r3,zero,8001994 <strlen+0x74>
 80019a0:	1105c83a 	sub	r2,r2,r4
 80019a4:	f800283a 	ret
 80019a8:	2005883a 	mov	r2,r4
 80019ac:	003fe706 	br	800194c <strlen+0x2c>
 80019b0:	0005883a 	mov	r2,zero
 80019b4:	f800283a 	ret

080019b8 <__fp_unlock>:
 80019b8:	0005883a 	mov	r2,zero
 80019bc:	f800283a 	ret

080019c0 <_cleanup_r>:
 80019c0:	01420034 	movhi	r5,2048
 80019c4:	294e5504 	addi	r5,r5,14676
 80019c8:	80022d81 	jmpi	80022d8 <_fwalk_reent>

080019cc <__sinit.part.1>:
 80019cc:	defff704 	addi	sp,sp,-36
 80019d0:	00c20034 	movhi	r3,2048
 80019d4:	dfc00815 	stw	ra,32(sp)
 80019d8:	ddc00715 	stw	r23,28(sp)
 80019dc:	dd800615 	stw	r22,24(sp)
 80019e0:	dd400515 	stw	r21,20(sp)
 80019e4:	dd000415 	stw	r20,16(sp)
 80019e8:	dcc00315 	stw	r19,12(sp)
 80019ec:	dc800215 	stw	r18,8(sp)
 80019f0:	dc400115 	stw	r17,4(sp)
 80019f4:	dc000015 	stw	r16,0(sp)
 80019f8:	18c67004 	addi	r3,r3,6592
 80019fc:	24000117 	ldw	r16,4(r4)
 8001a00:	20c00f15 	stw	r3,60(r4)
 8001a04:	2080bb04 	addi	r2,r4,748
 8001a08:	00c000c4 	movi	r3,3
 8001a0c:	20c0b915 	stw	r3,740(r4)
 8001a10:	2080ba15 	stw	r2,744(r4)
 8001a14:	2000b815 	stw	zero,736(r4)
 8001a18:	05c00204 	movi	r23,8
 8001a1c:	00800104 	movi	r2,4
 8001a20:	2025883a 	mov	r18,r4
 8001a24:	b80d883a 	mov	r6,r23
 8001a28:	81001704 	addi	r4,r16,92
 8001a2c:	000b883a 	mov	r5,zero
 8001a30:	80000015 	stw	zero,0(r16)
 8001a34:	80000115 	stw	zero,4(r16)
 8001a38:	80000215 	stw	zero,8(r16)
 8001a3c:	8080030d 	sth	r2,12(r16)
 8001a40:	80001915 	stw	zero,100(r16)
 8001a44:	8000038d 	sth	zero,14(r16)
 8001a48:	80000415 	stw	zero,16(r16)
 8001a4c:	80000515 	stw	zero,20(r16)
 8001a50:	80000615 	stw	zero,24(r16)
 8001a54:	8002f300 	call	8002f30 <memset>
 8001a58:	05820034 	movhi	r22,2048
 8001a5c:	94400217 	ldw	r17,8(r18)
 8001a60:	05420034 	movhi	r21,2048
 8001a64:	05020034 	movhi	r20,2048
 8001a68:	04c20034 	movhi	r19,2048
 8001a6c:	b58d8404 	addi	r22,r22,13840
 8001a70:	ad4d9b04 	addi	r21,r21,13932
 8001a74:	a50dba04 	addi	r20,r20,14056
 8001a78:	9ccdd104 	addi	r19,r19,14148
 8001a7c:	85800815 	stw	r22,32(r16)
 8001a80:	85400915 	stw	r21,36(r16)
 8001a84:	85000a15 	stw	r20,40(r16)
 8001a88:	84c00b15 	stw	r19,44(r16)
 8001a8c:	84000715 	stw	r16,28(r16)
 8001a90:	00800284 	movi	r2,10
 8001a94:	8880030d 	sth	r2,12(r17)
 8001a98:	00800044 	movi	r2,1
 8001a9c:	b80d883a 	mov	r6,r23
 8001aa0:	89001704 	addi	r4,r17,92
 8001aa4:	000b883a 	mov	r5,zero
 8001aa8:	88000015 	stw	zero,0(r17)
 8001aac:	88000115 	stw	zero,4(r17)
 8001ab0:	88000215 	stw	zero,8(r17)
 8001ab4:	88001915 	stw	zero,100(r17)
 8001ab8:	8880038d 	sth	r2,14(r17)
 8001abc:	88000415 	stw	zero,16(r17)
 8001ac0:	88000515 	stw	zero,20(r17)
 8001ac4:	88000615 	stw	zero,24(r17)
 8001ac8:	8002f300 	call	8002f30 <memset>
 8001acc:	94000317 	ldw	r16,12(r18)
 8001ad0:	00800484 	movi	r2,18
 8001ad4:	8c400715 	stw	r17,28(r17)
 8001ad8:	8d800815 	stw	r22,32(r17)
 8001adc:	8d400915 	stw	r21,36(r17)
 8001ae0:	8d000a15 	stw	r20,40(r17)
 8001ae4:	8cc00b15 	stw	r19,44(r17)
 8001ae8:	8080030d 	sth	r2,12(r16)
 8001aec:	00800084 	movi	r2,2
 8001af0:	80000015 	stw	zero,0(r16)
 8001af4:	80000115 	stw	zero,4(r16)
 8001af8:	80000215 	stw	zero,8(r16)
 8001afc:	80001915 	stw	zero,100(r16)
 8001b00:	8080038d 	sth	r2,14(r16)
 8001b04:	80000415 	stw	zero,16(r16)
 8001b08:	80000515 	stw	zero,20(r16)
 8001b0c:	80000615 	stw	zero,24(r16)
 8001b10:	b80d883a 	mov	r6,r23
 8001b14:	000b883a 	mov	r5,zero
 8001b18:	81001704 	addi	r4,r16,92
 8001b1c:	8002f300 	call	8002f30 <memset>
 8001b20:	00800044 	movi	r2,1
 8001b24:	84000715 	stw	r16,28(r16)
 8001b28:	85800815 	stw	r22,32(r16)
 8001b2c:	85400915 	stw	r21,36(r16)
 8001b30:	85000a15 	stw	r20,40(r16)
 8001b34:	84c00b15 	stw	r19,44(r16)
 8001b38:	90800e15 	stw	r2,56(r18)
 8001b3c:	dfc00817 	ldw	ra,32(sp)
 8001b40:	ddc00717 	ldw	r23,28(sp)
 8001b44:	dd800617 	ldw	r22,24(sp)
 8001b48:	dd400517 	ldw	r21,20(sp)
 8001b4c:	dd000417 	ldw	r20,16(sp)
 8001b50:	dcc00317 	ldw	r19,12(sp)
 8001b54:	dc800217 	ldw	r18,8(sp)
 8001b58:	dc400117 	ldw	r17,4(sp)
 8001b5c:	dc000017 	ldw	r16,0(sp)
 8001b60:	dec00904 	addi	sp,sp,36
 8001b64:	f800283a 	ret

08001b68 <__fp_lock>:
 8001b68:	0005883a 	mov	r2,zero
 8001b6c:	f800283a 	ret

08001b70 <__sfmoreglue>:
 8001b70:	defffc04 	addi	sp,sp,-16
 8001b74:	dc400115 	stw	r17,4(sp)
 8001b78:	2c7fffc4 	addi	r17,r5,-1
 8001b7c:	8c401a24 	muli	r17,r17,104
 8001b80:	dc800215 	stw	r18,8(sp)
 8001b84:	2825883a 	mov	r18,r5
 8001b88:	89401d04 	addi	r5,r17,116
 8001b8c:	dc000015 	stw	r16,0(sp)
 8001b90:	dfc00315 	stw	ra,12(sp)
 8001b94:	800239c0 	call	800239c <_malloc_r>
 8001b98:	1021883a 	mov	r16,r2
 8001b9c:	10000726 	beq	r2,zero,8001bbc <__sfmoreglue+0x4c>
 8001ba0:	11000304 	addi	r4,r2,12
 8001ba4:	10000015 	stw	zero,0(r2)
 8001ba8:	14800115 	stw	r18,4(r2)
 8001bac:	11000215 	stw	r4,8(r2)
 8001bb0:	89801a04 	addi	r6,r17,104
 8001bb4:	000b883a 	mov	r5,zero
 8001bb8:	8002f300 	call	8002f30 <memset>
 8001bbc:	8005883a 	mov	r2,r16
 8001bc0:	dfc00317 	ldw	ra,12(sp)
 8001bc4:	dc800217 	ldw	r18,8(sp)
 8001bc8:	dc400117 	ldw	r17,4(sp)
 8001bcc:	dc000017 	ldw	r16,0(sp)
 8001bd0:	dec00404 	addi	sp,sp,16
 8001bd4:	f800283a 	ret

08001bd8 <__sfp>:
 8001bd8:	defffb04 	addi	sp,sp,-20
 8001bdc:	dc000015 	stw	r16,0(sp)
 8001be0:	04020074 	movhi	r16,2049
 8001be4:	8421ec04 	addi	r16,r16,-30800
 8001be8:	dcc00315 	stw	r19,12(sp)
 8001bec:	2027883a 	mov	r19,r4
 8001bf0:	81000017 	ldw	r4,0(r16)
 8001bf4:	dfc00415 	stw	ra,16(sp)
 8001bf8:	dc800215 	stw	r18,8(sp)
 8001bfc:	20800e17 	ldw	r2,56(r4)
 8001c00:	dc400115 	stw	r17,4(sp)
 8001c04:	1000021e 	bne	r2,zero,8001c10 <__sfp+0x38>
 8001c08:	80019cc0 	call	80019cc <__sinit.part.1>
 8001c0c:	81000017 	ldw	r4,0(r16)
 8001c10:	2480b804 	addi	r18,r4,736
 8001c14:	047fffc4 	movi	r17,-1
 8001c18:	91000117 	ldw	r4,4(r18)
 8001c1c:	94000217 	ldw	r16,8(r18)
 8001c20:	213fffc4 	addi	r4,r4,-1
 8001c24:	20000a16 	blt	r4,zero,8001c50 <__sfp+0x78>
 8001c28:	8080030f 	ldh	r2,12(r16)
 8001c2c:	10000c26 	beq	r2,zero,8001c60 <__sfp+0x88>
 8001c30:	80c01d04 	addi	r3,r16,116
 8001c34:	00000206 	br	8001c40 <__sfp+0x68>
 8001c38:	18bfe60f 	ldh	r2,-104(r3)
 8001c3c:	10000826 	beq	r2,zero,8001c60 <__sfp+0x88>
 8001c40:	213fffc4 	addi	r4,r4,-1
 8001c44:	1c3ffd04 	addi	r16,r3,-12
 8001c48:	18c01a04 	addi	r3,r3,104
 8001c4c:	247ffa1e 	bne	r4,r17,8001c38 <__sfp+0x60>
 8001c50:	90800017 	ldw	r2,0(r18)
 8001c54:	10001d26 	beq	r2,zero,8001ccc <__sfp+0xf4>
 8001c58:	1025883a 	mov	r18,r2
 8001c5c:	003fee06 	br	8001c18 <__sfp+0x40>
 8001c60:	00bfffc4 	movi	r2,-1
 8001c64:	8080038d 	sth	r2,14(r16)
 8001c68:	00800044 	movi	r2,1
 8001c6c:	8080030d 	sth	r2,12(r16)
 8001c70:	80001915 	stw	zero,100(r16)
 8001c74:	80000015 	stw	zero,0(r16)
 8001c78:	80000215 	stw	zero,8(r16)
 8001c7c:	80000115 	stw	zero,4(r16)
 8001c80:	80000415 	stw	zero,16(r16)
 8001c84:	80000515 	stw	zero,20(r16)
 8001c88:	80000615 	stw	zero,24(r16)
 8001c8c:	01800204 	movi	r6,8
 8001c90:	000b883a 	mov	r5,zero
 8001c94:	81001704 	addi	r4,r16,92
 8001c98:	8002f300 	call	8002f30 <memset>
 8001c9c:	8005883a 	mov	r2,r16
 8001ca0:	80000c15 	stw	zero,48(r16)
 8001ca4:	80000d15 	stw	zero,52(r16)
 8001ca8:	80001115 	stw	zero,68(r16)
 8001cac:	80001215 	stw	zero,72(r16)
 8001cb0:	dfc00417 	ldw	ra,16(sp)
 8001cb4:	dcc00317 	ldw	r19,12(sp)
 8001cb8:	dc800217 	ldw	r18,8(sp)
 8001cbc:	dc400117 	ldw	r17,4(sp)
 8001cc0:	dc000017 	ldw	r16,0(sp)
 8001cc4:	dec00504 	addi	sp,sp,20
 8001cc8:	f800283a 	ret
 8001ccc:	01400104 	movi	r5,4
 8001cd0:	9809883a 	mov	r4,r19
 8001cd4:	8001b700 	call	8001b70 <__sfmoreglue>
 8001cd8:	90800015 	stw	r2,0(r18)
 8001cdc:	103fde1e 	bne	r2,zero,8001c58 <__sfp+0x80>
 8001ce0:	00800304 	movi	r2,12
 8001ce4:	98800015 	stw	r2,0(r19)
 8001ce8:	0005883a 	mov	r2,zero
 8001cec:	003ff006 	br	8001cb0 <__sfp+0xd8>

08001cf0 <_cleanup>:
 8001cf0:	00820074 	movhi	r2,2049
 8001cf4:	10a1ec04 	addi	r2,r2,-30800
 8001cf8:	11000017 	ldw	r4,0(r2)
 8001cfc:	01420034 	movhi	r5,2048
 8001d00:	294e5504 	addi	r5,r5,14676
 8001d04:	80022d81 	jmpi	80022d8 <_fwalk_reent>

08001d08 <__sinit>:
 8001d08:	20800e17 	ldw	r2,56(r4)
 8001d0c:	10000126 	beq	r2,zero,8001d14 <__sinit+0xc>
 8001d10:	f800283a 	ret
 8001d14:	80019cc1 	jmpi	80019cc <__sinit.part.1>

08001d18 <__sfp_lock_acquire>:
 8001d18:	f800283a 	ret

08001d1c <__sfp_lock_release>:
 8001d1c:	f800283a 	ret

08001d20 <__sinit_lock_acquire>:
 8001d20:	f800283a 	ret

08001d24 <__sinit_lock_release>:
 8001d24:	f800283a 	ret

08001d28 <__fp_lock_all>:
 8001d28:	00820074 	movhi	r2,2049
 8001d2c:	10a1ed04 	addi	r2,r2,-30796
 8001d30:	11000017 	ldw	r4,0(r2)
 8001d34:	01420034 	movhi	r5,2048
 8001d38:	2946da04 	addi	r5,r5,7016
 8001d3c:	80022141 	jmpi	8002214 <_fwalk>

08001d40 <__fp_unlock_all>:
 8001d40:	00820074 	movhi	r2,2049
 8001d44:	10a1ed04 	addi	r2,r2,-30796
 8001d48:	11000017 	ldw	r4,0(r2)
 8001d4c:	01420034 	movhi	r5,2048
 8001d50:	29466e04 	addi	r5,r5,6584
 8001d54:	80022141 	jmpi	8002214 <_fwalk>

08001d58 <__sfvwrite_r>:
 8001d58:	30800217 	ldw	r2,8(r6)
 8001d5c:	10006726 	beq	r2,zero,8001efc <__sfvwrite_r+0x1a4>
 8001d60:	28c0030b 	ldhu	r3,12(r5)
 8001d64:	defff404 	addi	sp,sp,-48
 8001d68:	dd400715 	stw	r21,28(sp)
 8001d6c:	dd000615 	stw	r20,24(sp)
 8001d70:	dc000215 	stw	r16,8(sp)
 8001d74:	dfc00b15 	stw	ra,44(sp)
 8001d78:	df000a15 	stw	fp,40(sp)
 8001d7c:	ddc00915 	stw	r23,36(sp)
 8001d80:	dd800815 	stw	r22,32(sp)
 8001d84:	dcc00515 	stw	r19,20(sp)
 8001d88:	dc800415 	stw	r18,16(sp)
 8001d8c:	dc400315 	stw	r17,12(sp)
 8001d90:	1880020c 	andi	r2,r3,8
 8001d94:	2821883a 	mov	r16,r5
 8001d98:	202b883a 	mov	r21,r4
 8001d9c:	3029883a 	mov	r20,r6
 8001da0:	10002726 	beq	r2,zero,8001e40 <__sfvwrite_r+0xe8>
 8001da4:	28800417 	ldw	r2,16(r5)
 8001da8:	10002526 	beq	r2,zero,8001e40 <__sfvwrite_r+0xe8>
 8001dac:	1880008c 	andi	r2,r3,2
 8001db0:	a4400017 	ldw	r17,0(r20)
 8001db4:	10002a26 	beq	r2,zero,8001e60 <__sfvwrite_r+0x108>
 8001db8:	05a00034 	movhi	r22,32768
 8001dbc:	0027883a 	mov	r19,zero
 8001dc0:	0025883a 	mov	r18,zero
 8001dc4:	b5bf0004 	addi	r22,r22,-1024
 8001dc8:	980d883a 	mov	r6,r19
 8001dcc:	a809883a 	mov	r4,r21
 8001dd0:	90004626 	beq	r18,zero,8001eec <__sfvwrite_r+0x194>
 8001dd4:	900f883a 	mov	r7,r18
 8001dd8:	b480022e 	bgeu	r22,r18,8001de4 <__sfvwrite_r+0x8c>
 8001ddc:	01e00034 	movhi	r7,32768
 8001de0:	39ff0004 	addi	r7,r7,-1024
 8001de4:	80800917 	ldw	r2,36(r16)
 8001de8:	81400717 	ldw	r5,28(r16)
 8001dec:	103ee83a 	callr	r2
 8001df0:	0080570e 	bge	zero,r2,8001f50 <__sfvwrite_r+0x1f8>
 8001df4:	a0c00217 	ldw	r3,8(r20)
 8001df8:	98a7883a 	add	r19,r19,r2
 8001dfc:	90a5c83a 	sub	r18,r18,r2
 8001e00:	1885c83a 	sub	r2,r3,r2
 8001e04:	a0800215 	stw	r2,8(r20)
 8001e08:	103fef1e 	bne	r2,zero,8001dc8 <__sfvwrite_r+0x70>
 8001e0c:	0005883a 	mov	r2,zero
 8001e10:	dfc00b17 	ldw	ra,44(sp)
 8001e14:	df000a17 	ldw	fp,40(sp)
 8001e18:	ddc00917 	ldw	r23,36(sp)
 8001e1c:	dd800817 	ldw	r22,32(sp)
 8001e20:	dd400717 	ldw	r21,28(sp)
 8001e24:	dd000617 	ldw	r20,24(sp)
 8001e28:	dcc00517 	ldw	r19,20(sp)
 8001e2c:	dc800417 	ldw	r18,16(sp)
 8001e30:	dc400317 	ldw	r17,12(sp)
 8001e34:	dc000217 	ldw	r16,8(sp)
 8001e38:	dec00c04 	addi	sp,sp,48
 8001e3c:	f800283a 	ret
 8001e40:	800b883a 	mov	r5,r16
 8001e44:	a809883a 	mov	r4,r21
 8001e48:	80037ac0 	call	80037ac <__swsetup_r>
 8001e4c:	1000eb1e 	bne	r2,zero,80021fc <__sfvwrite_r+0x4a4>
 8001e50:	80c0030b 	ldhu	r3,12(r16)
 8001e54:	a4400017 	ldw	r17,0(r20)
 8001e58:	1880008c 	andi	r2,r3,2
 8001e5c:	103fd61e 	bne	r2,zero,8001db8 <__sfvwrite_r+0x60>
 8001e60:	1880004c 	andi	r2,r3,1
 8001e64:	10003f1e 	bne	r2,zero,8001f64 <__sfvwrite_r+0x20c>
 8001e68:	0039883a 	mov	fp,zero
 8001e6c:	0025883a 	mov	r18,zero
 8001e70:	90001a26 	beq	r18,zero,8001edc <__sfvwrite_r+0x184>
 8001e74:	1880800c 	andi	r2,r3,512
 8001e78:	84c00217 	ldw	r19,8(r16)
 8001e7c:	10002126 	beq	r2,zero,8001f04 <__sfvwrite_r+0x1ac>
 8001e80:	982f883a 	mov	r23,r19
 8001e84:	94c09336 	bltu	r18,r19,80020d4 <__sfvwrite_r+0x37c>
 8001e88:	1881200c 	andi	r2,r3,1152
 8001e8c:	10009e1e 	bne	r2,zero,8002108 <__sfvwrite_r+0x3b0>
 8001e90:	81000017 	ldw	r4,0(r16)
 8001e94:	b80d883a 	mov	r6,r23
 8001e98:	e00b883a 	mov	r5,fp
 8001e9c:	8002dd40 	call	8002dd4 <memmove>
 8001ea0:	80c00217 	ldw	r3,8(r16)
 8001ea4:	81000017 	ldw	r4,0(r16)
 8001ea8:	9005883a 	mov	r2,r18
 8001eac:	1ce7c83a 	sub	r19,r3,r19
 8001eb0:	25cf883a 	add	r7,r4,r23
 8001eb4:	84c00215 	stw	r19,8(r16)
 8001eb8:	81c00015 	stw	r7,0(r16)
 8001ebc:	a0c00217 	ldw	r3,8(r20)
 8001ec0:	e0b9883a 	add	fp,fp,r2
 8001ec4:	90a5c83a 	sub	r18,r18,r2
 8001ec8:	18a7c83a 	sub	r19,r3,r2
 8001ecc:	a4c00215 	stw	r19,8(r20)
 8001ed0:	983fce26 	beq	r19,zero,8001e0c <__sfvwrite_r+0xb4>
 8001ed4:	80c0030b 	ldhu	r3,12(r16)
 8001ed8:	903fe61e 	bne	r18,zero,8001e74 <__sfvwrite_r+0x11c>
 8001edc:	8f000017 	ldw	fp,0(r17)
 8001ee0:	8c800117 	ldw	r18,4(r17)
 8001ee4:	8c400204 	addi	r17,r17,8
 8001ee8:	003fe106 	br	8001e70 <__sfvwrite_r+0x118>
 8001eec:	8cc00017 	ldw	r19,0(r17)
 8001ef0:	8c800117 	ldw	r18,4(r17)
 8001ef4:	8c400204 	addi	r17,r17,8
 8001ef8:	003fb306 	br	8001dc8 <__sfvwrite_r+0x70>
 8001efc:	0005883a 	mov	r2,zero
 8001f00:	f800283a 	ret
 8001f04:	81000017 	ldw	r4,0(r16)
 8001f08:	80800417 	ldw	r2,16(r16)
 8001f0c:	11005736 	bltu	r2,r4,800206c <__sfvwrite_r+0x314>
 8001f10:	85c00517 	ldw	r23,20(r16)
 8001f14:	95c05536 	bltu	r18,r23,800206c <__sfvwrite_r+0x314>
 8001f18:	00a00034 	movhi	r2,32768
 8001f1c:	10bfffc4 	addi	r2,r2,-1
 8001f20:	9009883a 	mov	r4,r18
 8001f24:	1480012e 	bgeu	r2,r18,8001f2c <__sfvwrite_r+0x1d4>
 8001f28:	1009883a 	mov	r4,r2
 8001f2c:	b80b883a 	mov	r5,r23
 8001f30:	800161c0 	call	800161c <__divsi3>
 8001f34:	15cf383a 	mul	r7,r2,r23
 8001f38:	81400717 	ldw	r5,28(r16)
 8001f3c:	80800917 	ldw	r2,36(r16)
 8001f40:	e00d883a 	mov	r6,fp
 8001f44:	a809883a 	mov	r4,r21
 8001f48:	103ee83a 	callr	r2
 8001f4c:	00bfdb16 	blt	zero,r2,8001ebc <__sfvwrite_r+0x164>
 8001f50:	8080030b 	ldhu	r2,12(r16)
 8001f54:	10801014 	ori	r2,r2,64
 8001f58:	8080030d 	sth	r2,12(r16)
 8001f5c:	00bfffc4 	movi	r2,-1
 8001f60:	003fab06 	br	8001e10 <__sfvwrite_r+0xb8>
 8001f64:	0027883a 	mov	r19,zero
 8001f68:	0011883a 	mov	r8,zero
 8001f6c:	0039883a 	mov	fp,zero
 8001f70:	0025883a 	mov	r18,zero
 8001f74:	90001f26 	beq	r18,zero,8001ff4 <__sfvwrite_r+0x29c>
 8001f78:	40005a26 	beq	r8,zero,80020e4 <__sfvwrite_r+0x38c>
 8001f7c:	982d883a 	mov	r22,r19
 8001f80:	94c0012e 	bgeu	r18,r19,8001f88 <__sfvwrite_r+0x230>
 8001f84:	902d883a 	mov	r22,r18
 8001f88:	81000017 	ldw	r4,0(r16)
 8001f8c:	80800417 	ldw	r2,16(r16)
 8001f90:	b02f883a 	mov	r23,r22
 8001f94:	81c00517 	ldw	r7,20(r16)
 8001f98:	1100032e 	bgeu	r2,r4,8001fa8 <__sfvwrite_r+0x250>
 8001f9c:	80c00217 	ldw	r3,8(r16)
 8001fa0:	38c7883a 	add	r3,r7,r3
 8001fa4:	1d801816 	blt	r3,r22,8002008 <__sfvwrite_r+0x2b0>
 8001fa8:	b1c03e16 	blt	r22,r7,80020a4 <__sfvwrite_r+0x34c>
 8001fac:	80800917 	ldw	r2,36(r16)
 8001fb0:	81400717 	ldw	r5,28(r16)
 8001fb4:	e00d883a 	mov	r6,fp
 8001fb8:	da000115 	stw	r8,4(sp)
 8001fbc:	a809883a 	mov	r4,r21
 8001fc0:	103ee83a 	callr	r2
 8001fc4:	102f883a 	mov	r23,r2
 8001fc8:	da000117 	ldw	r8,4(sp)
 8001fcc:	00bfe00e 	bge	zero,r2,8001f50 <__sfvwrite_r+0x1f8>
 8001fd0:	9de7c83a 	sub	r19,r19,r23
 8001fd4:	98001f26 	beq	r19,zero,8002054 <__sfvwrite_r+0x2fc>
 8001fd8:	a0800217 	ldw	r2,8(r20)
 8001fdc:	e5f9883a 	add	fp,fp,r23
 8001fe0:	95e5c83a 	sub	r18,r18,r23
 8001fe4:	15efc83a 	sub	r23,r2,r23
 8001fe8:	a5c00215 	stw	r23,8(r20)
 8001fec:	b83f8726 	beq	r23,zero,8001e0c <__sfvwrite_r+0xb4>
 8001ff0:	903fe11e 	bne	r18,zero,8001f78 <__sfvwrite_r+0x220>
 8001ff4:	8f000017 	ldw	fp,0(r17)
 8001ff8:	8c800117 	ldw	r18,4(r17)
 8001ffc:	0011883a 	mov	r8,zero
 8002000:	8c400204 	addi	r17,r17,8
 8002004:	003fdb06 	br	8001f74 <__sfvwrite_r+0x21c>
 8002008:	180d883a 	mov	r6,r3
 800200c:	e00b883a 	mov	r5,fp
 8002010:	da000115 	stw	r8,4(sp)
 8002014:	d8c00015 	stw	r3,0(sp)
 8002018:	8002dd40 	call	8002dd4 <memmove>
 800201c:	d8c00017 	ldw	r3,0(sp)
 8002020:	80800017 	ldw	r2,0(r16)
 8002024:	800b883a 	mov	r5,r16
 8002028:	a809883a 	mov	r4,r21
 800202c:	10c5883a 	add	r2,r2,r3
 8002030:	80800015 	stw	r2,0(r16)
 8002034:	d8c00015 	stw	r3,0(sp)
 8002038:	8003c740 	call	8003c74 <_fflush_r>
 800203c:	d8c00017 	ldw	r3,0(sp)
 8002040:	da000117 	ldw	r8,4(sp)
 8002044:	103fc21e 	bne	r2,zero,8001f50 <__sfvwrite_r+0x1f8>
 8002048:	182f883a 	mov	r23,r3
 800204c:	9de7c83a 	sub	r19,r19,r23
 8002050:	983fe11e 	bne	r19,zero,8001fd8 <__sfvwrite_r+0x280>
 8002054:	800b883a 	mov	r5,r16
 8002058:	a809883a 	mov	r4,r21
 800205c:	8003c740 	call	8003c74 <_fflush_r>
 8002060:	103fbb1e 	bne	r2,zero,8001f50 <__sfvwrite_r+0x1f8>
 8002064:	0011883a 	mov	r8,zero
 8002068:	003fdb06 	br	8001fd8 <__sfvwrite_r+0x280>
 800206c:	94c0012e 	bgeu	r18,r19,8002074 <__sfvwrite_r+0x31c>
 8002070:	9027883a 	mov	r19,r18
 8002074:	980d883a 	mov	r6,r19
 8002078:	e00b883a 	mov	r5,fp
 800207c:	8002dd40 	call	8002dd4 <memmove>
 8002080:	80800217 	ldw	r2,8(r16)
 8002084:	80c00017 	ldw	r3,0(r16)
 8002088:	14c5c83a 	sub	r2,r2,r19
 800208c:	1cc7883a 	add	r3,r3,r19
 8002090:	80800215 	stw	r2,8(r16)
 8002094:	80c00015 	stw	r3,0(r16)
 8002098:	10004326 	beq	r2,zero,80021a8 <__sfvwrite_r+0x450>
 800209c:	9805883a 	mov	r2,r19
 80020a0:	003f8606 	br	8001ebc <__sfvwrite_r+0x164>
 80020a4:	b00d883a 	mov	r6,r22
 80020a8:	e00b883a 	mov	r5,fp
 80020ac:	da000115 	stw	r8,4(sp)
 80020b0:	8002dd40 	call	8002dd4 <memmove>
 80020b4:	80800217 	ldw	r2,8(r16)
 80020b8:	80c00017 	ldw	r3,0(r16)
 80020bc:	da000117 	ldw	r8,4(sp)
 80020c0:	1585c83a 	sub	r2,r2,r22
 80020c4:	1dad883a 	add	r22,r3,r22
 80020c8:	80800215 	stw	r2,8(r16)
 80020cc:	85800015 	stw	r22,0(r16)
 80020d0:	003fbf06 	br	8001fd0 <__sfvwrite_r+0x278>
 80020d4:	81000017 	ldw	r4,0(r16)
 80020d8:	9027883a 	mov	r19,r18
 80020dc:	902f883a 	mov	r23,r18
 80020e0:	003f6c06 	br	8001e94 <__sfvwrite_r+0x13c>
 80020e4:	900d883a 	mov	r6,r18
 80020e8:	01400284 	movi	r5,10
 80020ec:	e009883a 	mov	r4,fp
 80020f0:	8002ba80 	call	8002ba8 <memchr>
 80020f4:	10003e26 	beq	r2,zero,80021f0 <__sfvwrite_r+0x498>
 80020f8:	10800044 	addi	r2,r2,1
 80020fc:	1727c83a 	sub	r19,r2,fp
 8002100:	02000044 	movi	r8,1
 8002104:	003f9d06 	br	8001f7c <__sfvwrite_r+0x224>
 8002108:	80800517 	ldw	r2,20(r16)
 800210c:	81400417 	ldw	r5,16(r16)
 8002110:	81c00017 	ldw	r7,0(r16)
 8002114:	10a7883a 	add	r19,r2,r2
 8002118:	9885883a 	add	r2,r19,r2
 800211c:	1026d7fa 	srli	r19,r2,31
 8002120:	396dc83a 	sub	r22,r7,r5
 8002124:	b1000044 	addi	r4,r22,1
 8002128:	9885883a 	add	r2,r19,r2
 800212c:	1027d07a 	srai	r19,r2,1
 8002130:	2485883a 	add	r2,r4,r18
 8002134:	980d883a 	mov	r6,r19
 8002138:	9880022e 	bgeu	r19,r2,8002144 <__sfvwrite_r+0x3ec>
 800213c:	1027883a 	mov	r19,r2
 8002140:	100d883a 	mov	r6,r2
 8002144:	18c1000c 	andi	r3,r3,1024
 8002148:	18001c26 	beq	r3,zero,80021bc <__sfvwrite_r+0x464>
 800214c:	300b883a 	mov	r5,r6
 8002150:	a809883a 	mov	r4,r21
 8002154:	800239c0 	call	800239c <_malloc_r>
 8002158:	102f883a 	mov	r23,r2
 800215c:	10002926 	beq	r2,zero,8002204 <__sfvwrite_r+0x4ac>
 8002160:	81400417 	ldw	r5,16(r16)
 8002164:	b00d883a 	mov	r6,r22
 8002168:	1009883a 	mov	r4,r2
 800216c:	8002c8c0 	call	8002c8c <memcpy>
 8002170:	8080030b 	ldhu	r2,12(r16)
 8002174:	00fedfc4 	movi	r3,-1153
 8002178:	10c4703a 	and	r2,r2,r3
 800217c:	10802014 	ori	r2,r2,128
 8002180:	8080030d 	sth	r2,12(r16)
 8002184:	bd89883a 	add	r4,r23,r22
 8002188:	9d8fc83a 	sub	r7,r19,r22
 800218c:	85c00415 	stw	r23,16(r16)
 8002190:	84c00515 	stw	r19,20(r16)
 8002194:	81000015 	stw	r4,0(r16)
 8002198:	9027883a 	mov	r19,r18
 800219c:	81c00215 	stw	r7,8(r16)
 80021a0:	902f883a 	mov	r23,r18
 80021a4:	003f3b06 	br	8001e94 <__sfvwrite_r+0x13c>
 80021a8:	800b883a 	mov	r5,r16
 80021ac:	a809883a 	mov	r4,r21
 80021b0:	8003c740 	call	8003c74 <_fflush_r>
 80021b4:	103fb926 	beq	r2,zero,800209c <__sfvwrite_r+0x344>
 80021b8:	003f6506 	br	8001f50 <__sfvwrite_r+0x1f8>
 80021bc:	a809883a 	mov	r4,r21
 80021c0:	80030580 	call	8003058 <_realloc_r>
 80021c4:	102f883a 	mov	r23,r2
 80021c8:	103fee1e 	bne	r2,zero,8002184 <__sfvwrite_r+0x42c>
 80021cc:	81400417 	ldw	r5,16(r16)
 80021d0:	a809883a 	mov	r4,r21
 80021d4:	8003e240 	call	8003e24 <_free_r>
 80021d8:	8080030b 	ldhu	r2,12(r16)
 80021dc:	00ffdfc4 	movi	r3,-129
 80021e0:	1884703a 	and	r2,r3,r2
 80021e4:	00c00304 	movi	r3,12
 80021e8:	a8c00015 	stw	r3,0(r21)
 80021ec:	003f5906 	br	8001f54 <__sfvwrite_r+0x1fc>
 80021f0:	94c00044 	addi	r19,r18,1
 80021f4:	02000044 	movi	r8,1
 80021f8:	003f6006 	br	8001f7c <__sfvwrite_r+0x224>
 80021fc:	00bfffc4 	movi	r2,-1
 8002200:	003f0306 	br	8001e10 <__sfvwrite_r+0xb8>
 8002204:	00800304 	movi	r2,12
 8002208:	a8800015 	stw	r2,0(r21)
 800220c:	8080030b 	ldhu	r2,12(r16)
 8002210:	003f5006 	br	8001f54 <__sfvwrite_r+0x1fc>

08002214 <_fwalk>:
 8002214:	defff704 	addi	sp,sp,-36
 8002218:	dd000415 	stw	r20,16(sp)
 800221c:	dfc00815 	stw	ra,32(sp)
 8002220:	ddc00715 	stw	r23,28(sp)
 8002224:	dd800615 	stw	r22,24(sp)
 8002228:	dd400515 	stw	r21,20(sp)
 800222c:	dcc00315 	stw	r19,12(sp)
 8002230:	dc800215 	stw	r18,8(sp)
 8002234:	dc400115 	stw	r17,4(sp)
 8002238:	dc000015 	stw	r16,0(sp)
 800223c:	2500b804 	addi	r20,r4,736
 8002240:	a0002326 	beq	r20,zero,80022d0 <_fwalk+0xbc>
 8002244:	282b883a 	mov	r21,r5
 8002248:	002f883a 	mov	r23,zero
 800224c:	05800044 	movi	r22,1
 8002250:	04ffffc4 	movi	r19,-1
 8002254:	a4400117 	ldw	r17,4(r20)
 8002258:	a4800217 	ldw	r18,8(r20)
 800225c:	8c7fffc4 	addi	r17,r17,-1
 8002260:	88000d16 	blt	r17,zero,8002298 <_fwalk+0x84>
 8002264:	94000304 	addi	r16,r18,12
 8002268:	94800384 	addi	r18,r18,14
 800226c:	8080000b 	ldhu	r2,0(r16)
 8002270:	8c7fffc4 	addi	r17,r17,-1
 8002274:	813ffd04 	addi	r4,r16,-12
 8002278:	b080042e 	bgeu	r22,r2,800228c <_fwalk+0x78>
 800227c:	9080000f 	ldh	r2,0(r18)
 8002280:	14c00226 	beq	r2,r19,800228c <_fwalk+0x78>
 8002284:	a83ee83a 	callr	r21
 8002288:	b8aeb03a 	or	r23,r23,r2
 800228c:	84001a04 	addi	r16,r16,104
 8002290:	94801a04 	addi	r18,r18,104
 8002294:	8cfff51e 	bne	r17,r19,800226c <_fwalk+0x58>
 8002298:	a5000017 	ldw	r20,0(r20)
 800229c:	a03fed1e 	bne	r20,zero,8002254 <_fwalk+0x40>
 80022a0:	b805883a 	mov	r2,r23
 80022a4:	dfc00817 	ldw	ra,32(sp)
 80022a8:	ddc00717 	ldw	r23,28(sp)
 80022ac:	dd800617 	ldw	r22,24(sp)
 80022b0:	dd400517 	ldw	r21,20(sp)
 80022b4:	dd000417 	ldw	r20,16(sp)
 80022b8:	dcc00317 	ldw	r19,12(sp)
 80022bc:	dc800217 	ldw	r18,8(sp)
 80022c0:	dc400117 	ldw	r17,4(sp)
 80022c4:	dc000017 	ldw	r16,0(sp)
 80022c8:	dec00904 	addi	sp,sp,36
 80022cc:	f800283a 	ret
 80022d0:	002f883a 	mov	r23,zero
 80022d4:	003ff206 	br	80022a0 <_fwalk+0x8c>

080022d8 <_fwalk_reent>:
 80022d8:	defff704 	addi	sp,sp,-36
 80022dc:	dd000415 	stw	r20,16(sp)
 80022e0:	dfc00815 	stw	ra,32(sp)
 80022e4:	ddc00715 	stw	r23,28(sp)
 80022e8:	dd800615 	stw	r22,24(sp)
 80022ec:	dd400515 	stw	r21,20(sp)
 80022f0:	dcc00315 	stw	r19,12(sp)
 80022f4:	dc800215 	stw	r18,8(sp)
 80022f8:	dc400115 	stw	r17,4(sp)
 80022fc:	dc000015 	stw	r16,0(sp)
 8002300:	2500b804 	addi	r20,r4,736
 8002304:	a0002326 	beq	r20,zero,8002394 <_fwalk_reent+0xbc>
 8002308:	282b883a 	mov	r21,r5
 800230c:	2027883a 	mov	r19,r4
 8002310:	002f883a 	mov	r23,zero
 8002314:	05800044 	movi	r22,1
 8002318:	04bfffc4 	movi	r18,-1
 800231c:	a4400117 	ldw	r17,4(r20)
 8002320:	a4000217 	ldw	r16,8(r20)
 8002324:	8c7fffc4 	addi	r17,r17,-1
 8002328:	88000c16 	blt	r17,zero,800235c <_fwalk_reent+0x84>
 800232c:	84000304 	addi	r16,r16,12
 8002330:	8080000b 	ldhu	r2,0(r16)
 8002334:	8c7fffc4 	addi	r17,r17,-1
 8002338:	817ffd04 	addi	r5,r16,-12
 800233c:	b080052e 	bgeu	r22,r2,8002354 <_fwalk_reent+0x7c>
 8002340:	8080008f 	ldh	r2,2(r16)
 8002344:	9809883a 	mov	r4,r19
 8002348:	14800226 	beq	r2,r18,8002354 <_fwalk_reent+0x7c>
 800234c:	a83ee83a 	callr	r21
 8002350:	b8aeb03a 	or	r23,r23,r2
 8002354:	84001a04 	addi	r16,r16,104
 8002358:	8cbff51e 	bne	r17,r18,8002330 <_fwalk_reent+0x58>
 800235c:	a5000017 	ldw	r20,0(r20)
 8002360:	a03fee1e 	bne	r20,zero,800231c <_fwalk_reent+0x44>
 8002364:	b805883a 	mov	r2,r23
 8002368:	dfc00817 	ldw	ra,32(sp)
 800236c:	ddc00717 	ldw	r23,28(sp)
 8002370:	dd800617 	ldw	r22,24(sp)
 8002374:	dd400517 	ldw	r21,20(sp)
 8002378:	dd000417 	ldw	r20,16(sp)
 800237c:	dcc00317 	ldw	r19,12(sp)
 8002380:	dc800217 	ldw	r18,8(sp)
 8002384:	dc400117 	ldw	r17,4(sp)
 8002388:	dc000017 	ldw	r16,0(sp)
 800238c:	dec00904 	addi	sp,sp,36
 8002390:	f800283a 	ret
 8002394:	002f883a 	mov	r23,zero
 8002398:	003ff206 	br	8002364 <_fwalk_reent+0x8c>

0800239c <_malloc_r>:
 800239c:	defff504 	addi	sp,sp,-44
 80023a0:	dc800315 	stw	r18,12(sp)
 80023a4:	dfc00a15 	stw	ra,40(sp)
 80023a8:	df000915 	stw	fp,36(sp)
 80023ac:	ddc00815 	stw	r23,32(sp)
 80023b0:	dd800715 	stw	r22,28(sp)
 80023b4:	dd400615 	stw	r21,24(sp)
 80023b8:	dd000515 	stw	r20,20(sp)
 80023bc:	dcc00415 	stw	r19,16(sp)
 80023c0:	dc400215 	stw	r17,8(sp)
 80023c4:	dc000115 	stw	r16,4(sp)
 80023c8:	288002c4 	addi	r2,r5,11
 80023cc:	00c00584 	movi	r3,22
 80023d0:	2025883a 	mov	r18,r4
 80023d4:	18807f2e 	bgeu	r3,r2,80025d4 <_malloc_r+0x238>
 80023d8:	047ffe04 	movi	r17,-8
 80023dc:	1462703a 	and	r17,r2,r17
 80023e0:	8800a316 	blt	r17,zero,8002670 <_malloc_r+0x2d4>
 80023e4:	8940a236 	bltu	r17,r5,8002670 <_malloc_r+0x2d4>
 80023e8:	8004a3c0 	call	8004a3c <__malloc_lock>
 80023ec:	00807dc4 	movi	r2,503
 80023f0:	1441e92e 	bgeu	r2,r17,8002b98 <_malloc_r+0x7fc>
 80023f4:	8804d27a 	srli	r2,r17,9
 80023f8:	1000a126 	beq	r2,zero,8002680 <_malloc_r+0x2e4>
 80023fc:	00c00104 	movi	r3,4
 8002400:	18811e36 	bltu	r3,r2,800287c <_malloc_r+0x4e0>
 8002404:	8804d1ba 	srli	r2,r17,6
 8002408:	12000e44 	addi	r8,r2,57
 800240c:	11c00e04 	addi	r7,r2,56
 8002410:	4209883a 	add	r4,r8,r8
 8002414:	04c20034 	movhi	r19,2048
 8002418:	2109883a 	add	r4,r4,r4
 800241c:	9cdc6804 	addi	r19,r19,29088
 8002420:	2109883a 	add	r4,r4,r4
 8002424:	9909883a 	add	r4,r19,r4
 8002428:	24000117 	ldw	r16,4(r4)
 800242c:	213ffe04 	addi	r4,r4,-8
 8002430:	24009726 	beq	r4,r16,8002690 <_malloc_r+0x2f4>
 8002434:	80800117 	ldw	r2,4(r16)
 8002438:	01bfff04 	movi	r6,-4
 800243c:	014003c4 	movi	r5,15
 8002440:	1184703a 	and	r2,r2,r6
 8002444:	1447c83a 	sub	r3,r2,r17
 8002448:	28c00716 	blt	r5,r3,8002468 <_malloc_r+0xcc>
 800244c:	1800920e 	bge	r3,zero,8002698 <_malloc_r+0x2fc>
 8002450:	84000317 	ldw	r16,12(r16)
 8002454:	24008e26 	beq	r4,r16,8002690 <_malloc_r+0x2f4>
 8002458:	80800117 	ldw	r2,4(r16)
 800245c:	1184703a 	and	r2,r2,r6
 8002460:	1447c83a 	sub	r3,r2,r17
 8002464:	28fff90e 	bge	r5,r3,800244c <_malloc_r+0xb0>
 8002468:	3809883a 	mov	r4,r7
 800246c:	01820034 	movhi	r6,2048
 8002470:	9c000417 	ldw	r16,16(r19)
 8002474:	319c6804 	addi	r6,r6,29088
 8002478:	32000204 	addi	r8,r6,8
 800247c:	82013426 	beq	r16,r8,8002950 <_malloc_r+0x5b4>
 8002480:	80c00117 	ldw	r3,4(r16)
 8002484:	00bfff04 	movi	r2,-4
 8002488:	188e703a 	and	r7,r3,r2
 800248c:	3c45c83a 	sub	r2,r7,r17
 8002490:	00c003c4 	movi	r3,15
 8002494:	18811f16 	blt	r3,r2,8002914 <_malloc_r+0x578>
 8002498:	32000515 	stw	r8,20(r6)
 800249c:	32000415 	stw	r8,16(r6)
 80024a0:	10007f0e 	bge	r2,zero,80026a0 <_malloc_r+0x304>
 80024a4:	00807fc4 	movi	r2,511
 80024a8:	11c0fd36 	bltu	r2,r7,80028a0 <_malloc_r+0x504>
 80024ac:	3806d0fa 	srli	r3,r7,3
 80024b0:	01c00044 	movi	r7,1
 80024b4:	30800117 	ldw	r2,4(r6)
 80024b8:	19400044 	addi	r5,r3,1
 80024bc:	294b883a 	add	r5,r5,r5
 80024c0:	1807d0ba 	srai	r3,r3,2
 80024c4:	294b883a 	add	r5,r5,r5
 80024c8:	294b883a 	add	r5,r5,r5
 80024cc:	298b883a 	add	r5,r5,r6
 80024d0:	38c6983a 	sll	r3,r7,r3
 80024d4:	29c00017 	ldw	r7,0(r5)
 80024d8:	2a7ffe04 	addi	r9,r5,-8
 80024dc:	1886b03a 	or	r3,r3,r2
 80024e0:	82400315 	stw	r9,12(r16)
 80024e4:	81c00215 	stw	r7,8(r16)
 80024e8:	30c00115 	stw	r3,4(r6)
 80024ec:	2c000015 	stw	r16,0(r5)
 80024f0:	3c000315 	stw	r16,12(r7)
 80024f4:	2005d0ba 	srai	r2,r4,2
 80024f8:	01400044 	movi	r5,1
 80024fc:	288a983a 	sll	r5,r5,r2
 8002500:	19406f36 	bltu	r3,r5,80026c0 <_malloc_r+0x324>
 8002504:	28c4703a 	and	r2,r5,r3
 8002508:	10000a1e 	bne	r2,zero,8002534 <_malloc_r+0x198>
 800250c:	00bfff04 	movi	r2,-4
 8002510:	294b883a 	add	r5,r5,r5
 8002514:	2088703a 	and	r4,r4,r2
 8002518:	28c4703a 	and	r2,r5,r3
 800251c:	21000104 	addi	r4,r4,4
 8002520:	1000041e 	bne	r2,zero,8002534 <_malloc_r+0x198>
 8002524:	294b883a 	add	r5,r5,r5
 8002528:	28c4703a 	and	r2,r5,r3
 800252c:	21000104 	addi	r4,r4,4
 8002530:	103ffc26 	beq	r2,zero,8002524 <_malloc_r+0x188>
 8002534:	02bfff04 	movi	r10,-4
 8002538:	024003c4 	movi	r9,15
 800253c:	21800044 	addi	r6,r4,1
 8002540:	318d883a 	add	r6,r6,r6
 8002544:	318d883a 	add	r6,r6,r6
 8002548:	318d883a 	add	r6,r6,r6
 800254c:	998d883a 	add	r6,r19,r6
 8002550:	333ffe04 	addi	r12,r6,-8
 8002554:	2017883a 	mov	r11,r4
 8002558:	31800104 	addi	r6,r6,4
 800255c:	34000017 	ldw	r16,0(r6)
 8002560:	31fffd04 	addi	r7,r6,-12
 8002564:	81c0041e 	bne	r16,r7,8002578 <_malloc_r+0x1dc>
 8002568:	0000fb06 	br	8002958 <_malloc_r+0x5bc>
 800256c:	1801030e 	bge	r3,zero,800297c <_malloc_r+0x5e0>
 8002570:	84000317 	ldw	r16,12(r16)
 8002574:	81c0f826 	beq	r16,r7,8002958 <_malloc_r+0x5bc>
 8002578:	80800117 	ldw	r2,4(r16)
 800257c:	1284703a 	and	r2,r2,r10
 8002580:	1447c83a 	sub	r3,r2,r17
 8002584:	48fff90e 	bge	r9,r3,800256c <_malloc_r+0x1d0>
 8002588:	80800317 	ldw	r2,12(r16)
 800258c:	81000217 	ldw	r4,8(r16)
 8002590:	89400054 	ori	r5,r17,1
 8002594:	81400115 	stw	r5,4(r16)
 8002598:	20800315 	stw	r2,12(r4)
 800259c:	11000215 	stw	r4,8(r2)
 80025a0:	8463883a 	add	r17,r16,r17
 80025a4:	9c400515 	stw	r17,20(r19)
 80025a8:	9c400415 	stw	r17,16(r19)
 80025ac:	18800054 	ori	r2,r3,1
 80025b0:	88800115 	stw	r2,4(r17)
 80025b4:	8a000315 	stw	r8,12(r17)
 80025b8:	8a000215 	stw	r8,8(r17)
 80025bc:	88e3883a 	add	r17,r17,r3
 80025c0:	88c00015 	stw	r3,0(r17)
 80025c4:	9009883a 	mov	r4,r18
 80025c8:	8004a600 	call	8004a60 <__malloc_unlock>
 80025cc:	80800204 	addi	r2,r16,8
 80025d0:	00001b06 	br	8002640 <_malloc_r+0x2a4>
 80025d4:	04400404 	movi	r17,16
 80025d8:	89402536 	bltu	r17,r5,8002670 <_malloc_r+0x2d4>
 80025dc:	8004a3c0 	call	8004a3c <__malloc_lock>
 80025e0:	00800184 	movi	r2,6
 80025e4:	01000084 	movi	r4,2
 80025e8:	04c20034 	movhi	r19,2048
 80025ec:	1085883a 	add	r2,r2,r2
 80025f0:	9cdc6804 	addi	r19,r19,29088
 80025f4:	1085883a 	add	r2,r2,r2
 80025f8:	9885883a 	add	r2,r19,r2
 80025fc:	14000117 	ldw	r16,4(r2)
 8002600:	10fffe04 	addi	r3,r2,-8
 8002604:	80c0d926 	beq	r16,r3,800296c <_malloc_r+0x5d0>
 8002608:	80c00117 	ldw	r3,4(r16)
 800260c:	81000317 	ldw	r4,12(r16)
 8002610:	00bfff04 	movi	r2,-4
 8002614:	1884703a 	and	r2,r3,r2
 8002618:	81400217 	ldw	r5,8(r16)
 800261c:	8085883a 	add	r2,r16,r2
 8002620:	10c00117 	ldw	r3,4(r2)
 8002624:	29000315 	stw	r4,12(r5)
 8002628:	21400215 	stw	r5,8(r4)
 800262c:	18c00054 	ori	r3,r3,1
 8002630:	10c00115 	stw	r3,4(r2)
 8002634:	9009883a 	mov	r4,r18
 8002638:	8004a600 	call	8004a60 <__malloc_unlock>
 800263c:	80800204 	addi	r2,r16,8
 8002640:	dfc00a17 	ldw	ra,40(sp)
 8002644:	df000917 	ldw	fp,36(sp)
 8002648:	ddc00817 	ldw	r23,32(sp)
 800264c:	dd800717 	ldw	r22,28(sp)
 8002650:	dd400617 	ldw	r21,24(sp)
 8002654:	dd000517 	ldw	r20,20(sp)
 8002658:	dcc00417 	ldw	r19,16(sp)
 800265c:	dc800317 	ldw	r18,12(sp)
 8002660:	dc400217 	ldw	r17,8(sp)
 8002664:	dc000117 	ldw	r16,4(sp)
 8002668:	dec00b04 	addi	sp,sp,44
 800266c:	f800283a 	ret
 8002670:	00800304 	movi	r2,12
 8002674:	90800015 	stw	r2,0(r18)
 8002678:	0005883a 	mov	r2,zero
 800267c:	003ff006 	br	8002640 <_malloc_r+0x2a4>
 8002680:	01002004 	movi	r4,128
 8002684:	02001004 	movi	r8,64
 8002688:	01c00fc4 	movi	r7,63
 800268c:	003f6106 	br	8002414 <_malloc_r+0x78>
 8002690:	4009883a 	mov	r4,r8
 8002694:	003f7506 	br	800246c <_malloc_r+0xd0>
 8002698:	81000317 	ldw	r4,12(r16)
 800269c:	003fde06 	br	8002618 <_malloc_r+0x27c>
 80026a0:	81c5883a 	add	r2,r16,r7
 80026a4:	11400117 	ldw	r5,4(r2)
 80026a8:	9009883a 	mov	r4,r18
 80026ac:	29400054 	ori	r5,r5,1
 80026b0:	11400115 	stw	r5,4(r2)
 80026b4:	8004a600 	call	8004a60 <__malloc_unlock>
 80026b8:	80800204 	addi	r2,r16,8
 80026bc:	003fe006 	br	8002640 <_malloc_r+0x2a4>
 80026c0:	9c000217 	ldw	r16,8(r19)
 80026c4:	00bfff04 	movi	r2,-4
 80026c8:	85800117 	ldw	r22,4(r16)
 80026cc:	b0ac703a 	and	r22,r22,r2
 80026d0:	b4400336 	bltu	r22,r17,80026e0 <_malloc_r+0x344>
 80026d4:	b445c83a 	sub	r2,r22,r17
 80026d8:	00c003c4 	movi	r3,15
 80026dc:	18805d16 	blt	r3,r2,8002854 <_malloc_r+0x4b8>
 80026e0:	05c20074 	movhi	r23,2049
 80026e4:	00820074 	movhi	r2,2049
 80026e8:	10a89704 	addi	r2,r2,-23972
 80026ec:	bde1ee04 	addi	r23,r23,-30792
 80026f0:	15400017 	ldw	r21,0(r2)
 80026f4:	b8c00017 	ldw	r3,0(r23)
 80026f8:	00bfffc4 	movi	r2,-1
 80026fc:	858d883a 	add	r6,r16,r22
 8002700:	8d6b883a 	add	r21,r17,r21
 8002704:	1880ea26 	beq	r3,r2,8002ab0 <_malloc_r+0x714>
 8002708:	ad4403c4 	addi	r21,r21,4111
 800270c:	00bc0004 	movi	r2,-4096
 8002710:	a8aa703a 	and	r21,r21,r2
 8002714:	a80b883a 	mov	r5,r21
 8002718:	9009883a 	mov	r4,r18
 800271c:	d9800015 	stw	r6,0(sp)
 8002720:	80035bc0 	call	80035bc <_sbrk_r>
 8002724:	1029883a 	mov	r20,r2
 8002728:	00bfffc4 	movi	r2,-1
 800272c:	d9800017 	ldw	r6,0(sp)
 8002730:	a080e826 	beq	r20,r2,8002ad4 <_malloc_r+0x738>
 8002734:	a180a636 	bltu	r20,r6,80029d0 <_malloc_r+0x634>
 8002738:	07020074 	movhi	fp,2049
 800273c:	e728a704 	addi	fp,fp,-23908
 8002740:	e0800017 	ldw	r2,0(fp)
 8002744:	a887883a 	add	r3,r21,r2
 8002748:	e0c00015 	stw	r3,0(fp)
 800274c:	3500e626 	beq	r6,r20,8002ae8 <_malloc_r+0x74c>
 8002750:	b9000017 	ldw	r4,0(r23)
 8002754:	00bfffc4 	movi	r2,-1
 8002758:	2080ee26 	beq	r4,r2,8002b14 <_malloc_r+0x778>
 800275c:	a185c83a 	sub	r2,r20,r6
 8002760:	10c5883a 	add	r2,r2,r3
 8002764:	e0800015 	stw	r2,0(fp)
 8002768:	a0c001cc 	andi	r3,r20,7
 800276c:	1800bc26 	beq	r3,zero,8002a60 <_malloc_r+0x6c4>
 8002770:	a0e9c83a 	sub	r20,r20,r3
 8002774:	00840204 	movi	r2,4104
 8002778:	a5000204 	addi	r20,r20,8
 800277c:	10c7c83a 	sub	r3,r2,r3
 8002780:	a545883a 	add	r2,r20,r21
 8002784:	1083ffcc 	andi	r2,r2,4095
 8002788:	18abc83a 	sub	r21,r3,r2
 800278c:	a80b883a 	mov	r5,r21
 8002790:	9009883a 	mov	r4,r18
 8002794:	80035bc0 	call	80035bc <_sbrk_r>
 8002798:	00ffffc4 	movi	r3,-1
 800279c:	10c0e126 	beq	r2,r3,8002b24 <_malloc_r+0x788>
 80027a0:	1505c83a 	sub	r2,r2,r20
 80027a4:	1545883a 	add	r2,r2,r21
 80027a8:	10800054 	ori	r2,r2,1
 80027ac:	e0c00017 	ldw	r3,0(fp)
 80027b0:	9d000215 	stw	r20,8(r19)
 80027b4:	a0800115 	stw	r2,4(r20)
 80027b8:	a8c7883a 	add	r3,r21,r3
 80027bc:	e0c00015 	stw	r3,0(fp)
 80027c0:	84c00e26 	beq	r16,r19,80027fc <_malloc_r+0x460>
 80027c4:	018003c4 	movi	r6,15
 80027c8:	3580a72e 	bgeu	r6,r22,8002a68 <_malloc_r+0x6cc>
 80027cc:	81400117 	ldw	r5,4(r16)
 80027d0:	013ffe04 	movi	r4,-8
 80027d4:	b0bffd04 	addi	r2,r22,-12
 80027d8:	1104703a 	and	r2,r2,r4
 80027dc:	2900004c 	andi	r4,r5,1
 80027e0:	2088b03a 	or	r4,r4,r2
 80027e4:	81000115 	stw	r4,4(r16)
 80027e8:	01400144 	movi	r5,5
 80027ec:	8089883a 	add	r4,r16,r2
 80027f0:	21400115 	stw	r5,4(r4)
 80027f4:	21400215 	stw	r5,8(r4)
 80027f8:	3080cd36 	bltu	r6,r2,8002b30 <_malloc_r+0x794>
 80027fc:	00820074 	movhi	r2,2049
 8002800:	10a89604 	addi	r2,r2,-23976
 8002804:	11000017 	ldw	r4,0(r2)
 8002808:	20c0012e 	bgeu	r4,r3,8002810 <_malloc_r+0x474>
 800280c:	10c00015 	stw	r3,0(r2)
 8002810:	00820074 	movhi	r2,2049
 8002814:	10a89504 	addi	r2,r2,-23980
 8002818:	11000017 	ldw	r4,0(r2)
 800281c:	9c000217 	ldw	r16,8(r19)
 8002820:	20c0012e 	bgeu	r4,r3,8002828 <_malloc_r+0x48c>
 8002824:	10c00015 	stw	r3,0(r2)
 8002828:	80c00117 	ldw	r3,4(r16)
 800282c:	00bfff04 	movi	r2,-4
 8002830:	1886703a 	and	r3,r3,r2
 8002834:	1c45c83a 	sub	r2,r3,r17
 8002838:	1c400236 	bltu	r3,r17,8002844 <_malloc_r+0x4a8>
 800283c:	00c003c4 	movi	r3,15
 8002840:	18800416 	blt	r3,r2,8002854 <_malloc_r+0x4b8>
 8002844:	9009883a 	mov	r4,r18
 8002848:	8004a600 	call	8004a60 <__malloc_unlock>
 800284c:	0005883a 	mov	r2,zero
 8002850:	003f7b06 	br	8002640 <_malloc_r+0x2a4>
 8002854:	88c00054 	ori	r3,r17,1
 8002858:	80c00115 	stw	r3,4(r16)
 800285c:	8463883a 	add	r17,r16,r17
 8002860:	10800054 	ori	r2,r2,1
 8002864:	9c400215 	stw	r17,8(r19)
 8002868:	88800115 	stw	r2,4(r17)
 800286c:	9009883a 	mov	r4,r18
 8002870:	8004a600 	call	8004a60 <__malloc_unlock>
 8002874:	80800204 	addi	r2,r16,8
 8002878:	003f7106 	br	8002640 <_malloc_r+0x2a4>
 800287c:	00c00504 	movi	r3,20
 8002880:	18804a2e 	bgeu	r3,r2,80029ac <_malloc_r+0x610>
 8002884:	00c01504 	movi	r3,84
 8002888:	18806e36 	bltu	r3,r2,8002a44 <_malloc_r+0x6a8>
 800288c:	8804d33a 	srli	r2,r17,12
 8002890:	12001bc4 	addi	r8,r2,111
 8002894:	11c01b84 	addi	r7,r2,110
 8002898:	4209883a 	add	r4,r8,r8
 800289c:	003edd06 	br	8002414 <_malloc_r+0x78>
 80028a0:	3804d27a 	srli	r2,r7,9
 80028a4:	00c00104 	movi	r3,4
 80028a8:	1880442e 	bgeu	r3,r2,80029bc <_malloc_r+0x620>
 80028ac:	00c00504 	movi	r3,20
 80028b0:	18808136 	bltu	r3,r2,8002ab8 <_malloc_r+0x71c>
 80028b4:	11401704 	addi	r5,r2,92
 80028b8:	10c016c4 	addi	r3,r2,91
 80028bc:	294b883a 	add	r5,r5,r5
 80028c0:	294b883a 	add	r5,r5,r5
 80028c4:	294b883a 	add	r5,r5,r5
 80028c8:	994b883a 	add	r5,r19,r5
 80028cc:	28800017 	ldw	r2,0(r5)
 80028d0:	01820034 	movhi	r6,2048
 80028d4:	297ffe04 	addi	r5,r5,-8
 80028d8:	319c6804 	addi	r6,r6,29088
 80028dc:	28806526 	beq	r5,r2,8002a74 <_malloc_r+0x6d8>
 80028e0:	01bfff04 	movi	r6,-4
 80028e4:	10c00117 	ldw	r3,4(r2)
 80028e8:	1986703a 	and	r3,r3,r6
 80028ec:	38c0022e 	bgeu	r7,r3,80028f8 <_malloc_r+0x55c>
 80028f0:	10800217 	ldw	r2,8(r2)
 80028f4:	28bffb1e 	bne	r5,r2,80028e4 <_malloc_r+0x548>
 80028f8:	11400317 	ldw	r5,12(r2)
 80028fc:	98c00117 	ldw	r3,4(r19)
 8002900:	81400315 	stw	r5,12(r16)
 8002904:	80800215 	stw	r2,8(r16)
 8002908:	2c000215 	stw	r16,8(r5)
 800290c:	14000315 	stw	r16,12(r2)
 8002910:	003ef806 	br	80024f4 <_malloc_r+0x158>
 8002914:	88c00054 	ori	r3,r17,1
 8002918:	80c00115 	stw	r3,4(r16)
 800291c:	8463883a 	add	r17,r16,r17
 8002920:	34400515 	stw	r17,20(r6)
 8002924:	34400415 	stw	r17,16(r6)
 8002928:	10c00054 	ori	r3,r2,1
 800292c:	8a000315 	stw	r8,12(r17)
 8002930:	8a000215 	stw	r8,8(r17)
 8002934:	88c00115 	stw	r3,4(r17)
 8002938:	88a3883a 	add	r17,r17,r2
 800293c:	88800015 	stw	r2,0(r17)
 8002940:	9009883a 	mov	r4,r18
 8002944:	8004a600 	call	8004a60 <__malloc_unlock>
 8002948:	80800204 	addi	r2,r16,8
 800294c:	003f3c06 	br	8002640 <_malloc_r+0x2a4>
 8002950:	30c00117 	ldw	r3,4(r6)
 8002954:	003ee706 	br	80024f4 <_malloc_r+0x158>
 8002958:	5ac00044 	addi	r11,r11,1
 800295c:	588000cc 	andi	r2,r11,3
 8002960:	31800204 	addi	r6,r6,8
 8002964:	103efd1e 	bne	r2,zero,800255c <_malloc_r+0x1c0>
 8002968:	00002406 	br	80029fc <_malloc_r+0x660>
 800296c:	14000317 	ldw	r16,12(r2)
 8002970:	143f251e 	bne	r2,r16,8002608 <_malloc_r+0x26c>
 8002974:	21000084 	addi	r4,r4,2
 8002978:	003ebc06 	br	800246c <_malloc_r+0xd0>
 800297c:	8085883a 	add	r2,r16,r2
 8002980:	10c00117 	ldw	r3,4(r2)
 8002984:	81000317 	ldw	r4,12(r16)
 8002988:	81400217 	ldw	r5,8(r16)
 800298c:	18c00054 	ori	r3,r3,1
 8002990:	10c00115 	stw	r3,4(r2)
 8002994:	29000315 	stw	r4,12(r5)
 8002998:	21400215 	stw	r5,8(r4)
 800299c:	9009883a 	mov	r4,r18
 80029a0:	8004a600 	call	8004a60 <__malloc_unlock>
 80029a4:	80800204 	addi	r2,r16,8
 80029a8:	003f2506 	br	8002640 <_malloc_r+0x2a4>
 80029ac:	12001704 	addi	r8,r2,92
 80029b0:	11c016c4 	addi	r7,r2,91
 80029b4:	4209883a 	add	r4,r8,r8
 80029b8:	003e9606 	br	8002414 <_malloc_r+0x78>
 80029bc:	3804d1ba 	srli	r2,r7,6
 80029c0:	11400e44 	addi	r5,r2,57
 80029c4:	10c00e04 	addi	r3,r2,56
 80029c8:	294b883a 	add	r5,r5,r5
 80029cc:	003fbc06 	br	80028c0 <_malloc_r+0x524>
 80029d0:	84ff5926 	beq	r16,r19,8002738 <_malloc_r+0x39c>
 80029d4:	00820034 	movhi	r2,2048
 80029d8:	109c6804 	addi	r2,r2,29088
 80029dc:	14000217 	ldw	r16,8(r2)
 80029e0:	00bfff04 	movi	r2,-4
 80029e4:	80c00117 	ldw	r3,4(r16)
 80029e8:	1886703a 	and	r3,r3,r2
 80029ec:	003f9106 	br	8002834 <_malloc_r+0x498>
 80029f0:	60800217 	ldw	r2,8(r12)
 80029f4:	213fffc4 	addi	r4,r4,-1
 80029f8:	1300651e 	bne	r2,r12,8002b90 <_malloc_r+0x7f4>
 80029fc:	208000cc 	andi	r2,r4,3
 8002a00:	633ffe04 	addi	r12,r12,-8
 8002a04:	103ffa1e 	bne	r2,zero,80029f0 <_malloc_r+0x654>
 8002a08:	98800117 	ldw	r2,4(r19)
 8002a0c:	0146303a 	nor	r3,zero,r5
 8002a10:	1884703a 	and	r2,r3,r2
 8002a14:	98800115 	stw	r2,4(r19)
 8002a18:	294b883a 	add	r5,r5,r5
 8002a1c:	117f2836 	bltu	r2,r5,80026c0 <_malloc_r+0x324>
 8002a20:	283f2726 	beq	r5,zero,80026c0 <_malloc_r+0x324>
 8002a24:	2886703a 	and	r3,r5,r2
 8002a28:	5809883a 	mov	r4,r11
 8002a2c:	183ec31e 	bne	r3,zero,800253c <_malloc_r+0x1a0>
 8002a30:	294b883a 	add	r5,r5,r5
 8002a34:	2886703a 	and	r3,r5,r2
 8002a38:	21000104 	addi	r4,r4,4
 8002a3c:	183ffc26 	beq	r3,zero,8002a30 <_malloc_r+0x694>
 8002a40:	003ebe06 	br	800253c <_malloc_r+0x1a0>
 8002a44:	00c05504 	movi	r3,340
 8002a48:	18801236 	bltu	r3,r2,8002a94 <_malloc_r+0x6f8>
 8002a4c:	8804d3fa 	srli	r2,r17,15
 8002a50:	12001e04 	addi	r8,r2,120
 8002a54:	11c01dc4 	addi	r7,r2,119
 8002a58:	4209883a 	add	r4,r8,r8
 8002a5c:	003e6d06 	br	8002414 <_malloc_r+0x78>
 8002a60:	00c40004 	movi	r3,4096
 8002a64:	003f4606 	br	8002780 <_malloc_r+0x3e4>
 8002a68:	00800044 	movi	r2,1
 8002a6c:	a0800115 	stw	r2,4(r20)
 8002a70:	003f7406 	br	8002844 <_malloc_r+0x4a8>
 8002a74:	1805d0ba 	srai	r2,r3,2
 8002a78:	01c00044 	movi	r7,1
 8002a7c:	30c00117 	ldw	r3,4(r6)
 8002a80:	388e983a 	sll	r7,r7,r2
 8002a84:	2805883a 	mov	r2,r5
 8002a88:	38c6b03a 	or	r3,r7,r3
 8002a8c:	30c00115 	stw	r3,4(r6)
 8002a90:	003f9b06 	br	8002900 <_malloc_r+0x564>
 8002a94:	00c15504 	movi	r3,1364
 8002a98:	18801a36 	bltu	r3,r2,8002b04 <_malloc_r+0x768>
 8002a9c:	8804d4ba 	srli	r2,r17,18
 8002aa0:	12001f44 	addi	r8,r2,125
 8002aa4:	11c01f04 	addi	r7,r2,124
 8002aa8:	4209883a 	add	r4,r8,r8
 8002aac:	003e5906 	br	8002414 <_malloc_r+0x78>
 8002ab0:	ad400404 	addi	r21,r21,16
 8002ab4:	003f1706 	br	8002714 <_malloc_r+0x378>
 8002ab8:	00c01504 	movi	r3,84
 8002abc:	18802336 	bltu	r3,r2,8002b4c <_malloc_r+0x7b0>
 8002ac0:	3804d33a 	srli	r2,r7,12
 8002ac4:	11401bc4 	addi	r5,r2,111
 8002ac8:	10c01b84 	addi	r3,r2,110
 8002acc:	294b883a 	add	r5,r5,r5
 8002ad0:	003f7b06 	br	80028c0 <_malloc_r+0x524>
 8002ad4:	9c000217 	ldw	r16,8(r19)
 8002ad8:	00bfff04 	movi	r2,-4
 8002adc:	80c00117 	ldw	r3,4(r16)
 8002ae0:	1886703a 	and	r3,r3,r2
 8002ae4:	003f5306 	br	8002834 <_malloc_r+0x498>
 8002ae8:	3083ffcc 	andi	r2,r6,4095
 8002aec:	103f181e 	bne	r2,zero,8002750 <_malloc_r+0x3b4>
 8002af0:	99000217 	ldw	r4,8(r19)
 8002af4:	b545883a 	add	r2,r22,r21
 8002af8:	10800054 	ori	r2,r2,1
 8002afc:	20800115 	stw	r2,4(r4)
 8002b00:	003f3e06 	br	80027fc <_malloc_r+0x460>
 8002b04:	01003f84 	movi	r4,254
 8002b08:	02001fc4 	movi	r8,127
 8002b0c:	01c01f84 	movi	r7,126
 8002b10:	003e4006 	br	8002414 <_malloc_r+0x78>
 8002b14:	00820074 	movhi	r2,2049
 8002b18:	10a1ee04 	addi	r2,r2,-30792
 8002b1c:	15000015 	stw	r20,0(r2)
 8002b20:	003f1106 	br	8002768 <_malloc_r+0x3cc>
 8002b24:	00800044 	movi	r2,1
 8002b28:	002b883a 	mov	r21,zero
 8002b2c:	003f1f06 	br	80027ac <_malloc_r+0x410>
 8002b30:	81400204 	addi	r5,r16,8
 8002b34:	9009883a 	mov	r4,r18
 8002b38:	8003e240 	call	8003e24 <_free_r>
 8002b3c:	00820074 	movhi	r2,2049
 8002b40:	10a8a704 	addi	r2,r2,-23908
 8002b44:	10c00017 	ldw	r3,0(r2)
 8002b48:	003f2c06 	br	80027fc <_malloc_r+0x460>
 8002b4c:	00c05504 	movi	r3,340
 8002b50:	18800536 	bltu	r3,r2,8002b68 <_malloc_r+0x7cc>
 8002b54:	3804d3fa 	srli	r2,r7,15
 8002b58:	11401e04 	addi	r5,r2,120
 8002b5c:	10c01dc4 	addi	r3,r2,119
 8002b60:	294b883a 	add	r5,r5,r5
 8002b64:	003f5606 	br	80028c0 <_malloc_r+0x524>
 8002b68:	00c15504 	movi	r3,1364
 8002b6c:	18800536 	bltu	r3,r2,8002b84 <_malloc_r+0x7e8>
 8002b70:	3804d4ba 	srli	r2,r7,18
 8002b74:	11401f44 	addi	r5,r2,125
 8002b78:	10c01f04 	addi	r3,r2,124
 8002b7c:	294b883a 	add	r5,r5,r5
 8002b80:	003f4f06 	br	80028c0 <_malloc_r+0x524>
 8002b84:	01403f84 	movi	r5,254
 8002b88:	00c01f84 	movi	r3,126
 8002b8c:	003f4c06 	br	80028c0 <_malloc_r+0x524>
 8002b90:	98800117 	ldw	r2,4(r19)
 8002b94:	003fa006 	br	8002a18 <_malloc_r+0x67c>
 8002b98:	8808d0fa 	srli	r4,r17,3
 8002b9c:	20800044 	addi	r2,r4,1
 8002ba0:	1085883a 	add	r2,r2,r2
 8002ba4:	003e9006 	br	80025e8 <_malloc_r+0x24c>

08002ba8 <memchr>:
 8002ba8:	208000cc 	andi	r2,r4,3
 8002bac:	280f883a 	mov	r7,r5
 8002bb0:	10003426 	beq	r2,zero,8002c84 <memchr+0xdc>
 8002bb4:	30bfffc4 	addi	r2,r6,-1
 8002bb8:	30001a26 	beq	r6,zero,8002c24 <memchr+0x7c>
 8002bbc:	20c00003 	ldbu	r3,0(r4)
 8002bc0:	29803fcc 	andi	r6,r5,255
 8002bc4:	30c0051e 	bne	r6,r3,8002bdc <memchr+0x34>
 8002bc8:	00001806 	br	8002c2c <memchr+0x84>
 8002bcc:	10001526 	beq	r2,zero,8002c24 <memchr+0x7c>
 8002bd0:	20c00003 	ldbu	r3,0(r4)
 8002bd4:	10bfffc4 	addi	r2,r2,-1
 8002bd8:	30c01426 	beq	r6,r3,8002c2c <memchr+0x84>
 8002bdc:	21000044 	addi	r4,r4,1
 8002be0:	20c000cc 	andi	r3,r4,3
 8002be4:	183ff91e 	bne	r3,zero,8002bcc <memchr+0x24>
 8002be8:	020000c4 	movi	r8,3
 8002bec:	40801136 	bltu	r8,r2,8002c34 <memchr+0x8c>
 8002bf0:	10000c26 	beq	r2,zero,8002c24 <memchr+0x7c>
 8002bf4:	20c00003 	ldbu	r3,0(r4)
 8002bf8:	29403fcc 	andi	r5,r5,255
 8002bfc:	28c00b26 	beq	r5,r3,8002c2c <memchr+0x84>
 8002c00:	20c00044 	addi	r3,r4,1
 8002c04:	39803fcc 	andi	r6,r7,255
 8002c08:	2089883a 	add	r4,r4,r2
 8002c0c:	00000306 	br	8002c1c <memchr+0x74>
 8002c10:	18c00044 	addi	r3,r3,1
 8002c14:	197fffc3 	ldbu	r5,-1(r3)
 8002c18:	31400526 	beq	r6,r5,8002c30 <memchr+0x88>
 8002c1c:	1805883a 	mov	r2,r3
 8002c20:	20fffb1e 	bne	r4,r3,8002c10 <memchr+0x68>
 8002c24:	0005883a 	mov	r2,zero
 8002c28:	f800283a 	ret
 8002c2c:	2005883a 	mov	r2,r4
 8002c30:	f800283a 	ret
 8002c34:	28c03fcc 	andi	r3,r5,255
 8002c38:	1812923a 	slli	r9,r3,8
 8002c3c:	02ffbff4 	movhi	r11,65279
 8002c40:	02a02074 	movhi	r10,32897
 8002c44:	48d2b03a 	or	r9,r9,r3
 8002c48:	4806943a 	slli	r3,r9,16
 8002c4c:	5affbfc4 	addi	r11,r11,-257
 8002c50:	52a02004 	addi	r10,r10,-32640
 8002c54:	48d2b03a 	or	r9,r9,r3
 8002c58:	20c00017 	ldw	r3,0(r4)
 8002c5c:	48c6f03a 	xor	r3,r9,r3
 8002c60:	1acd883a 	add	r6,r3,r11
 8002c64:	00c6303a 	nor	r3,zero,r3
 8002c68:	30c6703a 	and	r3,r6,r3
 8002c6c:	1a86703a 	and	r3,r3,r10
 8002c70:	183fe01e 	bne	r3,zero,8002bf4 <memchr+0x4c>
 8002c74:	10bfff04 	addi	r2,r2,-4
 8002c78:	21000104 	addi	r4,r4,4
 8002c7c:	40bff636 	bltu	r8,r2,8002c58 <memchr+0xb0>
 8002c80:	003fdb06 	br	8002bf0 <memchr+0x48>
 8002c84:	3005883a 	mov	r2,r6
 8002c88:	003fd706 	br	8002be8 <memchr+0x40>

08002c8c <memcpy>:
 8002c8c:	defffd04 	addi	sp,sp,-12
 8002c90:	dfc00215 	stw	ra,8(sp)
 8002c94:	dc400115 	stw	r17,4(sp)
 8002c98:	dc000015 	stw	r16,0(sp)
 8002c9c:	00c003c4 	movi	r3,15
 8002ca0:	2005883a 	mov	r2,r4
 8002ca4:	1980452e 	bgeu	r3,r6,8002dbc <memcpy+0x130>
 8002ca8:	2906b03a 	or	r3,r5,r4
 8002cac:	18c000cc 	andi	r3,r3,3
 8002cb0:	1800441e 	bne	r3,zero,8002dc4 <memcpy+0x138>
 8002cb4:	347ffc04 	addi	r17,r6,-16
 8002cb8:	8822d13a 	srli	r17,r17,4
 8002cbc:	28c00104 	addi	r3,r5,4
 8002cc0:	23400104 	addi	r13,r4,4
 8002cc4:	8820913a 	slli	r16,r17,4
 8002cc8:	2b000204 	addi	r12,r5,8
 8002ccc:	22c00204 	addi	r11,r4,8
 8002cd0:	84000504 	addi	r16,r16,20
 8002cd4:	2a800304 	addi	r10,r5,12
 8002cd8:	22400304 	addi	r9,r4,12
 8002cdc:	2c21883a 	add	r16,r5,r16
 8002ce0:	2811883a 	mov	r8,r5
 8002ce4:	200f883a 	mov	r7,r4
 8002ce8:	41000017 	ldw	r4,0(r8)
 8002cec:	1fc00017 	ldw	ra,0(r3)
 8002cf0:	63c00017 	ldw	r15,0(r12)
 8002cf4:	39000015 	stw	r4,0(r7)
 8002cf8:	53800017 	ldw	r14,0(r10)
 8002cfc:	6fc00015 	stw	ra,0(r13)
 8002d00:	5bc00015 	stw	r15,0(r11)
 8002d04:	4b800015 	stw	r14,0(r9)
 8002d08:	18c00404 	addi	r3,r3,16
 8002d0c:	39c00404 	addi	r7,r7,16
 8002d10:	42000404 	addi	r8,r8,16
 8002d14:	6b400404 	addi	r13,r13,16
 8002d18:	63000404 	addi	r12,r12,16
 8002d1c:	5ac00404 	addi	r11,r11,16
 8002d20:	52800404 	addi	r10,r10,16
 8002d24:	4a400404 	addi	r9,r9,16
 8002d28:	1c3fef1e 	bne	r3,r16,8002ce8 <memcpy+0x5c>
 8002d2c:	89c00044 	addi	r7,r17,1
 8002d30:	380e913a 	slli	r7,r7,4
 8002d34:	310003cc 	andi	r4,r6,15
 8002d38:	02c000c4 	movi	r11,3
 8002d3c:	11c7883a 	add	r3,r2,r7
 8002d40:	29cb883a 	add	r5,r5,r7
 8002d44:	5900212e 	bgeu	r11,r4,8002dcc <memcpy+0x140>
 8002d48:	1813883a 	mov	r9,r3
 8002d4c:	2811883a 	mov	r8,r5
 8002d50:	200f883a 	mov	r7,r4
 8002d54:	42800017 	ldw	r10,0(r8)
 8002d58:	4a400104 	addi	r9,r9,4
 8002d5c:	39ffff04 	addi	r7,r7,-4
 8002d60:	4abfff15 	stw	r10,-4(r9)
 8002d64:	42000104 	addi	r8,r8,4
 8002d68:	59fffa36 	bltu	r11,r7,8002d54 <memcpy+0xc8>
 8002d6c:	213fff04 	addi	r4,r4,-4
 8002d70:	2008d0ba 	srli	r4,r4,2
 8002d74:	318000cc 	andi	r6,r6,3
 8002d78:	21000044 	addi	r4,r4,1
 8002d7c:	2109883a 	add	r4,r4,r4
 8002d80:	2109883a 	add	r4,r4,r4
 8002d84:	1907883a 	add	r3,r3,r4
 8002d88:	290b883a 	add	r5,r5,r4
 8002d8c:	30000626 	beq	r6,zero,8002da8 <memcpy+0x11c>
 8002d90:	198d883a 	add	r6,r3,r6
 8002d94:	29c00003 	ldbu	r7,0(r5)
 8002d98:	18c00044 	addi	r3,r3,1
 8002d9c:	29400044 	addi	r5,r5,1
 8002da0:	19ffffc5 	stb	r7,-1(r3)
 8002da4:	19bffb1e 	bne	r3,r6,8002d94 <memcpy+0x108>
 8002da8:	dfc00217 	ldw	ra,8(sp)
 8002dac:	dc400117 	ldw	r17,4(sp)
 8002db0:	dc000017 	ldw	r16,0(sp)
 8002db4:	dec00304 	addi	sp,sp,12
 8002db8:	f800283a 	ret
 8002dbc:	2007883a 	mov	r3,r4
 8002dc0:	003ff206 	br	8002d8c <memcpy+0x100>
 8002dc4:	2007883a 	mov	r3,r4
 8002dc8:	003ff106 	br	8002d90 <memcpy+0x104>
 8002dcc:	200d883a 	mov	r6,r4
 8002dd0:	003fee06 	br	8002d8c <memcpy+0x100>

08002dd4 <memmove>:
 8002dd4:	2005883a 	mov	r2,r4
 8002dd8:	29000b2e 	bgeu	r5,r4,8002e08 <memmove+0x34>
 8002ddc:	298f883a 	add	r7,r5,r6
 8002de0:	21c0092e 	bgeu	r4,r7,8002e08 <memmove+0x34>
 8002de4:	2187883a 	add	r3,r4,r6
 8002de8:	198bc83a 	sub	r5,r3,r6
 8002dec:	30004826 	beq	r6,zero,8002f10 <memmove+0x13c>
 8002df0:	39ffffc4 	addi	r7,r7,-1
 8002df4:	39000003 	ldbu	r4,0(r7)
 8002df8:	18ffffc4 	addi	r3,r3,-1
 8002dfc:	19000005 	stb	r4,0(r3)
 8002e00:	28fffb1e 	bne	r5,r3,8002df0 <memmove+0x1c>
 8002e04:	f800283a 	ret
 8002e08:	00c003c4 	movi	r3,15
 8002e0c:	1980412e 	bgeu	r3,r6,8002f14 <memmove+0x140>
 8002e10:	2886b03a 	or	r3,r5,r2
 8002e14:	18c000cc 	andi	r3,r3,3
 8002e18:	1800401e 	bne	r3,zero,8002f1c <memmove+0x148>
 8002e1c:	33fffc04 	addi	r15,r6,-16
 8002e20:	781ed13a 	srli	r15,r15,4
 8002e24:	28c00104 	addi	r3,r5,4
 8002e28:	13400104 	addi	r13,r2,4
 8002e2c:	781c913a 	slli	r14,r15,4
 8002e30:	2b000204 	addi	r12,r5,8
 8002e34:	12c00204 	addi	r11,r2,8
 8002e38:	73800504 	addi	r14,r14,20
 8002e3c:	2a800304 	addi	r10,r5,12
 8002e40:	12400304 	addi	r9,r2,12
 8002e44:	2b9d883a 	add	r14,r5,r14
 8002e48:	2811883a 	mov	r8,r5
 8002e4c:	100f883a 	mov	r7,r2
 8002e50:	41000017 	ldw	r4,0(r8)
 8002e54:	39c00404 	addi	r7,r7,16
 8002e58:	18c00404 	addi	r3,r3,16
 8002e5c:	393ffc15 	stw	r4,-16(r7)
 8002e60:	193ffc17 	ldw	r4,-16(r3)
 8002e64:	6b400404 	addi	r13,r13,16
 8002e68:	5ac00404 	addi	r11,r11,16
 8002e6c:	693ffc15 	stw	r4,-16(r13)
 8002e70:	61000017 	ldw	r4,0(r12)
 8002e74:	4a400404 	addi	r9,r9,16
 8002e78:	42000404 	addi	r8,r8,16
 8002e7c:	593ffc15 	stw	r4,-16(r11)
 8002e80:	51000017 	ldw	r4,0(r10)
 8002e84:	63000404 	addi	r12,r12,16
 8002e88:	52800404 	addi	r10,r10,16
 8002e8c:	493ffc15 	stw	r4,-16(r9)
 8002e90:	1bbfef1e 	bne	r3,r14,8002e50 <memmove+0x7c>
 8002e94:	79000044 	addi	r4,r15,1
 8002e98:	2008913a 	slli	r4,r4,4
 8002e9c:	328003cc 	andi	r10,r6,15
 8002ea0:	02c000c4 	movi	r11,3
 8002ea4:	1107883a 	add	r3,r2,r4
 8002ea8:	290b883a 	add	r5,r5,r4
 8002eac:	5a801e2e 	bgeu	r11,r10,8002f28 <memmove+0x154>
 8002eb0:	1813883a 	mov	r9,r3
 8002eb4:	2811883a 	mov	r8,r5
 8002eb8:	500f883a 	mov	r7,r10
 8002ebc:	41000017 	ldw	r4,0(r8)
 8002ec0:	4a400104 	addi	r9,r9,4
 8002ec4:	39ffff04 	addi	r7,r7,-4
 8002ec8:	493fff15 	stw	r4,-4(r9)
 8002ecc:	42000104 	addi	r8,r8,4
 8002ed0:	59fffa36 	bltu	r11,r7,8002ebc <memmove+0xe8>
 8002ed4:	513fff04 	addi	r4,r10,-4
 8002ed8:	2008d0ba 	srli	r4,r4,2
 8002edc:	318000cc 	andi	r6,r6,3
 8002ee0:	21000044 	addi	r4,r4,1
 8002ee4:	2109883a 	add	r4,r4,r4
 8002ee8:	2109883a 	add	r4,r4,r4
 8002eec:	1907883a 	add	r3,r3,r4
 8002ef0:	290b883a 	add	r5,r5,r4
 8002ef4:	30000b26 	beq	r6,zero,8002f24 <memmove+0x150>
 8002ef8:	198d883a 	add	r6,r3,r6
 8002efc:	29c00003 	ldbu	r7,0(r5)
 8002f00:	18c00044 	addi	r3,r3,1
 8002f04:	29400044 	addi	r5,r5,1
 8002f08:	19ffffc5 	stb	r7,-1(r3)
 8002f0c:	19bffb1e 	bne	r3,r6,8002efc <memmove+0x128>
 8002f10:	f800283a 	ret
 8002f14:	1007883a 	mov	r3,r2
 8002f18:	003ff606 	br	8002ef4 <memmove+0x120>
 8002f1c:	1007883a 	mov	r3,r2
 8002f20:	003ff506 	br	8002ef8 <memmove+0x124>
 8002f24:	f800283a 	ret
 8002f28:	500d883a 	mov	r6,r10
 8002f2c:	003ff106 	br	8002ef4 <memmove+0x120>

08002f30 <memset>:
 8002f30:	20c000cc 	andi	r3,r4,3
 8002f34:	2005883a 	mov	r2,r4
 8002f38:	18004426 	beq	r3,zero,800304c <memset+0x11c>
 8002f3c:	31ffffc4 	addi	r7,r6,-1
 8002f40:	30004026 	beq	r6,zero,8003044 <memset+0x114>
 8002f44:	2813883a 	mov	r9,r5
 8002f48:	200d883a 	mov	r6,r4
 8002f4c:	2007883a 	mov	r3,r4
 8002f50:	00000406 	br	8002f64 <memset+0x34>
 8002f54:	3a3fffc4 	addi	r8,r7,-1
 8002f58:	31800044 	addi	r6,r6,1
 8002f5c:	38003926 	beq	r7,zero,8003044 <memset+0x114>
 8002f60:	400f883a 	mov	r7,r8
 8002f64:	18c00044 	addi	r3,r3,1
 8002f68:	32400005 	stb	r9,0(r6)
 8002f6c:	1a0000cc 	andi	r8,r3,3
 8002f70:	403ff81e 	bne	r8,zero,8002f54 <memset+0x24>
 8002f74:	010000c4 	movi	r4,3
 8002f78:	21c02d2e 	bgeu	r4,r7,8003030 <memset+0x100>
 8002f7c:	29003fcc 	andi	r4,r5,255
 8002f80:	200c923a 	slli	r6,r4,8
 8002f84:	3108b03a 	or	r4,r6,r4
 8002f88:	200c943a 	slli	r6,r4,16
 8002f8c:	218cb03a 	or	r6,r4,r6
 8002f90:	010003c4 	movi	r4,15
 8002f94:	21c0182e 	bgeu	r4,r7,8002ff8 <memset+0xc8>
 8002f98:	3b3ffc04 	addi	r12,r7,-16
 8002f9c:	6018d13a 	srli	r12,r12,4
 8002fa0:	1a000104 	addi	r8,r3,4
 8002fa4:	1ac00204 	addi	r11,r3,8
 8002fa8:	6008913a 	slli	r4,r12,4
 8002fac:	1a800304 	addi	r10,r3,12
 8002fb0:	1813883a 	mov	r9,r3
 8002fb4:	21000504 	addi	r4,r4,20
 8002fb8:	1909883a 	add	r4,r3,r4
 8002fbc:	49800015 	stw	r6,0(r9)
 8002fc0:	41800015 	stw	r6,0(r8)
 8002fc4:	59800015 	stw	r6,0(r11)
 8002fc8:	51800015 	stw	r6,0(r10)
 8002fcc:	42000404 	addi	r8,r8,16
 8002fd0:	4a400404 	addi	r9,r9,16
 8002fd4:	5ac00404 	addi	r11,r11,16
 8002fd8:	52800404 	addi	r10,r10,16
 8002fdc:	413ff71e 	bne	r8,r4,8002fbc <memset+0x8c>
 8002fe0:	63000044 	addi	r12,r12,1
 8002fe4:	6018913a 	slli	r12,r12,4
 8002fe8:	39c003cc 	andi	r7,r7,15
 8002fec:	010000c4 	movi	r4,3
 8002ff0:	1b07883a 	add	r3,r3,r12
 8002ff4:	21c00e2e 	bgeu	r4,r7,8003030 <memset+0x100>
 8002ff8:	1813883a 	mov	r9,r3
 8002ffc:	3811883a 	mov	r8,r7
 8003000:	010000c4 	movi	r4,3
 8003004:	49800015 	stw	r6,0(r9)
 8003008:	423fff04 	addi	r8,r8,-4
 800300c:	4a400104 	addi	r9,r9,4
 8003010:	223ffc36 	bltu	r4,r8,8003004 <memset+0xd4>
 8003014:	393fff04 	addi	r4,r7,-4
 8003018:	2008d0ba 	srli	r4,r4,2
 800301c:	39c000cc 	andi	r7,r7,3
 8003020:	21000044 	addi	r4,r4,1
 8003024:	2109883a 	add	r4,r4,r4
 8003028:	2109883a 	add	r4,r4,r4
 800302c:	1907883a 	add	r3,r3,r4
 8003030:	38000526 	beq	r7,zero,8003048 <memset+0x118>
 8003034:	19cf883a 	add	r7,r3,r7
 8003038:	19400005 	stb	r5,0(r3)
 800303c:	18c00044 	addi	r3,r3,1
 8003040:	38fffd1e 	bne	r7,r3,8003038 <memset+0x108>
 8003044:	f800283a 	ret
 8003048:	f800283a 	ret
 800304c:	2007883a 	mov	r3,r4
 8003050:	300f883a 	mov	r7,r6
 8003054:	003fc706 	br	8002f74 <memset+0x44>

08003058 <_realloc_r>:
 8003058:	defff604 	addi	sp,sp,-40
 800305c:	dc800215 	stw	r18,8(sp)
 8003060:	dfc00915 	stw	ra,36(sp)
 8003064:	df000815 	stw	fp,32(sp)
 8003068:	ddc00715 	stw	r23,28(sp)
 800306c:	dd800615 	stw	r22,24(sp)
 8003070:	dd400515 	stw	r21,20(sp)
 8003074:	dd000415 	stw	r20,16(sp)
 8003078:	dcc00315 	stw	r19,12(sp)
 800307c:	dc400115 	stw	r17,4(sp)
 8003080:	dc000015 	stw	r16,0(sp)
 8003084:	3025883a 	mov	r18,r6
 8003088:	2800b726 	beq	r5,zero,8003368 <_realloc_r+0x310>
 800308c:	282b883a 	mov	r21,r5
 8003090:	2029883a 	mov	r20,r4
 8003094:	8004a3c0 	call	8004a3c <__malloc_lock>
 8003098:	a8bfff17 	ldw	r2,-4(r21)
 800309c:	043fff04 	movi	r16,-4
 80030a0:	90c002c4 	addi	r3,r18,11
 80030a4:	01000584 	movi	r4,22
 80030a8:	acfffe04 	addi	r19,r21,-8
 80030ac:	1420703a 	and	r16,r2,r16
 80030b0:	20c0332e 	bgeu	r4,r3,8003180 <_realloc_r+0x128>
 80030b4:	047ffe04 	movi	r17,-8
 80030b8:	1c62703a 	and	r17,r3,r17
 80030bc:	8807883a 	mov	r3,r17
 80030c0:	88005816 	blt	r17,zero,8003224 <_realloc_r+0x1cc>
 80030c4:	8c805736 	bltu	r17,r18,8003224 <_realloc_r+0x1cc>
 80030c8:	80c0300e 	bge	r16,r3,800318c <_realloc_r+0x134>
 80030cc:	07020034 	movhi	fp,2048
 80030d0:	e71c6804 	addi	fp,fp,29088
 80030d4:	e1c00217 	ldw	r7,8(fp)
 80030d8:	9c09883a 	add	r4,r19,r16
 80030dc:	22000117 	ldw	r8,4(r4)
 80030e0:	21c06326 	beq	r4,r7,8003270 <_realloc_r+0x218>
 80030e4:	017fff84 	movi	r5,-2
 80030e8:	414a703a 	and	r5,r8,r5
 80030ec:	214b883a 	add	r5,r4,r5
 80030f0:	29800117 	ldw	r6,4(r5)
 80030f4:	3180004c 	andi	r6,r6,1
 80030f8:	30003f26 	beq	r6,zero,80031f8 <_realloc_r+0x1a0>
 80030fc:	1080004c 	andi	r2,r2,1
 8003100:	10008326 	beq	r2,zero,8003310 <_realloc_r+0x2b8>
 8003104:	900b883a 	mov	r5,r18
 8003108:	a009883a 	mov	r4,r20
 800310c:	800239c0 	call	800239c <_malloc_r>
 8003110:	1025883a 	mov	r18,r2
 8003114:	10011e26 	beq	r2,zero,8003590 <_realloc_r+0x538>
 8003118:	a93fff17 	ldw	r4,-4(r21)
 800311c:	10fffe04 	addi	r3,r2,-8
 8003120:	00bfff84 	movi	r2,-2
 8003124:	2084703a 	and	r2,r4,r2
 8003128:	9885883a 	add	r2,r19,r2
 800312c:	1880ee26 	beq	r3,r2,80034e8 <_realloc_r+0x490>
 8003130:	81bfff04 	addi	r6,r16,-4
 8003134:	00800904 	movi	r2,36
 8003138:	1180b836 	bltu	r2,r6,800341c <_realloc_r+0x3c4>
 800313c:	00c004c4 	movi	r3,19
 8003140:	19809636 	bltu	r3,r6,800339c <_realloc_r+0x344>
 8003144:	9005883a 	mov	r2,r18
 8003148:	a807883a 	mov	r3,r21
 800314c:	19000017 	ldw	r4,0(r3)
 8003150:	11000015 	stw	r4,0(r2)
 8003154:	19000117 	ldw	r4,4(r3)
 8003158:	11000115 	stw	r4,4(r2)
 800315c:	18c00217 	ldw	r3,8(r3)
 8003160:	10c00215 	stw	r3,8(r2)
 8003164:	a80b883a 	mov	r5,r21
 8003168:	a009883a 	mov	r4,r20
 800316c:	8003e240 	call	8003e24 <_free_r>
 8003170:	a009883a 	mov	r4,r20
 8003174:	8004a600 	call	8004a60 <__malloc_unlock>
 8003178:	9005883a 	mov	r2,r18
 800317c:	00001206 	br	80031c8 <_realloc_r+0x170>
 8003180:	00c00404 	movi	r3,16
 8003184:	1823883a 	mov	r17,r3
 8003188:	003fce06 	br	80030c4 <_realloc_r+0x6c>
 800318c:	a825883a 	mov	r18,r21
 8003190:	8445c83a 	sub	r2,r16,r17
 8003194:	00c003c4 	movi	r3,15
 8003198:	18802636 	bltu	r3,r2,8003234 <_realloc_r+0x1dc>
 800319c:	99800117 	ldw	r6,4(r19)
 80031a0:	9c07883a 	add	r3,r19,r16
 80031a4:	3180004c 	andi	r6,r6,1
 80031a8:	3420b03a 	or	r16,r6,r16
 80031ac:	9c000115 	stw	r16,4(r19)
 80031b0:	18800117 	ldw	r2,4(r3)
 80031b4:	10800054 	ori	r2,r2,1
 80031b8:	18800115 	stw	r2,4(r3)
 80031bc:	a009883a 	mov	r4,r20
 80031c0:	8004a600 	call	8004a60 <__malloc_unlock>
 80031c4:	9005883a 	mov	r2,r18
 80031c8:	dfc00917 	ldw	ra,36(sp)
 80031cc:	df000817 	ldw	fp,32(sp)
 80031d0:	ddc00717 	ldw	r23,28(sp)
 80031d4:	dd800617 	ldw	r22,24(sp)
 80031d8:	dd400517 	ldw	r21,20(sp)
 80031dc:	dd000417 	ldw	r20,16(sp)
 80031e0:	dcc00317 	ldw	r19,12(sp)
 80031e4:	dc800217 	ldw	r18,8(sp)
 80031e8:	dc400117 	ldw	r17,4(sp)
 80031ec:	dc000017 	ldw	r16,0(sp)
 80031f0:	dec00a04 	addi	sp,sp,40
 80031f4:	f800283a 	ret
 80031f8:	017fff04 	movi	r5,-4
 80031fc:	414a703a 	and	r5,r8,r5
 8003200:	814d883a 	add	r6,r16,r5
 8003204:	30c01f16 	blt	r6,r3,8003284 <_realloc_r+0x22c>
 8003208:	20800317 	ldw	r2,12(r4)
 800320c:	20c00217 	ldw	r3,8(r4)
 8003210:	a825883a 	mov	r18,r21
 8003214:	3021883a 	mov	r16,r6
 8003218:	18800315 	stw	r2,12(r3)
 800321c:	10c00215 	stw	r3,8(r2)
 8003220:	003fdb06 	br	8003190 <_realloc_r+0x138>
 8003224:	00800304 	movi	r2,12
 8003228:	a0800015 	stw	r2,0(r20)
 800322c:	0005883a 	mov	r2,zero
 8003230:	003fe506 	br	80031c8 <_realloc_r+0x170>
 8003234:	98c00117 	ldw	r3,4(r19)
 8003238:	9c4b883a 	add	r5,r19,r17
 800323c:	11000054 	ori	r4,r2,1
 8003240:	18c0004c 	andi	r3,r3,1
 8003244:	1c62b03a 	or	r17,r3,r17
 8003248:	9c400115 	stw	r17,4(r19)
 800324c:	29000115 	stw	r4,4(r5)
 8003250:	2885883a 	add	r2,r5,r2
 8003254:	10c00117 	ldw	r3,4(r2)
 8003258:	29400204 	addi	r5,r5,8
 800325c:	a009883a 	mov	r4,r20
 8003260:	18c00054 	ori	r3,r3,1
 8003264:	10c00115 	stw	r3,4(r2)
 8003268:	8003e240 	call	8003e24 <_free_r>
 800326c:	003fd306 	br	80031bc <_realloc_r+0x164>
 8003270:	017fff04 	movi	r5,-4
 8003274:	414a703a 	and	r5,r8,r5
 8003278:	89800404 	addi	r6,r17,16
 800327c:	8151883a 	add	r8,r16,r5
 8003280:	4180590e 	bge	r8,r6,80033e8 <_realloc_r+0x390>
 8003284:	1080004c 	andi	r2,r2,1
 8003288:	103f9e1e 	bne	r2,zero,8003104 <_realloc_r+0xac>
 800328c:	adbffe17 	ldw	r22,-8(r21)
 8003290:	00bfff04 	movi	r2,-4
 8003294:	9dadc83a 	sub	r22,r19,r22
 8003298:	b1800117 	ldw	r6,4(r22)
 800329c:	3084703a 	and	r2,r6,r2
 80032a0:	20002026 	beq	r4,zero,8003324 <_realloc_r+0x2cc>
 80032a4:	80af883a 	add	r23,r16,r2
 80032a8:	b96f883a 	add	r23,r23,r5
 80032ac:	21c05f26 	beq	r4,r7,800342c <_realloc_r+0x3d4>
 80032b0:	b8c01c16 	blt	r23,r3,8003324 <_realloc_r+0x2cc>
 80032b4:	20800317 	ldw	r2,12(r4)
 80032b8:	20c00217 	ldw	r3,8(r4)
 80032bc:	81bfff04 	addi	r6,r16,-4
 80032c0:	01000904 	movi	r4,36
 80032c4:	18800315 	stw	r2,12(r3)
 80032c8:	10c00215 	stw	r3,8(r2)
 80032cc:	b0c00217 	ldw	r3,8(r22)
 80032d0:	b0800317 	ldw	r2,12(r22)
 80032d4:	b4800204 	addi	r18,r22,8
 80032d8:	18800315 	stw	r2,12(r3)
 80032dc:	10c00215 	stw	r3,8(r2)
 80032e0:	21801b36 	bltu	r4,r6,8003350 <_realloc_r+0x2f8>
 80032e4:	008004c4 	movi	r2,19
 80032e8:	1180352e 	bgeu	r2,r6,80033c0 <_realloc_r+0x368>
 80032ec:	a8800017 	ldw	r2,0(r21)
 80032f0:	b0800215 	stw	r2,8(r22)
 80032f4:	a8800117 	ldw	r2,4(r21)
 80032f8:	b0800315 	stw	r2,12(r22)
 80032fc:	008006c4 	movi	r2,27
 8003300:	11807f36 	bltu	r2,r6,8003500 <_realloc_r+0x4a8>
 8003304:	b0800404 	addi	r2,r22,16
 8003308:	ad400204 	addi	r21,r21,8
 800330c:	00002d06 	br	80033c4 <_realloc_r+0x36c>
 8003310:	adbffe17 	ldw	r22,-8(r21)
 8003314:	00bfff04 	movi	r2,-4
 8003318:	9dadc83a 	sub	r22,r19,r22
 800331c:	b1000117 	ldw	r4,4(r22)
 8003320:	2084703a 	and	r2,r4,r2
 8003324:	b03f7726 	beq	r22,zero,8003104 <_realloc_r+0xac>
 8003328:	80af883a 	add	r23,r16,r2
 800332c:	b8ff7516 	blt	r23,r3,8003104 <_realloc_r+0xac>
 8003330:	b0800317 	ldw	r2,12(r22)
 8003334:	b0c00217 	ldw	r3,8(r22)
 8003338:	81bfff04 	addi	r6,r16,-4
 800333c:	01000904 	movi	r4,36
 8003340:	18800315 	stw	r2,12(r3)
 8003344:	10c00215 	stw	r3,8(r2)
 8003348:	b4800204 	addi	r18,r22,8
 800334c:	21bfe52e 	bgeu	r4,r6,80032e4 <_realloc_r+0x28c>
 8003350:	a80b883a 	mov	r5,r21
 8003354:	9009883a 	mov	r4,r18
 8003358:	8002dd40 	call	8002dd4 <memmove>
 800335c:	b821883a 	mov	r16,r23
 8003360:	b027883a 	mov	r19,r22
 8003364:	003f8a06 	br	8003190 <_realloc_r+0x138>
 8003368:	300b883a 	mov	r5,r6
 800336c:	dfc00917 	ldw	ra,36(sp)
 8003370:	df000817 	ldw	fp,32(sp)
 8003374:	ddc00717 	ldw	r23,28(sp)
 8003378:	dd800617 	ldw	r22,24(sp)
 800337c:	dd400517 	ldw	r21,20(sp)
 8003380:	dd000417 	ldw	r20,16(sp)
 8003384:	dcc00317 	ldw	r19,12(sp)
 8003388:	dc800217 	ldw	r18,8(sp)
 800338c:	dc400117 	ldw	r17,4(sp)
 8003390:	dc000017 	ldw	r16,0(sp)
 8003394:	dec00a04 	addi	sp,sp,40
 8003398:	800239c1 	jmpi	800239c <_malloc_r>
 800339c:	a8c00017 	ldw	r3,0(r21)
 80033a0:	90c00015 	stw	r3,0(r18)
 80033a4:	a8c00117 	ldw	r3,4(r21)
 80033a8:	90c00115 	stw	r3,4(r18)
 80033ac:	00c006c4 	movi	r3,27
 80033b0:	19804536 	bltu	r3,r6,80034c8 <_realloc_r+0x470>
 80033b4:	90800204 	addi	r2,r18,8
 80033b8:	a8c00204 	addi	r3,r21,8
 80033bc:	003f6306 	br	800314c <_realloc_r+0xf4>
 80033c0:	9005883a 	mov	r2,r18
 80033c4:	a8c00017 	ldw	r3,0(r21)
 80033c8:	b821883a 	mov	r16,r23
 80033cc:	b027883a 	mov	r19,r22
 80033d0:	10c00015 	stw	r3,0(r2)
 80033d4:	a8c00117 	ldw	r3,4(r21)
 80033d8:	10c00115 	stw	r3,4(r2)
 80033dc:	a8c00217 	ldw	r3,8(r21)
 80033e0:	10c00215 	stw	r3,8(r2)
 80033e4:	003f6a06 	br	8003190 <_realloc_r+0x138>
 80033e8:	9c67883a 	add	r19,r19,r17
 80033ec:	4445c83a 	sub	r2,r8,r17
 80033f0:	e4c00215 	stw	r19,8(fp)
 80033f4:	10800054 	ori	r2,r2,1
 80033f8:	98800115 	stw	r2,4(r19)
 80033fc:	a8bfff17 	ldw	r2,-4(r21)
 8003400:	a009883a 	mov	r4,r20
 8003404:	1080004c 	andi	r2,r2,1
 8003408:	1462b03a 	or	r17,r2,r17
 800340c:	ac7fff15 	stw	r17,-4(r21)
 8003410:	8004a600 	call	8004a60 <__malloc_unlock>
 8003414:	a805883a 	mov	r2,r21
 8003418:	003f6b06 	br	80031c8 <_realloc_r+0x170>
 800341c:	a80b883a 	mov	r5,r21
 8003420:	9009883a 	mov	r4,r18
 8003424:	8002dd40 	call	8002dd4 <memmove>
 8003428:	003f4e06 	br	8003164 <_realloc_r+0x10c>
 800342c:	89000404 	addi	r4,r17,16
 8003430:	b93fbc16 	blt	r23,r4,8003324 <_realloc_r+0x2cc>
 8003434:	b0800317 	ldw	r2,12(r22)
 8003438:	b0c00217 	ldw	r3,8(r22)
 800343c:	81bfff04 	addi	r6,r16,-4
 8003440:	01000904 	movi	r4,36
 8003444:	18800315 	stw	r2,12(r3)
 8003448:	10c00215 	stw	r3,8(r2)
 800344c:	b4800204 	addi	r18,r22,8
 8003450:	21804336 	bltu	r4,r6,8003560 <_realloc_r+0x508>
 8003454:	008004c4 	movi	r2,19
 8003458:	11803f2e 	bgeu	r2,r6,8003558 <_realloc_r+0x500>
 800345c:	a8800017 	ldw	r2,0(r21)
 8003460:	b0800215 	stw	r2,8(r22)
 8003464:	a8800117 	ldw	r2,4(r21)
 8003468:	b0800315 	stw	r2,12(r22)
 800346c:	008006c4 	movi	r2,27
 8003470:	11803f36 	bltu	r2,r6,8003570 <_realloc_r+0x518>
 8003474:	b0800404 	addi	r2,r22,16
 8003478:	ad400204 	addi	r21,r21,8
 800347c:	a8c00017 	ldw	r3,0(r21)
 8003480:	10c00015 	stw	r3,0(r2)
 8003484:	a8c00117 	ldw	r3,4(r21)
 8003488:	10c00115 	stw	r3,4(r2)
 800348c:	a8c00217 	ldw	r3,8(r21)
 8003490:	10c00215 	stw	r3,8(r2)
 8003494:	b447883a 	add	r3,r22,r17
 8003498:	bc45c83a 	sub	r2,r23,r17
 800349c:	e0c00215 	stw	r3,8(fp)
 80034a0:	10800054 	ori	r2,r2,1
 80034a4:	18800115 	stw	r2,4(r3)
 80034a8:	b0800117 	ldw	r2,4(r22)
 80034ac:	a009883a 	mov	r4,r20
 80034b0:	1080004c 	andi	r2,r2,1
 80034b4:	1462b03a 	or	r17,r2,r17
 80034b8:	b4400115 	stw	r17,4(r22)
 80034bc:	8004a600 	call	8004a60 <__malloc_unlock>
 80034c0:	9005883a 	mov	r2,r18
 80034c4:	003f4006 	br	80031c8 <_realloc_r+0x170>
 80034c8:	a8c00217 	ldw	r3,8(r21)
 80034cc:	90c00215 	stw	r3,8(r18)
 80034d0:	a8c00317 	ldw	r3,12(r21)
 80034d4:	90c00315 	stw	r3,12(r18)
 80034d8:	30801126 	beq	r6,r2,8003520 <_realloc_r+0x4c8>
 80034dc:	90800404 	addi	r2,r18,16
 80034e0:	a8c00404 	addi	r3,r21,16
 80034e4:	003f1906 	br	800314c <_realloc_r+0xf4>
 80034e8:	90ffff17 	ldw	r3,-4(r18)
 80034ec:	00bfff04 	movi	r2,-4
 80034f0:	a825883a 	mov	r18,r21
 80034f4:	1884703a 	and	r2,r3,r2
 80034f8:	80a1883a 	add	r16,r16,r2
 80034fc:	003f2406 	br	8003190 <_realloc_r+0x138>
 8003500:	a8800217 	ldw	r2,8(r21)
 8003504:	b0800415 	stw	r2,16(r22)
 8003508:	a8800317 	ldw	r2,12(r21)
 800350c:	b0800515 	stw	r2,20(r22)
 8003510:	31000a26 	beq	r6,r4,800353c <_realloc_r+0x4e4>
 8003514:	b0800604 	addi	r2,r22,24
 8003518:	ad400404 	addi	r21,r21,16
 800351c:	003fa906 	br	80033c4 <_realloc_r+0x36c>
 8003520:	a9000417 	ldw	r4,16(r21)
 8003524:	90800604 	addi	r2,r18,24
 8003528:	a8c00604 	addi	r3,r21,24
 800352c:	91000415 	stw	r4,16(r18)
 8003530:	a9000517 	ldw	r4,20(r21)
 8003534:	91000515 	stw	r4,20(r18)
 8003538:	003f0406 	br	800314c <_realloc_r+0xf4>
 800353c:	a8c00417 	ldw	r3,16(r21)
 8003540:	ad400604 	addi	r21,r21,24
 8003544:	b0800804 	addi	r2,r22,32
 8003548:	b0c00615 	stw	r3,24(r22)
 800354c:	a8ffff17 	ldw	r3,-4(r21)
 8003550:	b0c00715 	stw	r3,28(r22)
 8003554:	003f9b06 	br	80033c4 <_realloc_r+0x36c>
 8003558:	9005883a 	mov	r2,r18
 800355c:	003fc706 	br	800347c <_realloc_r+0x424>
 8003560:	a80b883a 	mov	r5,r21
 8003564:	9009883a 	mov	r4,r18
 8003568:	8002dd40 	call	8002dd4 <memmove>
 800356c:	003fc906 	br	8003494 <_realloc_r+0x43c>
 8003570:	a8800217 	ldw	r2,8(r21)
 8003574:	b0800415 	stw	r2,16(r22)
 8003578:	a8800317 	ldw	r2,12(r21)
 800357c:	b0800515 	stw	r2,20(r22)
 8003580:	31000726 	beq	r6,r4,80035a0 <_realloc_r+0x548>
 8003584:	b0800604 	addi	r2,r22,24
 8003588:	ad400404 	addi	r21,r21,16
 800358c:	003fbb06 	br	800347c <_realloc_r+0x424>
 8003590:	a009883a 	mov	r4,r20
 8003594:	8004a600 	call	8004a60 <__malloc_unlock>
 8003598:	0005883a 	mov	r2,zero
 800359c:	003f0a06 	br	80031c8 <_realloc_r+0x170>
 80035a0:	a8c00417 	ldw	r3,16(r21)
 80035a4:	ad400604 	addi	r21,r21,24
 80035a8:	b0800804 	addi	r2,r22,32
 80035ac:	b0c00615 	stw	r3,24(r22)
 80035b0:	a8ffff17 	ldw	r3,-4(r21)
 80035b4:	b0c00715 	stw	r3,28(r22)
 80035b8:	003fb006 	br	800347c <_realloc_r+0x424>

080035bc <_sbrk_r>:
 80035bc:	defffd04 	addi	sp,sp,-12
 80035c0:	dc000015 	stw	r16,0(sp)
 80035c4:	04020074 	movhi	r16,2049
 80035c8:	dc400115 	stw	r17,4(sp)
 80035cc:	84289804 	addi	r16,r16,-23968
 80035d0:	2023883a 	mov	r17,r4
 80035d4:	2809883a 	mov	r4,r5
 80035d8:	dfc00215 	stw	ra,8(sp)
 80035dc:	80000015 	stw	zero,0(r16)
 80035e0:	8004c200 	call	8004c20 <sbrk>
 80035e4:	00ffffc4 	movi	r3,-1
 80035e8:	10c00526 	beq	r2,r3,8003600 <_sbrk_r+0x44>
 80035ec:	dfc00217 	ldw	ra,8(sp)
 80035f0:	dc400117 	ldw	r17,4(sp)
 80035f4:	dc000017 	ldw	r16,0(sp)
 80035f8:	dec00304 	addi	sp,sp,12
 80035fc:	f800283a 	ret
 8003600:	80c00017 	ldw	r3,0(r16)
 8003604:	183ff926 	beq	r3,zero,80035ec <_sbrk_r+0x30>
 8003608:	88c00015 	stw	r3,0(r17)
 800360c:	003ff706 	br	80035ec <_sbrk_r+0x30>

08003610 <__sread>:
 8003610:	defffe04 	addi	sp,sp,-8
 8003614:	dc000015 	stw	r16,0(sp)
 8003618:	2821883a 	mov	r16,r5
 800361c:	2940038f 	ldh	r5,14(r5)
 8003620:	dfc00115 	stw	ra,4(sp)
 8003624:	80043500 	call	8004350 <_read_r>
 8003628:	10000716 	blt	r2,zero,8003648 <__sread+0x38>
 800362c:	80c01417 	ldw	r3,80(r16)
 8003630:	1887883a 	add	r3,r3,r2
 8003634:	80c01415 	stw	r3,80(r16)
 8003638:	dfc00117 	ldw	ra,4(sp)
 800363c:	dc000017 	ldw	r16,0(sp)
 8003640:	dec00204 	addi	sp,sp,8
 8003644:	f800283a 	ret
 8003648:	80c0030b 	ldhu	r3,12(r16)
 800364c:	18fbffcc 	andi	r3,r3,61439
 8003650:	80c0030d 	sth	r3,12(r16)
 8003654:	dfc00117 	ldw	ra,4(sp)
 8003658:	dc000017 	ldw	r16,0(sp)
 800365c:	dec00204 	addi	sp,sp,8
 8003660:	f800283a 	ret

08003664 <__seofread>:
 8003664:	0005883a 	mov	r2,zero
 8003668:	f800283a 	ret

0800366c <__swrite>:
 800366c:	2880030b 	ldhu	r2,12(r5)
 8003670:	defffb04 	addi	sp,sp,-20
 8003674:	dcc00315 	stw	r19,12(sp)
 8003678:	dc800215 	stw	r18,8(sp)
 800367c:	dc400115 	stw	r17,4(sp)
 8003680:	dc000015 	stw	r16,0(sp)
 8003684:	dfc00415 	stw	ra,16(sp)
 8003688:	10c0400c 	andi	r3,r2,256
 800368c:	2821883a 	mov	r16,r5
 8003690:	2023883a 	mov	r17,r4
 8003694:	3025883a 	mov	r18,r6
 8003698:	3827883a 	mov	r19,r7
 800369c:	18000526 	beq	r3,zero,80036b4 <__swrite+0x48>
 80036a0:	2940038f 	ldh	r5,14(r5)
 80036a4:	01c00084 	movi	r7,2
 80036a8:	000d883a 	mov	r6,zero
 80036ac:	80041340 	call	8004134 <_lseek_r>
 80036b0:	8080030b 	ldhu	r2,12(r16)
 80036b4:	8140038f 	ldh	r5,14(r16)
 80036b8:	10bbffcc 	andi	r2,r2,61439
 80036bc:	980f883a 	mov	r7,r19
 80036c0:	900d883a 	mov	r6,r18
 80036c4:	8809883a 	mov	r4,r17
 80036c8:	8080030d 	sth	r2,12(r16)
 80036cc:	dfc00417 	ldw	ra,16(sp)
 80036d0:	dcc00317 	ldw	r19,12(sp)
 80036d4:	dc800217 	ldw	r18,8(sp)
 80036d8:	dc400117 	ldw	r17,4(sp)
 80036dc:	dc000017 	ldw	r16,0(sp)
 80036e0:	dec00504 	addi	sp,sp,20
 80036e4:	800374c1 	jmpi	800374c <_write_r>

080036e8 <__sseek>:
 80036e8:	defffe04 	addi	sp,sp,-8
 80036ec:	dc000015 	stw	r16,0(sp)
 80036f0:	2821883a 	mov	r16,r5
 80036f4:	2940038f 	ldh	r5,14(r5)
 80036f8:	dfc00115 	stw	ra,4(sp)
 80036fc:	80041340 	call	8004134 <_lseek_r>
 8003700:	00ffffc4 	movi	r3,-1
 8003704:	10c00826 	beq	r2,r3,8003728 <__sseek+0x40>
 8003708:	80c0030b 	ldhu	r3,12(r16)
 800370c:	80801415 	stw	r2,80(r16)
 8003710:	18c40014 	ori	r3,r3,4096
 8003714:	80c0030d 	sth	r3,12(r16)
 8003718:	dfc00117 	ldw	ra,4(sp)
 800371c:	dc000017 	ldw	r16,0(sp)
 8003720:	dec00204 	addi	sp,sp,8
 8003724:	f800283a 	ret
 8003728:	80c0030b 	ldhu	r3,12(r16)
 800372c:	18fbffcc 	andi	r3,r3,61439
 8003730:	80c0030d 	sth	r3,12(r16)
 8003734:	dfc00117 	ldw	ra,4(sp)
 8003738:	dc000017 	ldw	r16,0(sp)
 800373c:	dec00204 	addi	sp,sp,8
 8003740:	f800283a 	ret

08003744 <__sclose>:
 8003744:	2940038f 	ldh	r5,14(r5)
 8003748:	80039001 	jmpi	8003900 <_close_r>

0800374c <_write_r>:
 800374c:	defffd04 	addi	sp,sp,-12
 8003750:	2805883a 	mov	r2,r5
 8003754:	dc000015 	stw	r16,0(sp)
 8003758:	04020074 	movhi	r16,2049
 800375c:	dc400115 	stw	r17,4(sp)
 8003760:	300b883a 	mov	r5,r6
 8003764:	84289804 	addi	r16,r16,-23968
 8003768:	2023883a 	mov	r17,r4
 800376c:	380d883a 	mov	r6,r7
 8003770:	1009883a 	mov	r4,r2
 8003774:	dfc00215 	stw	ra,8(sp)
 8003778:	80000015 	stw	zero,0(r16)
 800377c:	8004d3c0 	call	8004d3c <write>
 8003780:	00ffffc4 	movi	r3,-1
 8003784:	10c00526 	beq	r2,r3,800379c <_write_r+0x50>
 8003788:	dfc00217 	ldw	ra,8(sp)
 800378c:	dc400117 	ldw	r17,4(sp)
 8003790:	dc000017 	ldw	r16,0(sp)
 8003794:	dec00304 	addi	sp,sp,12
 8003798:	f800283a 	ret
 800379c:	80c00017 	ldw	r3,0(r16)
 80037a0:	183ff926 	beq	r3,zero,8003788 <_write_r+0x3c>
 80037a4:	88c00015 	stw	r3,0(r17)
 80037a8:	003ff706 	br	8003788 <_write_r+0x3c>

080037ac <__swsetup_r>:
 80037ac:	00820074 	movhi	r2,2049
 80037b0:	defffd04 	addi	sp,sp,-12
 80037b4:	10a1ed04 	addi	r2,r2,-30796
 80037b8:	dc400115 	stw	r17,4(sp)
 80037bc:	2023883a 	mov	r17,r4
 80037c0:	11000017 	ldw	r4,0(r2)
 80037c4:	dc000015 	stw	r16,0(sp)
 80037c8:	dfc00215 	stw	ra,8(sp)
 80037cc:	2821883a 	mov	r16,r5
 80037d0:	20000226 	beq	r4,zero,80037dc <__swsetup_r+0x30>
 80037d4:	20800e17 	ldw	r2,56(r4)
 80037d8:	10003126 	beq	r2,zero,80038a0 <__swsetup_r+0xf4>
 80037dc:	8080030b 	ldhu	r2,12(r16)
 80037e0:	10c0020c 	andi	r3,r2,8
 80037e4:	1009883a 	mov	r4,r2
 80037e8:	18000f26 	beq	r3,zero,8003828 <__swsetup_r+0x7c>
 80037ec:	80c00417 	ldw	r3,16(r16)
 80037f0:	18001526 	beq	r3,zero,8003848 <__swsetup_r+0x9c>
 80037f4:	1100004c 	andi	r4,r2,1
 80037f8:	20001c1e 	bne	r4,zero,800386c <__swsetup_r+0xc0>
 80037fc:	1080008c 	andi	r2,r2,2
 8003800:	1000291e 	bne	r2,zero,80038a8 <__swsetup_r+0xfc>
 8003804:	80800517 	ldw	r2,20(r16)
 8003808:	80800215 	stw	r2,8(r16)
 800380c:	18001c26 	beq	r3,zero,8003880 <__swsetup_r+0xd4>
 8003810:	0005883a 	mov	r2,zero
 8003814:	dfc00217 	ldw	ra,8(sp)
 8003818:	dc400117 	ldw	r17,4(sp)
 800381c:	dc000017 	ldw	r16,0(sp)
 8003820:	dec00304 	addi	sp,sp,12
 8003824:	f800283a 	ret
 8003828:	2080040c 	andi	r2,r4,16
 800382c:	10002e26 	beq	r2,zero,80038e8 <__swsetup_r+0x13c>
 8003830:	2080010c 	andi	r2,r4,4
 8003834:	10001e1e 	bne	r2,zero,80038b0 <__swsetup_r+0x104>
 8003838:	80c00417 	ldw	r3,16(r16)
 800383c:	20800214 	ori	r2,r4,8
 8003840:	8080030d 	sth	r2,12(r16)
 8003844:	183feb1e 	bne	r3,zero,80037f4 <__swsetup_r+0x48>
 8003848:	1100a00c 	andi	r4,r2,640
 800384c:	01408004 	movi	r5,512
 8003850:	217fe826 	beq	r4,r5,80037f4 <__swsetup_r+0x48>
 8003854:	800b883a 	mov	r5,r16
 8003858:	8809883a 	mov	r4,r17
 800385c:	80041940 	call	8004194 <__smakebuf_r>
 8003860:	8080030b 	ldhu	r2,12(r16)
 8003864:	80c00417 	ldw	r3,16(r16)
 8003868:	003fe206 	br	80037f4 <__swsetup_r+0x48>
 800386c:	80800517 	ldw	r2,20(r16)
 8003870:	80000215 	stw	zero,8(r16)
 8003874:	0085c83a 	sub	r2,zero,r2
 8003878:	80800615 	stw	r2,24(r16)
 800387c:	183fe41e 	bne	r3,zero,8003810 <__swsetup_r+0x64>
 8003880:	80c0030b 	ldhu	r3,12(r16)
 8003884:	0005883a 	mov	r2,zero
 8003888:	1900200c 	andi	r4,r3,128
 800388c:	203fe126 	beq	r4,zero,8003814 <__swsetup_r+0x68>
 8003890:	18c01014 	ori	r3,r3,64
 8003894:	80c0030d 	sth	r3,12(r16)
 8003898:	00bfffc4 	movi	r2,-1
 800389c:	003fdd06 	br	8003814 <__swsetup_r+0x68>
 80038a0:	8001d080 	call	8001d08 <__sinit>
 80038a4:	003fcd06 	br	80037dc <__swsetup_r+0x30>
 80038a8:	0005883a 	mov	r2,zero
 80038ac:	003fd606 	br	8003808 <__swsetup_r+0x5c>
 80038b0:	81400c17 	ldw	r5,48(r16)
 80038b4:	28000626 	beq	r5,zero,80038d0 <__swsetup_r+0x124>
 80038b8:	80801004 	addi	r2,r16,64
 80038bc:	28800326 	beq	r5,r2,80038cc <__swsetup_r+0x120>
 80038c0:	8809883a 	mov	r4,r17
 80038c4:	8003e240 	call	8003e24 <_free_r>
 80038c8:	8100030b 	ldhu	r4,12(r16)
 80038cc:	80000c15 	stw	zero,48(r16)
 80038d0:	80c00417 	ldw	r3,16(r16)
 80038d4:	00bff6c4 	movi	r2,-37
 80038d8:	1108703a 	and	r4,r2,r4
 80038dc:	80000115 	stw	zero,4(r16)
 80038e0:	80c00015 	stw	r3,0(r16)
 80038e4:	003fd506 	br	800383c <__swsetup_r+0x90>
 80038e8:	00800244 	movi	r2,9
 80038ec:	88800015 	stw	r2,0(r17)
 80038f0:	20801014 	ori	r2,r4,64
 80038f4:	8080030d 	sth	r2,12(r16)
 80038f8:	00bfffc4 	movi	r2,-1
 80038fc:	003fc506 	br	8003814 <__swsetup_r+0x68>

08003900 <_close_r>:
 8003900:	defffd04 	addi	sp,sp,-12
 8003904:	dc000015 	stw	r16,0(sp)
 8003908:	04020074 	movhi	r16,2049
 800390c:	dc400115 	stw	r17,4(sp)
 8003910:	84289804 	addi	r16,r16,-23968
 8003914:	2023883a 	mov	r17,r4
 8003918:	2809883a 	mov	r4,r5
 800391c:	dfc00215 	stw	ra,8(sp)
 8003920:	80000015 	stw	zero,0(r16)
 8003924:	80044fc0 	call	80044fc <close>
 8003928:	00ffffc4 	movi	r3,-1
 800392c:	10c00526 	beq	r2,r3,8003944 <_close_r+0x44>
 8003930:	dfc00217 	ldw	ra,8(sp)
 8003934:	dc400117 	ldw	r17,4(sp)
 8003938:	dc000017 	ldw	r16,0(sp)
 800393c:	dec00304 	addi	sp,sp,12
 8003940:	f800283a 	ret
 8003944:	80c00017 	ldw	r3,0(r16)
 8003948:	183ff926 	beq	r3,zero,8003930 <_close_r+0x30>
 800394c:	88c00015 	stw	r3,0(r17)
 8003950:	003ff706 	br	8003930 <_close_r+0x30>

08003954 <_fclose_r>:
 8003954:	28003926 	beq	r5,zero,8003a3c <_fclose_r+0xe8>
 8003958:	defffc04 	addi	sp,sp,-16
 800395c:	dc400115 	stw	r17,4(sp)
 8003960:	dc000015 	stw	r16,0(sp)
 8003964:	dfc00315 	stw	ra,12(sp)
 8003968:	dc800215 	stw	r18,8(sp)
 800396c:	2023883a 	mov	r17,r4
 8003970:	2821883a 	mov	r16,r5
 8003974:	20000226 	beq	r4,zero,8003980 <_fclose_r+0x2c>
 8003978:	20800e17 	ldw	r2,56(r4)
 800397c:	10002726 	beq	r2,zero,8003a1c <_fclose_r+0xc8>
 8003980:	8080030f 	ldh	r2,12(r16)
 8003984:	1000071e 	bne	r2,zero,80039a4 <_fclose_r+0x50>
 8003988:	0005883a 	mov	r2,zero
 800398c:	dfc00317 	ldw	ra,12(sp)
 8003990:	dc800217 	ldw	r18,8(sp)
 8003994:	dc400117 	ldw	r17,4(sp)
 8003998:	dc000017 	ldw	r16,0(sp)
 800399c:	dec00404 	addi	sp,sp,16
 80039a0:	f800283a 	ret
 80039a4:	800b883a 	mov	r5,r16
 80039a8:	8809883a 	mov	r4,r17
 80039ac:	8003a580 	call	8003a58 <__sflush_r>
 80039b0:	1025883a 	mov	r18,r2
 80039b4:	80800b17 	ldw	r2,44(r16)
 80039b8:	10000426 	beq	r2,zero,80039cc <_fclose_r+0x78>
 80039bc:	81400717 	ldw	r5,28(r16)
 80039c0:	8809883a 	mov	r4,r17
 80039c4:	103ee83a 	callr	r2
 80039c8:	10001616 	blt	r2,zero,8003a24 <_fclose_r+0xd0>
 80039cc:	8080030b 	ldhu	r2,12(r16)
 80039d0:	1080200c 	andi	r2,r2,128
 80039d4:	1000151e 	bne	r2,zero,8003a2c <_fclose_r+0xd8>
 80039d8:	81400c17 	ldw	r5,48(r16)
 80039dc:	28000526 	beq	r5,zero,80039f4 <_fclose_r+0xa0>
 80039e0:	80801004 	addi	r2,r16,64
 80039e4:	28800226 	beq	r5,r2,80039f0 <_fclose_r+0x9c>
 80039e8:	8809883a 	mov	r4,r17
 80039ec:	8003e240 	call	8003e24 <_free_r>
 80039f0:	80000c15 	stw	zero,48(r16)
 80039f4:	81401117 	ldw	r5,68(r16)
 80039f8:	28000326 	beq	r5,zero,8003a08 <_fclose_r+0xb4>
 80039fc:	8809883a 	mov	r4,r17
 8003a00:	8003e240 	call	8003e24 <_free_r>
 8003a04:	80001115 	stw	zero,68(r16)
 8003a08:	8001d180 	call	8001d18 <__sfp_lock_acquire>
 8003a0c:	8000030d 	sth	zero,12(r16)
 8003a10:	8001d1c0 	call	8001d1c <__sfp_lock_release>
 8003a14:	9005883a 	mov	r2,r18
 8003a18:	003fdc06 	br	800398c <_fclose_r+0x38>
 8003a1c:	8001d080 	call	8001d08 <__sinit>
 8003a20:	003fd706 	br	8003980 <_fclose_r+0x2c>
 8003a24:	04bfffc4 	movi	r18,-1
 8003a28:	003fe806 	br	80039cc <_fclose_r+0x78>
 8003a2c:	81400417 	ldw	r5,16(r16)
 8003a30:	8809883a 	mov	r4,r17
 8003a34:	8003e240 	call	8003e24 <_free_r>
 8003a38:	003fe706 	br	80039d8 <_fclose_r+0x84>
 8003a3c:	0005883a 	mov	r2,zero
 8003a40:	f800283a 	ret

08003a44 <fclose>:
 8003a44:	00820074 	movhi	r2,2049
 8003a48:	10a1ed04 	addi	r2,r2,-30796
 8003a4c:	200b883a 	mov	r5,r4
 8003a50:	11000017 	ldw	r4,0(r2)
 8003a54:	80039541 	jmpi	8003954 <_fclose_r>

08003a58 <__sflush_r>:
 8003a58:	2880030b 	ldhu	r2,12(r5)
 8003a5c:	defffb04 	addi	sp,sp,-20
 8003a60:	dcc00315 	stw	r19,12(sp)
 8003a64:	dc400115 	stw	r17,4(sp)
 8003a68:	dfc00415 	stw	ra,16(sp)
 8003a6c:	dc800215 	stw	r18,8(sp)
 8003a70:	dc000015 	stw	r16,0(sp)
 8003a74:	10c0020c 	andi	r3,r2,8
 8003a78:	2823883a 	mov	r17,r5
 8003a7c:	2027883a 	mov	r19,r4
 8003a80:	1800311e 	bne	r3,zero,8003b48 <__sflush_r+0xf0>
 8003a84:	28c00117 	ldw	r3,4(r5)
 8003a88:	10820014 	ori	r2,r2,2048
 8003a8c:	2880030d 	sth	r2,12(r5)
 8003a90:	00c04b0e 	bge	zero,r3,8003bc0 <__sflush_r+0x168>
 8003a94:	8a000a17 	ldw	r8,40(r17)
 8003a98:	40002326 	beq	r8,zero,8003b28 <__sflush_r+0xd0>
 8003a9c:	9c000017 	ldw	r16,0(r19)
 8003aa0:	10c4000c 	andi	r3,r2,4096
 8003aa4:	98000015 	stw	zero,0(r19)
 8003aa8:	18004826 	beq	r3,zero,8003bcc <__sflush_r+0x174>
 8003aac:	89801417 	ldw	r6,80(r17)
 8003ab0:	10c0010c 	andi	r3,r2,4
 8003ab4:	18000626 	beq	r3,zero,8003ad0 <__sflush_r+0x78>
 8003ab8:	88c00117 	ldw	r3,4(r17)
 8003abc:	88800c17 	ldw	r2,48(r17)
 8003ac0:	30cdc83a 	sub	r6,r6,r3
 8003ac4:	10000226 	beq	r2,zero,8003ad0 <__sflush_r+0x78>
 8003ac8:	88800f17 	ldw	r2,60(r17)
 8003acc:	308dc83a 	sub	r6,r6,r2
 8003ad0:	89400717 	ldw	r5,28(r17)
 8003ad4:	000f883a 	mov	r7,zero
 8003ad8:	9809883a 	mov	r4,r19
 8003adc:	403ee83a 	callr	r8
 8003ae0:	00ffffc4 	movi	r3,-1
 8003ae4:	10c04426 	beq	r2,r3,8003bf8 <__sflush_r+0x1a0>
 8003ae8:	88c0030b 	ldhu	r3,12(r17)
 8003aec:	89000417 	ldw	r4,16(r17)
 8003af0:	88000115 	stw	zero,4(r17)
 8003af4:	197dffcc 	andi	r5,r3,63487
 8003af8:	8940030d 	sth	r5,12(r17)
 8003afc:	89000015 	stw	r4,0(r17)
 8003b00:	18c4000c 	andi	r3,r3,4096
 8003b04:	18002c1e 	bne	r3,zero,8003bb8 <__sflush_r+0x160>
 8003b08:	89400c17 	ldw	r5,48(r17)
 8003b0c:	9c000015 	stw	r16,0(r19)
 8003b10:	28000526 	beq	r5,zero,8003b28 <__sflush_r+0xd0>
 8003b14:	88801004 	addi	r2,r17,64
 8003b18:	28800226 	beq	r5,r2,8003b24 <__sflush_r+0xcc>
 8003b1c:	9809883a 	mov	r4,r19
 8003b20:	8003e240 	call	8003e24 <_free_r>
 8003b24:	88000c15 	stw	zero,48(r17)
 8003b28:	0005883a 	mov	r2,zero
 8003b2c:	dfc00417 	ldw	ra,16(sp)
 8003b30:	dcc00317 	ldw	r19,12(sp)
 8003b34:	dc800217 	ldw	r18,8(sp)
 8003b38:	dc400117 	ldw	r17,4(sp)
 8003b3c:	dc000017 	ldw	r16,0(sp)
 8003b40:	dec00504 	addi	sp,sp,20
 8003b44:	f800283a 	ret
 8003b48:	2c800417 	ldw	r18,16(r5)
 8003b4c:	903ff626 	beq	r18,zero,8003b28 <__sflush_r+0xd0>
 8003b50:	2c000017 	ldw	r16,0(r5)
 8003b54:	108000cc 	andi	r2,r2,3
 8003b58:	2c800015 	stw	r18,0(r5)
 8003b5c:	84a1c83a 	sub	r16,r16,r18
 8003b60:	1000131e 	bne	r2,zero,8003bb0 <__sflush_r+0x158>
 8003b64:	28800517 	ldw	r2,20(r5)
 8003b68:	88800215 	stw	r2,8(r17)
 8003b6c:	04000316 	blt	zero,r16,8003b7c <__sflush_r+0x124>
 8003b70:	003fed06 	br	8003b28 <__sflush_r+0xd0>
 8003b74:	90a5883a 	add	r18,r18,r2
 8003b78:	043feb0e 	bge	zero,r16,8003b28 <__sflush_r+0xd0>
 8003b7c:	88800917 	ldw	r2,36(r17)
 8003b80:	89400717 	ldw	r5,28(r17)
 8003b84:	800f883a 	mov	r7,r16
 8003b88:	900d883a 	mov	r6,r18
 8003b8c:	9809883a 	mov	r4,r19
 8003b90:	103ee83a 	callr	r2
 8003b94:	80a1c83a 	sub	r16,r16,r2
 8003b98:	00bff616 	blt	zero,r2,8003b74 <__sflush_r+0x11c>
 8003b9c:	88c0030b 	ldhu	r3,12(r17)
 8003ba0:	00bfffc4 	movi	r2,-1
 8003ba4:	18c01014 	ori	r3,r3,64
 8003ba8:	88c0030d 	sth	r3,12(r17)
 8003bac:	003fdf06 	br	8003b2c <__sflush_r+0xd4>
 8003bb0:	0005883a 	mov	r2,zero
 8003bb4:	003fec06 	br	8003b68 <__sflush_r+0x110>
 8003bb8:	88801415 	stw	r2,80(r17)
 8003bbc:	003fd206 	br	8003b08 <__sflush_r+0xb0>
 8003bc0:	28c00f17 	ldw	r3,60(r5)
 8003bc4:	00ffb316 	blt	zero,r3,8003a94 <__sflush_r+0x3c>
 8003bc8:	003fd706 	br	8003b28 <__sflush_r+0xd0>
 8003bcc:	89400717 	ldw	r5,28(r17)
 8003bd0:	000d883a 	mov	r6,zero
 8003bd4:	01c00044 	movi	r7,1
 8003bd8:	9809883a 	mov	r4,r19
 8003bdc:	403ee83a 	callr	r8
 8003be0:	100d883a 	mov	r6,r2
 8003be4:	00bfffc4 	movi	r2,-1
 8003be8:	30801426 	beq	r6,r2,8003c3c <__sflush_r+0x1e4>
 8003bec:	8880030b 	ldhu	r2,12(r17)
 8003bf0:	8a000a17 	ldw	r8,40(r17)
 8003bf4:	003fae06 	br	8003ab0 <__sflush_r+0x58>
 8003bf8:	98c00017 	ldw	r3,0(r19)
 8003bfc:	183fba26 	beq	r3,zero,8003ae8 <__sflush_r+0x90>
 8003c00:	01000744 	movi	r4,29
 8003c04:	19000626 	beq	r3,r4,8003c20 <__sflush_r+0x1c8>
 8003c08:	01000584 	movi	r4,22
 8003c0c:	19000426 	beq	r3,r4,8003c20 <__sflush_r+0x1c8>
 8003c10:	88c0030b 	ldhu	r3,12(r17)
 8003c14:	18c01014 	ori	r3,r3,64
 8003c18:	88c0030d 	sth	r3,12(r17)
 8003c1c:	003fc306 	br	8003b2c <__sflush_r+0xd4>
 8003c20:	8880030b 	ldhu	r2,12(r17)
 8003c24:	88c00417 	ldw	r3,16(r17)
 8003c28:	88000115 	stw	zero,4(r17)
 8003c2c:	10bdffcc 	andi	r2,r2,63487
 8003c30:	8880030d 	sth	r2,12(r17)
 8003c34:	88c00015 	stw	r3,0(r17)
 8003c38:	003fb306 	br	8003b08 <__sflush_r+0xb0>
 8003c3c:	98800017 	ldw	r2,0(r19)
 8003c40:	103fea26 	beq	r2,zero,8003bec <__sflush_r+0x194>
 8003c44:	00c00744 	movi	r3,29
 8003c48:	10c00226 	beq	r2,r3,8003c54 <__sflush_r+0x1fc>
 8003c4c:	00c00584 	movi	r3,22
 8003c50:	10c0031e 	bne	r2,r3,8003c60 <__sflush_r+0x208>
 8003c54:	9c000015 	stw	r16,0(r19)
 8003c58:	0005883a 	mov	r2,zero
 8003c5c:	003fb306 	br	8003b2c <__sflush_r+0xd4>
 8003c60:	88c0030b 	ldhu	r3,12(r17)
 8003c64:	3005883a 	mov	r2,r6
 8003c68:	18c01014 	ori	r3,r3,64
 8003c6c:	88c0030d 	sth	r3,12(r17)
 8003c70:	003fae06 	br	8003b2c <__sflush_r+0xd4>

08003c74 <_fflush_r>:
 8003c74:	defffd04 	addi	sp,sp,-12
 8003c78:	dc000115 	stw	r16,4(sp)
 8003c7c:	dfc00215 	stw	ra,8(sp)
 8003c80:	2021883a 	mov	r16,r4
 8003c84:	20000226 	beq	r4,zero,8003c90 <_fflush_r+0x1c>
 8003c88:	20800e17 	ldw	r2,56(r4)
 8003c8c:	10000c26 	beq	r2,zero,8003cc0 <_fflush_r+0x4c>
 8003c90:	2880030f 	ldh	r2,12(r5)
 8003c94:	1000051e 	bne	r2,zero,8003cac <_fflush_r+0x38>
 8003c98:	0005883a 	mov	r2,zero
 8003c9c:	dfc00217 	ldw	ra,8(sp)
 8003ca0:	dc000117 	ldw	r16,4(sp)
 8003ca4:	dec00304 	addi	sp,sp,12
 8003ca8:	f800283a 	ret
 8003cac:	8009883a 	mov	r4,r16
 8003cb0:	dfc00217 	ldw	ra,8(sp)
 8003cb4:	dc000117 	ldw	r16,4(sp)
 8003cb8:	dec00304 	addi	sp,sp,12
 8003cbc:	8003a581 	jmpi	8003a58 <__sflush_r>
 8003cc0:	d9400015 	stw	r5,0(sp)
 8003cc4:	8001d080 	call	8001d08 <__sinit>
 8003cc8:	d9400017 	ldw	r5,0(sp)
 8003ccc:	003ff006 	br	8003c90 <_fflush_r+0x1c>

08003cd0 <fflush>:
 8003cd0:	20000526 	beq	r4,zero,8003ce8 <fflush+0x18>
 8003cd4:	00820074 	movhi	r2,2049
 8003cd8:	10a1ed04 	addi	r2,r2,-30796
 8003cdc:	200b883a 	mov	r5,r4
 8003ce0:	11000017 	ldw	r4,0(r2)
 8003ce4:	8003c741 	jmpi	8003c74 <_fflush_r>
 8003ce8:	00820074 	movhi	r2,2049
 8003cec:	10a1ec04 	addi	r2,r2,-30800
 8003cf0:	11000017 	ldw	r4,0(r2)
 8003cf4:	01420034 	movhi	r5,2048
 8003cf8:	294f1d04 	addi	r5,r5,15476
 8003cfc:	80022d81 	jmpi	80022d8 <_fwalk_reent>

08003d00 <_malloc_trim_r>:
 8003d00:	defffb04 	addi	sp,sp,-20
 8003d04:	dcc00315 	stw	r19,12(sp)
 8003d08:	04c20034 	movhi	r19,2048
 8003d0c:	dc800215 	stw	r18,8(sp)
 8003d10:	dc400115 	stw	r17,4(sp)
 8003d14:	dc000015 	stw	r16,0(sp)
 8003d18:	dfc00415 	stw	ra,16(sp)
 8003d1c:	2821883a 	mov	r16,r5
 8003d20:	9cdc6804 	addi	r19,r19,29088
 8003d24:	2025883a 	mov	r18,r4
 8003d28:	8004a3c0 	call	8004a3c <__malloc_lock>
 8003d2c:	98800217 	ldw	r2,8(r19)
 8003d30:	14400117 	ldw	r17,4(r2)
 8003d34:	00bfff04 	movi	r2,-4
 8003d38:	88a2703a 	and	r17,r17,r2
 8003d3c:	8c21c83a 	sub	r16,r17,r16
 8003d40:	8403fbc4 	addi	r16,r16,4079
 8003d44:	8020d33a 	srli	r16,r16,12
 8003d48:	0083ffc4 	movi	r2,4095
 8003d4c:	843fffc4 	addi	r16,r16,-1
 8003d50:	8020933a 	slli	r16,r16,12
 8003d54:	1400060e 	bge	r2,r16,8003d70 <_malloc_trim_r+0x70>
 8003d58:	000b883a 	mov	r5,zero
 8003d5c:	9009883a 	mov	r4,r18
 8003d60:	80035bc0 	call	80035bc <_sbrk_r>
 8003d64:	98c00217 	ldw	r3,8(r19)
 8003d68:	1c47883a 	add	r3,r3,r17
 8003d6c:	10c00a26 	beq	r2,r3,8003d98 <_malloc_trim_r+0x98>
 8003d70:	9009883a 	mov	r4,r18
 8003d74:	8004a600 	call	8004a60 <__malloc_unlock>
 8003d78:	0005883a 	mov	r2,zero
 8003d7c:	dfc00417 	ldw	ra,16(sp)
 8003d80:	dcc00317 	ldw	r19,12(sp)
 8003d84:	dc800217 	ldw	r18,8(sp)
 8003d88:	dc400117 	ldw	r17,4(sp)
 8003d8c:	dc000017 	ldw	r16,0(sp)
 8003d90:	dec00504 	addi	sp,sp,20
 8003d94:	f800283a 	ret
 8003d98:	040bc83a 	sub	r5,zero,r16
 8003d9c:	9009883a 	mov	r4,r18
 8003da0:	80035bc0 	call	80035bc <_sbrk_r>
 8003da4:	00ffffc4 	movi	r3,-1
 8003da8:	10c00d26 	beq	r2,r3,8003de0 <_malloc_trim_r+0xe0>
 8003dac:	00c20074 	movhi	r3,2049
 8003db0:	18e8a704 	addi	r3,r3,-23908
 8003db4:	18800017 	ldw	r2,0(r3)
 8003db8:	99000217 	ldw	r4,8(r19)
 8003dbc:	8c23c83a 	sub	r17,r17,r16
 8003dc0:	8c400054 	ori	r17,r17,1
 8003dc4:	1421c83a 	sub	r16,r2,r16
 8003dc8:	24400115 	stw	r17,4(r4)
 8003dcc:	9009883a 	mov	r4,r18
 8003dd0:	1c000015 	stw	r16,0(r3)
 8003dd4:	8004a600 	call	8004a60 <__malloc_unlock>
 8003dd8:	00800044 	movi	r2,1
 8003ddc:	003fe706 	br	8003d7c <_malloc_trim_r+0x7c>
 8003de0:	000b883a 	mov	r5,zero
 8003de4:	9009883a 	mov	r4,r18
 8003de8:	80035bc0 	call	80035bc <_sbrk_r>
 8003dec:	99000217 	ldw	r4,8(r19)
 8003df0:	014003c4 	movi	r5,15
 8003df4:	1107c83a 	sub	r3,r2,r4
 8003df8:	28ffdd0e 	bge	r5,r3,8003d70 <_malloc_trim_r+0x70>
 8003dfc:	01420074 	movhi	r5,2049
 8003e00:	2961ee04 	addi	r5,r5,-30792
 8003e04:	29400017 	ldw	r5,0(r5)
 8003e08:	18c00054 	ori	r3,r3,1
 8003e0c:	20c00115 	stw	r3,4(r4)
 8003e10:	00c20074 	movhi	r3,2049
 8003e14:	1145c83a 	sub	r2,r2,r5
 8003e18:	18e8a704 	addi	r3,r3,-23908
 8003e1c:	18800015 	stw	r2,0(r3)
 8003e20:	003fd306 	br	8003d70 <_malloc_trim_r+0x70>

08003e24 <_free_r>:
 8003e24:	28004126 	beq	r5,zero,8003f2c <_free_r+0x108>
 8003e28:	defffd04 	addi	sp,sp,-12
 8003e2c:	dc400115 	stw	r17,4(sp)
 8003e30:	dc000015 	stw	r16,0(sp)
 8003e34:	2023883a 	mov	r17,r4
 8003e38:	2821883a 	mov	r16,r5
 8003e3c:	dfc00215 	stw	ra,8(sp)
 8003e40:	8004a3c0 	call	8004a3c <__malloc_lock>
 8003e44:	81ffff17 	ldw	r7,-4(r16)
 8003e48:	00bfff84 	movi	r2,-2
 8003e4c:	01020034 	movhi	r4,2048
 8003e50:	81bffe04 	addi	r6,r16,-8
 8003e54:	3884703a 	and	r2,r7,r2
 8003e58:	211c6804 	addi	r4,r4,29088
 8003e5c:	308b883a 	add	r5,r6,r2
 8003e60:	2a400117 	ldw	r9,4(r5)
 8003e64:	22000217 	ldw	r8,8(r4)
 8003e68:	00ffff04 	movi	r3,-4
 8003e6c:	48c6703a 	and	r3,r9,r3
 8003e70:	2a005726 	beq	r5,r8,8003fd0 <_free_r+0x1ac>
 8003e74:	28c00115 	stw	r3,4(r5)
 8003e78:	39c0004c 	andi	r7,r7,1
 8003e7c:	3800091e 	bne	r7,zero,8003ea4 <_free_r+0x80>
 8003e80:	823ffe17 	ldw	r8,-8(r16)
 8003e84:	22400204 	addi	r9,r4,8
 8003e88:	320dc83a 	sub	r6,r6,r8
 8003e8c:	31c00217 	ldw	r7,8(r6)
 8003e90:	1205883a 	add	r2,r2,r8
 8003e94:	3a406526 	beq	r7,r9,800402c <_free_r+0x208>
 8003e98:	32000317 	ldw	r8,12(r6)
 8003e9c:	3a000315 	stw	r8,12(r7)
 8003ea0:	41c00215 	stw	r7,8(r8)
 8003ea4:	28cf883a 	add	r7,r5,r3
 8003ea8:	39c00117 	ldw	r7,4(r7)
 8003eac:	39c0004c 	andi	r7,r7,1
 8003eb0:	38003a26 	beq	r7,zero,8003f9c <_free_r+0x178>
 8003eb4:	10c00054 	ori	r3,r2,1
 8003eb8:	30c00115 	stw	r3,4(r6)
 8003ebc:	3087883a 	add	r3,r6,r2
 8003ec0:	18800015 	stw	r2,0(r3)
 8003ec4:	00c07fc4 	movi	r3,511
 8003ec8:	18801936 	bltu	r3,r2,8003f30 <_free_r+0x10c>
 8003ecc:	1004d0fa 	srli	r2,r2,3
 8003ed0:	01c00044 	movi	r7,1
 8003ed4:	21400117 	ldw	r5,4(r4)
 8003ed8:	10c00044 	addi	r3,r2,1
 8003edc:	18c7883a 	add	r3,r3,r3
 8003ee0:	1005d0ba 	srai	r2,r2,2
 8003ee4:	18c7883a 	add	r3,r3,r3
 8003ee8:	18c7883a 	add	r3,r3,r3
 8003eec:	1907883a 	add	r3,r3,r4
 8003ef0:	3884983a 	sll	r2,r7,r2
 8003ef4:	19c00017 	ldw	r7,0(r3)
 8003ef8:	1a3ffe04 	addi	r8,r3,-8
 8003efc:	1144b03a 	or	r2,r2,r5
 8003f00:	32000315 	stw	r8,12(r6)
 8003f04:	31c00215 	stw	r7,8(r6)
 8003f08:	20800115 	stw	r2,4(r4)
 8003f0c:	19800015 	stw	r6,0(r3)
 8003f10:	39800315 	stw	r6,12(r7)
 8003f14:	8809883a 	mov	r4,r17
 8003f18:	dfc00217 	ldw	ra,8(sp)
 8003f1c:	dc400117 	ldw	r17,4(sp)
 8003f20:	dc000017 	ldw	r16,0(sp)
 8003f24:	dec00304 	addi	sp,sp,12
 8003f28:	8004a601 	jmpi	8004a60 <__malloc_unlock>
 8003f2c:	f800283a 	ret
 8003f30:	100ad27a 	srli	r5,r2,9
 8003f34:	00c00104 	movi	r3,4
 8003f38:	19404a36 	bltu	r3,r5,8004064 <_free_r+0x240>
 8003f3c:	100ad1ba 	srli	r5,r2,6
 8003f40:	28c00e44 	addi	r3,r5,57
 8003f44:	18c7883a 	add	r3,r3,r3
 8003f48:	29400e04 	addi	r5,r5,56
 8003f4c:	18c7883a 	add	r3,r3,r3
 8003f50:	18c7883a 	add	r3,r3,r3
 8003f54:	1909883a 	add	r4,r3,r4
 8003f58:	20c00017 	ldw	r3,0(r4)
 8003f5c:	01c20034 	movhi	r7,2048
 8003f60:	213ffe04 	addi	r4,r4,-8
 8003f64:	39dc6804 	addi	r7,r7,29088
 8003f68:	20c04426 	beq	r4,r3,800407c <_free_r+0x258>
 8003f6c:	01ffff04 	movi	r7,-4
 8003f70:	19400117 	ldw	r5,4(r3)
 8003f74:	29ca703a 	and	r5,r5,r7
 8003f78:	1140022e 	bgeu	r2,r5,8003f84 <_free_r+0x160>
 8003f7c:	18c00217 	ldw	r3,8(r3)
 8003f80:	20fffb1e 	bne	r4,r3,8003f70 <_free_r+0x14c>
 8003f84:	19000317 	ldw	r4,12(r3)
 8003f88:	31000315 	stw	r4,12(r6)
 8003f8c:	30c00215 	stw	r3,8(r6)
 8003f90:	21800215 	stw	r6,8(r4)
 8003f94:	19800315 	stw	r6,12(r3)
 8003f98:	003fde06 	br	8003f14 <_free_r+0xf0>
 8003f9c:	29c00217 	ldw	r7,8(r5)
 8003fa0:	10c5883a 	add	r2,r2,r3
 8003fa4:	00c20034 	movhi	r3,2048
 8003fa8:	18dc6a04 	addi	r3,r3,29096
 8003fac:	38c03b26 	beq	r7,r3,800409c <_free_r+0x278>
 8003fb0:	2a000317 	ldw	r8,12(r5)
 8003fb4:	11400054 	ori	r5,r2,1
 8003fb8:	3087883a 	add	r3,r6,r2
 8003fbc:	3a000315 	stw	r8,12(r7)
 8003fc0:	41c00215 	stw	r7,8(r8)
 8003fc4:	31400115 	stw	r5,4(r6)
 8003fc8:	18800015 	stw	r2,0(r3)
 8003fcc:	003fbd06 	br	8003ec4 <_free_r+0xa0>
 8003fd0:	39c0004c 	andi	r7,r7,1
 8003fd4:	10c5883a 	add	r2,r2,r3
 8003fd8:	3800071e 	bne	r7,zero,8003ff8 <_free_r+0x1d4>
 8003fdc:	81fffe17 	ldw	r7,-8(r16)
 8003fe0:	31cdc83a 	sub	r6,r6,r7
 8003fe4:	30c00317 	ldw	r3,12(r6)
 8003fe8:	31400217 	ldw	r5,8(r6)
 8003fec:	11c5883a 	add	r2,r2,r7
 8003ff0:	28c00315 	stw	r3,12(r5)
 8003ff4:	19400215 	stw	r5,8(r3)
 8003ff8:	10c00054 	ori	r3,r2,1
 8003ffc:	30c00115 	stw	r3,4(r6)
 8004000:	00c20074 	movhi	r3,2049
 8004004:	18e1ef04 	addi	r3,r3,-30788
 8004008:	18c00017 	ldw	r3,0(r3)
 800400c:	21800215 	stw	r6,8(r4)
 8004010:	10ffc036 	bltu	r2,r3,8003f14 <_free_r+0xf0>
 8004014:	00820074 	movhi	r2,2049
 8004018:	10a89704 	addi	r2,r2,-23972
 800401c:	11400017 	ldw	r5,0(r2)
 8004020:	8809883a 	mov	r4,r17
 8004024:	8003d000 	call	8003d00 <_malloc_trim_r>
 8004028:	003fba06 	br	8003f14 <_free_r+0xf0>
 800402c:	28c9883a 	add	r4,r5,r3
 8004030:	21000117 	ldw	r4,4(r4)
 8004034:	2100004c 	andi	r4,r4,1
 8004038:	2000391e 	bne	r4,zero,8004120 <_free_r+0x2fc>
 800403c:	29c00217 	ldw	r7,8(r5)
 8004040:	29000317 	ldw	r4,12(r5)
 8004044:	1885883a 	add	r2,r3,r2
 8004048:	10c00054 	ori	r3,r2,1
 800404c:	39000315 	stw	r4,12(r7)
 8004050:	21c00215 	stw	r7,8(r4)
 8004054:	30c00115 	stw	r3,4(r6)
 8004058:	308d883a 	add	r6,r6,r2
 800405c:	30800015 	stw	r2,0(r6)
 8004060:	003fac06 	br	8003f14 <_free_r+0xf0>
 8004064:	00c00504 	movi	r3,20
 8004068:	19401536 	bltu	r3,r5,80040c0 <_free_r+0x29c>
 800406c:	28c01704 	addi	r3,r5,92
 8004070:	18c7883a 	add	r3,r3,r3
 8004074:	294016c4 	addi	r5,r5,91
 8004078:	003fb406 	br	8003f4c <_free_r+0x128>
 800407c:	280bd0ba 	srai	r5,r5,2
 8004080:	00c00044 	movi	r3,1
 8004084:	38800117 	ldw	r2,4(r7)
 8004088:	194a983a 	sll	r5,r3,r5
 800408c:	2007883a 	mov	r3,r4
 8004090:	2884b03a 	or	r2,r5,r2
 8004094:	38800115 	stw	r2,4(r7)
 8004098:	003fbb06 	br	8003f88 <_free_r+0x164>
 800409c:	21800515 	stw	r6,20(r4)
 80040a0:	21800415 	stw	r6,16(r4)
 80040a4:	10c00054 	ori	r3,r2,1
 80040a8:	31c00315 	stw	r7,12(r6)
 80040ac:	31c00215 	stw	r7,8(r6)
 80040b0:	30c00115 	stw	r3,4(r6)
 80040b4:	308d883a 	add	r6,r6,r2
 80040b8:	30800015 	stw	r2,0(r6)
 80040bc:	003f9506 	br	8003f14 <_free_r+0xf0>
 80040c0:	00c01504 	movi	r3,84
 80040c4:	19400536 	bltu	r3,r5,80040dc <_free_r+0x2b8>
 80040c8:	100ad33a 	srli	r5,r2,12
 80040cc:	28c01bc4 	addi	r3,r5,111
 80040d0:	18c7883a 	add	r3,r3,r3
 80040d4:	29401b84 	addi	r5,r5,110
 80040d8:	003f9c06 	br	8003f4c <_free_r+0x128>
 80040dc:	00c05504 	movi	r3,340
 80040e0:	19400536 	bltu	r3,r5,80040f8 <_free_r+0x2d4>
 80040e4:	100ad3fa 	srli	r5,r2,15
 80040e8:	28c01e04 	addi	r3,r5,120
 80040ec:	18c7883a 	add	r3,r3,r3
 80040f0:	29401dc4 	addi	r5,r5,119
 80040f4:	003f9506 	br	8003f4c <_free_r+0x128>
 80040f8:	00c15504 	movi	r3,1364
 80040fc:	19400536 	bltu	r3,r5,8004114 <_free_r+0x2f0>
 8004100:	100ad4ba 	srli	r5,r2,18
 8004104:	28c01f44 	addi	r3,r5,125
 8004108:	18c7883a 	add	r3,r3,r3
 800410c:	29401f04 	addi	r5,r5,124
 8004110:	003f8e06 	br	8003f4c <_free_r+0x128>
 8004114:	00c03f84 	movi	r3,254
 8004118:	01401f84 	movi	r5,126
 800411c:	003f8b06 	br	8003f4c <_free_r+0x128>
 8004120:	10c00054 	ori	r3,r2,1
 8004124:	30c00115 	stw	r3,4(r6)
 8004128:	308d883a 	add	r6,r6,r2
 800412c:	30800015 	stw	r2,0(r6)
 8004130:	003f7806 	br	8003f14 <_free_r+0xf0>

08004134 <_lseek_r>:
 8004134:	defffd04 	addi	sp,sp,-12
 8004138:	2805883a 	mov	r2,r5
 800413c:	dc000015 	stw	r16,0(sp)
 8004140:	04020074 	movhi	r16,2049
 8004144:	dc400115 	stw	r17,4(sp)
 8004148:	300b883a 	mov	r5,r6
 800414c:	84289804 	addi	r16,r16,-23968
 8004150:	2023883a 	mov	r17,r4
 8004154:	380d883a 	mov	r6,r7
 8004158:	1009883a 	mov	r4,r2
 800415c:	dfc00215 	stw	ra,8(sp)
 8004160:	80000015 	stw	zero,0(r16)
 8004164:	80048ec0 	call	80048ec <lseek>
 8004168:	00ffffc4 	movi	r3,-1
 800416c:	10c00526 	beq	r2,r3,8004184 <_lseek_r+0x50>
 8004170:	dfc00217 	ldw	ra,8(sp)
 8004174:	dc400117 	ldw	r17,4(sp)
 8004178:	dc000017 	ldw	r16,0(sp)
 800417c:	dec00304 	addi	sp,sp,12
 8004180:	f800283a 	ret
 8004184:	80c00017 	ldw	r3,0(r16)
 8004188:	183ff926 	beq	r3,zero,8004170 <_lseek_r+0x3c>
 800418c:	88c00015 	stw	r3,0(r17)
 8004190:	003ff706 	br	8004170 <_lseek_r+0x3c>

08004194 <__smakebuf_r>:
 8004194:	2880030b 	ldhu	r2,12(r5)
 8004198:	10c0008c 	andi	r3,r2,2
 800419c:	1800411e 	bne	r3,zero,80042a4 <__smakebuf_r+0x110>
 80041a0:	deffec04 	addi	sp,sp,-80
 80041a4:	dc000f15 	stw	r16,60(sp)
 80041a8:	2821883a 	mov	r16,r5
 80041ac:	2940038f 	ldh	r5,14(r5)
 80041b0:	dc401015 	stw	r17,64(sp)
 80041b4:	dfc01315 	stw	ra,76(sp)
 80041b8:	dcc01215 	stw	r19,72(sp)
 80041bc:	dc801115 	stw	r18,68(sp)
 80041c0:	2023883a 	mov	r17,r4
 80041c4:	28001c16 	blt	r5,zero,8004238 <__smakebuf_r+0xa4>
 80041c8:	d80d883a 	mov	r6,sp
 80041cc:	80043b00 	call	80043b0 <_fstat_r>
 80041d0:	10001816 	blt	r2,zero,8004234 <__smakebuf_r+0xa0>
 80041d4:	d8800117 	ldw	r2,4(sp)
 80041d8:	00e00014 	movui	r3,32768
 80041dc:	10bc000c 	andi	r2,r2,61440
 80041e0:	14c80020 	cmpeqi	r19,r2,8192
 80041e4:	10c03726 	beq	r2,r3,80042c4 <__smakebuf_r+0x130>
 80041e8:	80c0030b 	ldhu	r3,12(r16)
 80041ec:	18c20014 	ori	r3,r3,2048
 80041f0:	80c0030d 	sth	r3,12(r16)
 80041f4:	00c80004 	movi	r3,8192
 80041f8:	10c0521e 	bne	r2,r3,8004344 <__smakebuf_r+0x1b0>
 80041fc:	8140038f 	ldh	r5,14(r16)
 8004200:	8809883a 	mov	r4,r17
 8004204:	800440c0 	call	800440c <_isatty_r>
 8004208:	10004c26 	beq	r2,zero,800433c <__smakebuf_r+0x1a8>
 800420c:	8080030b 	ldhu	r2,12(r16)
 8004210:	80c010c4 	addi	r3,r16,67
 8004214:	80c00015 	stw	r3,0(r16)
 8004218:	10800054 	ori	r2,r2,1
 800421c:	8080030d 	sth	r2,12(r16)
 8004220:	00800044 	movi	r2,1
 8004224:	80c00415 	stw	r3,16(r16)
 8004228:	80800515 	stw	r2,20(r16)
 800422c:	04810004 	movi	r18,1024
 8004230:	00000706 	br	8004250 <__smakebuf_r+0xbc>
 8004234:	8080030b 	ldhu	r2,12(r16)
 8004238:	10c0200c 	andi	r3,r2,128
 800423c:	18001f1e 	bne	r3,zero,80042bc <__smakebuf_r+0x128>
 8004240:	04810004 	movi	r18,1024
 8004244:	10820014 	ori	r2,r2,2048
 8004248:	8080030d 	sth	r2,12(r16)
 800424c:	0027883a 	mov	r19,zero
 8004250:	900b883a 	mov	r5,r18
 8004254:	8809883a 	mov	r4,r17
 8004258:	800239c0 	call	800239c <_malloc_r>
 800425c:	10002c26 	beq	r2,zero,8004310 <__smakebuf_r+0x17c>
 8004260:	80c0030b 	ldhu	r3,12(r16)
 8004264:	01020034 	movhi	r4,2048
 8004268:	21067004 	addi	r4,r4,6592
 800426c:	89000f15 	stw	r4,60(r17)
 8004270:	18c02014 	ori	r3,r3,128
 8004274:	80c0030d 	sth	r3,12(r16)
 8004278:	80800015 	stw	r2,0(r16)
 800427c:	80800415 	stw	r2,16(r16)
 8004280:	84800515 	stw	r18,20(r16)
 8004284:	98001a1e 	bne	r19,zero,80042f0 <__smakebuf_r+0x15c>
 8004288:	dfc01317 	ldw	ra,76(sp)
 800428c:	dcc01217 	ldw	r19,72(sp)
 8004290:	dc801117 	ldw	r18,68(sp)
 8004294:	dc401017 	ldw	r17,64(sp)
 8004298:	dc000f17 	ldw	r16,60(sp)
 800429c:	dec01404 	addi	sp,sp,80
 80042a0:	f800283a 	ret
 80042a4:	288010c4 	addi	r2,r5,67
 80042a8:	28800015 	stw	r2,0(r5)
 80042ac:	28800415 	stw	r2,16(r5)
 80042b0:	00800044 	movi	r2,1
 80042b4:	28800515 	stw	r2,20(r5)
 80042b8:	f800283a 	ret
 80042bc:	04801004 	movi	r18,64
 80042c0:	003fe006 	br	8004244 <__smakebuf_r+0xb0>
 80042c4:	81000a17 	ldw	r4,40(r16)
 80042c8:	00c20034 	movhi	r3,2048
 80042cc:	18cdba04 	addi	r3,r3,14056
 80042d0:	20ffc51e 	bne	r4,r3,80041e8 <__smakebuf_r+0x54>
 80042d4:	8080030b 	ldhu	r2,12(r16)
 80042d8:	04810004 	movi	r18,1024
 80042dc:	84801315 	stw	r18,76(r16)
 80042e0:	1484b03a 	or	r2,r2,r18
 80042e4:	8080030d 	sth	r2,12(r16)
 80042e8:	0027883a 	mov	r19,zero
 80042ec:	003fd806 	br	8004250 <__smakebuf_r+0xbc>
 80042f0:	8140038f 	ldh	r5,14(r16)
 80042f4:	8809883a 	mov	r4,r17
 80042f8:	800440c0 	call	800440c <_isatty_r>
 80042fc:	103fe226 	beq	r2,zero,8004288 <__smakebuf_r+0xf4>
 8004300:	8080030b 	ldhu	r2,12(r16)
 8004304:	10800054 	ori	r2,r2,1
 8004308:	8080030d 	sth	r2,12(r16)
 800430c:	003fde06 	br	8004288 <__smakebuf_r+0xf4>
 8004310:	8080030b 	ldhu	r2,12(r16)
 8004314:	10c0800c 	andi	r3,r2,512
 8004318:	183fdb1e 	bne	r3,zero,8004288 <__smakebuf_r+0xf4>
 800431c:	10800094 	ori	r2,r2,2
 8004320:	80c010c4 	addi	r3,r16,67
 8004324:	8080030d 	sth	r2,12(r16)
 8004328:	00800044 	movi	r2,1
 800432c:	80c00015 	stw	r3,0(r16)
 8004330:	80c00415 	stw	r3,16(r16)
 8004334:	80800515 	stw	r2,20(r16)
 8004338:	003fd306 	br	8004288 <__smakebuf_r+0xf4>
 800433c:	04810004 	movi	r18,1024
 8004340:	003fc306 	br	8004250 <__smakebuf_r+0xbc>
 8004344:	0027883a 	mov	r19,zero
 8004348:	04810004 	movi	r18,1024
 800434c:	003fc006 	br	8004250 <__smakebuf_r+0xbc>

08004350 <_read_r>:
 8004350:	defffd04 	addi	sp,sp,-12
 8004354:	2805883a 	mov	r2,r5
 8004358:	dc000015 	stw	r16,0(sp)
 800435c:	04020074 	movhi	r16,2049
 8004360:	dc400115 	stw	r17,4(sp)
 8004364:	300b883a 	mov	r5,r6
 8004368:	84289804 	addi	r16,r16,-23968
 800436c:	2023883a 	mov	r17,r4
 8004370:	380d883a 	mov	r6,r7
 8004374:	1009883a 	mov	r4,r2
 8004378:	dfc00215 	stw	ra,8(sp)
 800437c:	80000015 	stw	zero,0(r16)
 8004380:	8004ac00 	call	8004ac0 <read>
 8004384:	00ffffc4 	movi	r3,-1
 8004388:	10c00526 	beq	r2,r3,80043a0 <_read_r+0x50>
 800438c:	dfc00217 	ldw	ra,8(sp)
 8004390:	dc400117 	ldw	r17,4(sp)
 8004394:	dc000017 	ldw	r16,0(sp)
 8004398:	dec00304 	addi	sp,sp,12
 800439c:	f800283a 	ret
 80043a0:	80c00017 	ldw	r3,0(r16)
 80043a4:	183ff926 	beq	r3,zero,800438c <_read_r+0x3c>
 80043a8:	88c00015 	stw	r3,0(r17)
 80043ac:	003ff706 	br	800438c <_read_r+0x3c>

080043b0 <_fstat_r>:
 80043b0:	defffd04 	addi	sp,sp,-12
 80043b4:	2805883a 	mov	r2,r5
 80043b8:	dc000015 	stw	r16,0(sp)
 80043bc:	04020074 	movhi	r16,2049
 80043c0:	dc400115 	stw	r17,4(sp)
 80043c4:	84289804 	addi	r16,r16,-23968
 80043c8:	2023883a 	mov	r17,r4
 80043cc:	300b883a 	mov	r5,r6
 80043d0:	1009883a 	mov	r4,r2
 80043d4:	dfc00215 	stw	ra,8(sp)
 80043d8:	80000015 	stw	zero,0(r16)
 80043dc:	80046340 	call	8004634 <fstat>
 80043e0:	00ffffc4 	movi	r3,-1
 80043e4:	10c00526 	beq	r2,r3,80043fc <_fstat_r+0x4c>
 80043e8:	dfc00217 	ldw	ra,8(sp)
 80043ec:	dc400117 	ldw	r17,4(sp)
 80043f0:	dc000017 	ldw	r16,0(sp)
 80043f4:	dec00304 	addi	sp,sp,12
 80043f8:	f800283a 	ret
 80043fc:	80c00017 	ldw	r3,0(r16)
 8004400:	183ff926 	beq	r3,zero,80043e8 <_fstat_r+0x38>
 8004404:	88c00015 	stw	r3,0(r17)
 8004408:	003ff706 	br	80043e8 <_fstat_r+0x38>

0800440c <_isatty_r>:
 800440c:	defffd04 	addi	sp,sp,-12
 8004410:	dc000015 	stw	r16,0(sp)
 8004414:	04020074 	movhi	r16,2049
 8004418:	dc400115 	stw	r17,4(sp)
 800441c:	84289804 	addi	r16,r16,-23968
 8004420:	2023883a 	mov	r17,r4
 8004424:	2809883a 	mov	r4,r5
 8004428:	dfc00215 	stw	ra,8(sp)
 800442c:	80000015 	stw	zero,0(r16)
 8004430:	80047200 	call	8004720 <isatty>
 8004434:	00ffffc4 	movi	r3,-1
 8004438:	10c00526 	beq	r2,r3,8004450 <_isatty_r+0x44>
 800443c:	dfc00217 	ldw	ra,8(sp)
 8004440:	dc400117 	ldw	r17,4(sp)
 8004444:	dc000017 	ldw	r16,0(sp)
 8004448:	dec00304 	addi	sp,sp,12
 800444c:	f800283a 	ret
 8004450:	80c00017 	ldw	r3,0(r16)
 8004454:	183ff926 	beq	r3,zero,800443c <_isatty_r+0x30>
 8004458:	88c00015 	stw	r3,0(r17)
 800445c:	003ff706 	br	800443c <_isatty_r+0x30>

08004460 <__muldi3>:
 8004460:	223fffcc 	andi	r8,r4,65535
 8004464:	2006d43a 	srli	r3,r4,16
 8004468:	32bfffcc 	andi	r10,r6,65535
 800446c:	3012d43a 	srli	r9,r6,16
 8004470:	4297383a 	mul	r11,r8,r10
 8004474:	1a95383a 	mul	r10,r3,r10
 8004478:	4251383a 	mul	r8,r8,r9
 800447c:	5804d43a 	srli	r2,r11,16
 8004480:	4291883a 	add	r8,r8,r10
 8004484:	1205883a 	add	r2,r2,r8
 8004488:	1a51383a 	mul	r8,r3,r9
 800448c:	1280022e 	bgeu	r2,r10,8004498 <__muldi3+0x38>
 8004490:	00c00074 	movhi	r3,1
 8004494:	40d1883a 	add	r8,r8,r3
 8004498:	1006d43a 	srli	r3,r2,16
 800449c:	21cf383a 	mul	r7,r4,r7
 80044a0:	314b383a 	mul	r5,r6,r5
 80044a4:	1004943a 	slli	r2,r2,16
 80044a8:	1a11883a 	add	r8,r3,r8
 80044ac:	5affffcc 	andi	r11,r11,65535
 80044b0:	3947883a 	add	r3,r7,r5
 80044b4:	12c5883a 	add	r2,r2,r11
 80044b8:	1a07883a 	add	r3,r3,r8
 80044bc:	f800283a 	ret

080044c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80044c0:	defffe04 	addi	sp,sp,-8
 80044c4:	dfc00115 	stw	ra,4(sp)
 80044c8:	df000015 	stw	fp,0(sp)
 80044cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80044d0:	d0a00917 	ldw	r2,-32732(gp)
 80044d4:	10000326 	beq	r2,zero,80044e4 <alt_get_errno+0x24>
 80044d8:	d0a00917 	ldw	r2,-32732(gp)
 80044dc:	103ee83a 	callr	r2
 80044e0:	00000106 	br	80044e8 <alt_get_errno+0x28>
 80044e4:	d0a6ac04 	addi	r2,gp,-25936
}
 80044e8:	e037883a 	mov	sp,fp
 80044ec:	dfc00117 	ldw	ra,4(sp)
 80044f0:	df000017 	ldw	fp,0(sp)
 80044f4:	dec00204 	addi	sp,sp,8
 80044f8:	f800283a 	ret

080044fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80044fc:	defffb04 	addi	sp,sp,-20
 8004500:	dfc00415 	stw	ra,16(sp)
 8004504:	df000315 	stw	fp,12(sp)
 8004508:	df000304 	addi	fp,sp,12
 800450c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8004510:	e0bfff17 	ldw	r2,-4(fp)
 8004514:	10000616 	blt	r2,zero,8004530 <close+0x34>
 8004518:	e0bfff17 	ldw	r2,-4(fp)
 800451c:	10c00324 	muli	r3,r2,12
 8004520:	00820034 	movhi	r2,2048
 8004524:	109d7404 	addi	r2,r2,30160
 8004528:	1885883a 	add	r2,r3,r2
 800452c:	00000106 	br	8004534 <close+0x38>
 8004530:	0005883a 	mov	r2,zero
 8004534:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8004538:	e0bffd17 	ldw	r2,-12(fp)
 800453c:	10001926 	beq	r2,zero,80045a4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8004540:	e0bffd17 	ldw	r2,-12(fp)
 8004544:	10800017 	ldw	r2,0(r2)
 8004548:	10800417 	ldw	r2,16(r2)
 800454c:	10000626 	beq	r2,zero,8004568 <close+0x6c>
 8004550:	e0bffd17 	ldw	r2,-12(fp)
 8004554:	10800017 	ldw	r2,0(r2)
 8004558:	10800417 	ldw	r2,16(r2)
 800455c:	e13ffd17 	ldw	r4,-12(fp)
 8004560:	103ee83a 	callr	r2
 8004564:	00000106 	br	800456c <close+0x70>
 8004568:	0005883a 	mov	r2,zero
 800456c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8004570:	e13fff17 	ldw	r4,-4(fp)
 8004574:	8004bbc0 	call	8004bbc <alt_release_fd>
    if (rval < 0)
 8004578:	e0bffe17 	ldw	r2,-8(fp)
 800457c:	1000070e 	bge	r2,zero,800459c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8004580:	80044c00 	call	80044c0 <alt_get_errno>
 8004584:	1007883a 	mov	r3,r2
 8004588:	e0bffe17 	ldw	r2,-8(fp)
 800458c:	0085c83a 	sub	r2,zero,r2
 8004590:	18800015 	stw	r2,0(r3)
      return -1;
 8004594:	00bfffc4 	movi	r2,-1
 8004598:	00000706 	br	80045b8 <close+0xbc>
    }
    return 0;
 800459c:	0005883a 	mov	r2,zero
 80045a0:	00000506 	br	80045b8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80045a4:	80044c00 	call	80044c0 <alt_get_errno>
 80045a8:	1007883a 	mov	r3,r2
 80045ac:	00801444 	movi	r2,81
 80045b0:	18800015 	stw	r2,0(r3)
    return -1;
 80045b4:	00bfffc4 	movi	r2,-1
  }
}
 80045b8:	e037883a 	mov	sp,fp
 80045bc:	dfc00117 	ldw	ra,4(sp)
 80045c0:	df000017 	ldw	fp,0(sp)
 80045c4:	dec00204 	addi	sp,sp,8
 80045c8:	f800283a 	ret

080045cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80045cc:	defffc04 	addi	sp,sp,-16
 80045d0:	df000315 	stw	fp,12(sp)
 80045d4:	df000304 	addi	fp,sp,12
 80045d8:	e13ffd15 	stw	r4,-12(fp)
 80045dc:	e17ffe15 	stw	r5,-8(fp)
 80045e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80045e4:	e0bfff17 	ldw	r2,-4(fp)
}
 80045e8:	e037883a 	mov	sp,fp
 80045ec:	df000017 	ldw	fp,0(sp)
 80045f0:	dec00104 	addi	sp,sp,4
 80045f4:	f800283a 	ret

080045f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80045f8:	defffe04 	addi	sp,sp,-8
 80045fc:	dfc00115 	stw	ra,4(sp)
 8004600:	df000015 	stw	fp,0(sp)
 8004604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004608:	d0a00917 	ldw	r2,-32732(gp)
 800460c:	10000326 	beq	r2,zero,800461c <alt_get_errno+0x24>
 8004610:	d0a00917 	ldw	r2,-32732(gp)
 8004614:	103ee83a 	callr	r2
 8004618:	00000106 	br	8004620 <alt_get_errno+0x28>
 800461c:	d0a6ac04 	addi	r2,gp,-25936
}
 8004620:	e037883a 	mov	sp,fp
 8004624:	dfc00117 	ldw	ra,4(sp)
 8004628:	df000017 	ldw	fp,0(sp)
 800462c:	dec00204 	addi	sp,sp,8
 8004630:	f800283a 	ret

08004634 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8004634:	defffb04 	addi	sp,sp,-20
 8004638:	dfc00415 	stw	ra,16(sp)
 800463c:	df000315 	stw	fp,12(sp)
 8004640:	df000304 	addi	fp,sp,12
 8004644:	e13ffe15 	stw	r4,-8(fp)
 8004648:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800464c:	e0bffe17 	ldw	r2,-8(fp)
 8004650:	10000616 	blt	r2,zero,800466c <fstat+0x38>
 8004654:	e0bffe17 	ldw	r2,-8(fp)
 8004658:	10c00324 	muli	r3,r2,12
 800465c:	00820034 	movhi	r2,2048
 8004660:	109d7404 	addi	r2,r2,30160
 8004664:	1885883a 	add	r2,r3,r2
 8004668:	00000106 	br	8004670 <fstat+0x3c>
 800466c:	0005883a 	mov	r2,zero
 8004670:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8004674:	e0bffd17 	ldw	r2,-12(fp)
 8004678:	10001026 	beq	r2,zero,80046bc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800467c:	e0bffd17 	ldw	r2,-12(fp)
 8004680:	10800017 	ldw	r2,0(r2)
 8004684:	10800817 	ldw	r2,32(r2)
 8004688:	10000726 	beq	r2,zero,80046a8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800468c:	e0bffd17 	ldw	r2,-12(fp)
 8004690:	10800017 	ldw	r2,0(r2)
 8004694:	10800817 	ldw	r2,32(r2)
 8004698:	e17fff17 	ldw	r5,-4(fp)
 800469c:	e13ffd17 	ldw	r4,-12(fp)
 80046a0:	103ee83a 	callr	r2
 80046a4:	00000a06 	br	80046d0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 80046a8:	e0bfff17 	ldw	r2,-4(fp)
 80046ac:	00c80004 	movi	r3,8192
 80046b0:	10c00115 	stw	r3,4(r2)
      return 0;
 80046b4:	0005883a 	mov	r2,zero
 80046b8:	00000506 	br	80046d0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80046bc:	80045f80 	call	80045f8 <alt_get_errno>
 80046c0:	1007883a 	mov	r3,r2
 80046c4:	00801444 	movi	r2,81
 80046c8:	18800015 	stw	r2,0(r3)
    return -1;
 80046cc:	00bfffc4 	movi	r2,-1
  }
}
 80046d0:	e037883a 	mov	sp,fp
 80046d4:	dfc00117 	ldw	ra,4(sp)
 80046d8:	df000017 	ldw	fp,0(sp)
 80046dc:	dec00204 	addi	sp,sp,8
 80046e0:	f800283a 	ret

080046e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80046e4:	defffe04 	addi	sp,sp,-8
 80046e8:	dfc00115 	stw	ra,4(sp)
 80046ec:	df000015 	stw	fp,0(sp)
 80046f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80046f4:	d0a00917 	ldw	r2,-32732(gp)
 80046f8:	10000326 	beq	r2,zero,8004708 <alt_get_errno+0x24>
 80046fc:	d0a00917 	ldw	r2,-32732(gp)
 8004700:	103ee83a 	callr	r2
 8004704:	00000106 	br	800470c <alt_get_errno+0x28>
 8004708:	d0a6ac04 	addi	r2,gp,-25936
}
 800470c:	e037883a 	mov	sp,fp
 8004710:	dfc00117 	ldw	ra,4(sp)
 8004714:	df000017 	ldw	fp,0(sp)
 8004718:	dec00204 	addi	sp,sp,8
 800471c:	f800283a 	ret

08004720 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8004720:	deffed04 	addi	sp,sp,-76
 8004724:	dfc01215 	stw	ra,72(sp)
 8004728:	df001115 	stw	fp,68(sp)
 800472c:	df001104 	addi	fp,sp,68
 8004730:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004734:	e0bfff17 	ldw	r2,-4(fp)
 8004738:	10000616 	blt	r2,zero,8004754 <isatty+0x34>
 800473c:	e0bfff17 	ldw	r2,-4(fp)
 8004740:	10c00324 	muli	r3,r2,12
 8004744:	00820034 	movhi	r2,2048
 8004748:	109d7404 	addi	r2,r2,30160
 800474c:	1885883a 	add	r2,r3,r2
 8004750:	00000106 	br	8004758 <isatty+0x38>
 8004754:	0005883a 	mov	r2,zero
 8004758:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800475c:	e0bfef17 	ldw	r2,-68(fp)
 8004760:	10000e26 	beq	r2,zero,800479c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8004764:	e0bfef17 	ldw	r2,-68(fp)
 8004768:	10800017 	ldw	r2,0(r2)
 800476c:	10800817 	ldw	r2,32(r2)
 8004770:	1000021e 	bne	r2,zero,800477c <isatty+0x5c>
    {
      return 1;
 8004774:	00800044 	movi	r2,1
 8004778:	00000d06 	br	80047b0 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800477c:	e0bff004 	addi	r2,fp,-64
 8004780:	100b883a 	mov	r5,r2
 8004784:	e13fff17 	ldw	r4,-4(fp)
 8004788:	80046340 	call	8004634 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800478c:	e0bff117 	ldw	r2,-60(fp)
 8004790:	10880020 	cmpeqi	r2,r2,8192
 8004794:	10803fcc 	andi	r2,r2,255
 8004798:	00000506 	br	80047b0 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800479c:	80046e40 	call	80046e4 <alt_get_errno>
 80047a0:	1007883a 	mov	r3,r2
 80047a4:	00801444 	movi	r2,81
 80047a8:	18800015 	stw	r2,0(r3)
    return 0;
 80047ac:	0005883a 	mov	r2,zero
  }
}
 80047b0:	e037883a 	mov	sp,fp
 80047b4:	dfc00117 	ldw	ra,4(sp)
 80047b8:	df000017 	ldw	fp,0(sp)
 80047bc:	dec00204 	addi	sp,sp,8
 80047c0:	f800283a 	ret

080047c4 <alt_load_section>:
 80047c4:	defffc04 	addi	sp,sp,-16
 80047c8:	df000315 	stw	fp,12(sp)
 80047cc:	df000304 	addi	fp,sp,12
 80047d0:	e13ffd15 	stw	r4,-12(fp)
 80047d4:	e17ffe15 	stw	r5,-8(fp)
 80047d8:	e1bfff15 	stw	r6,-4(fp)
 80047dc:	e0fffe17 	ldw	r3,-8(fp)
 80047e0:	e0bffd17 	ldw	r2,-12(fp)
 80047e4:	18800c26 	beq	r3,r2,8004818 <alt_load_section+0x54>
 80047e8:	00000806 	br	800480c <alt_load_section+0x48>
 80047ec:	e0bffe17 	ldw	r2,-8(fp)
 80047f0:	10c00104 	addi	r3,r2,4
 80047f4:	e0fffe15 	stw	r3,-8(fp)
 80047f8:	e0fffd17 	ldw	r3,-12(fp)
 80047fc:	19000104 	addi	r4,r3,4
 8004800:	e13ffd15 	stw	r4,-12(fp)
 8004804:	18c00017 	ldw	r3,0(r3)
 8004808:	10c00015 	stw	r3,0(r2)
 800480c:	e0fffe17 	ldw	r3,-8(fp)
 8004810:	e0bfff17 	ldw	r2,-4(fp)
 8004814:	18bff51e 	bne	r3,r2,80047ec <alt_load_section+0x28>
 8004818:	0001883a 	nop
 800481c:	e037883a 	mov	sp,fp
 8004820:	df000017 	ldw	fp,0(sp)
 8004824:	dec00104 	addi	sp,sp,4
 8004828:	f800283a 	ret

0800482c <alt_load>:
 800482c:	defffe04 	addi	sp,sp,-8
 8004830:	dfc00115 	stw	ra,4(sp)
 8004834:	df000015 	stw	fp,0(sp)
 8004838:	d839883a 	mov	fp,sp
 800483c:	01820074 	movhi	r6,2049
 8004840:	31a1fa04 	addi	r6,r6,-30744
 8004844:	01420034 	movhi	r5,2048
 8004848:	295b5f04 	addi	r5,r5,28028
 800484c:	01020074 	movhi	r4,2049
 8004850:	2121fa04 	addi	r4,r4,-30744
 8004854:	80047c40 	call	80047c4 <alt_load_section>
 8004858:	01820034 	movhi	r6,2048
 800485c:	31809104 	addi	r6,r6,580
 8004860:	01420034 	movhi	r5,2048
 8004864:	29400804 	addi	r5,r5,32
 8004868:	01020034 	movhi	r4,2048
 800486c:	21000804 	addi	r4,r4,32
 8004870:	80047c40 	call	80047c4 <alt_load_section>
 8004874:	01820034 	movhi	r6,2048
 8004878:	319b5f04 	addi	r6,r6,28028
 800487c:	01420034 	movhi	r5,2048
 8004880:	295b3a04 	addi	r5,r5,27880
 8004884:	01020034 	movhi	r4,2048
 8004888:	211b3a04 	addi	r4,r4,27880
 800488c:	80047c40 	call	80047c4 <alt_load_section>
 8004890:	8005bd40 	call	8005bd4 <alt_dcache_flush_all>
 8004894:	8005dbc0 	call	8005dbc <alt_icache_flush_all>
 8004898:	0001883a 	nop
 800489c:	e037883a 	mov	sp,fp
 80048a0:	dfc00117 	ldw	ra,4(sp)
 80048a4:	df000017 	ldw	fp,0(sp)
 80048a8:	dec00204 	addi	sp,sp,8
 80048ac:	f800283a 	ret

080048b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80048b0:	defffe04 	addi	sp,sp,-8
 80048b4:	dfc00115 	stw	ra,4(sp)
 80048b8:	df000015 	stw	fp,0(sp)
 80048bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80048c0:	d0a00917 	ldw	r2,-32732(gp)
 80048c4:	10000326 	beq	r2,zero,80048d4 <alt_get_errno+0x24>
 80048c8:	d0a00917 	ldw	r2,-32732(gp)
 80048cc:	103ee83a 	callr	r2
 80048d0:	00000106 	br	80048d8 <alt_get_errno+0x28>
 80048d4:	d0a6ac04 	addi	r2,gp,-25936
}
 80048d8:	e037883a 	mov	sp,fp
 80048dc:	dfc00117 	ldw	ra,4(sp)
 80048e0:	df000017 	ldw	fp,0(sp)
 80048e4:	dec00204 	addi	sp,sp,8
 80048e8:	f800283a 	ret

080048ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80048ec:	defff904 	addi	sp,sp,-28
 80048f0:	dfc00615 	stw	ra,24(sp)
 80048f4:	df000515 	stw	fp,20(sp)
 80048f8:	df000504 	addi	fp,sp,20
 80048fc:	e13ffd15 	stw	r4,-12(fp)
 8004900:	e17ffe15 	stw	r5,-8(fp)
 8004904:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8004908:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800490c:	e0bffd17 	ldw	r2,-12(fp)
 8004910:	10000616 	blt	r2,zero,800492c <lseek+0x40>
 8004914:	e0bffd17 	ldw	r2,-12(fp)
 8004918:	10c00324 	muli	r3,r2,12
 800491c:	00820034 	movhi	r2,2048
 8004920:	109d7404 	addi	r2,r2,30160
 8004924:	1885883a 	add	r2,r3,r2
 8004928:	00000106 	br	8004930 <lseek+0x44>
 800492c:	0005883a 	mov	r2,zero
 8004930:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8004934:	e0bffc17 	ldw	r2,-16(fp)
 8004938:	10001026 	beq	r2,zero,800497c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800493c:	e0bffc17 	ldw	r2,-16(fp)
 8004940:	10800017 	ldw	r2,0(r2)
 8004944:	10800717 	ldw	r2,28(r2)
 8004948:	10000926 	beq	r2,zero,8004970 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800494c:	e0bffc17 	ldw	r2,-16(fp)
 8004950:	10800017 	ldw	r2,0(r2)
 8004954:	10800717 	ldw	r2,28(r2)
 8004958:	e1bfff17 	ldw	r6,-4(fp)
 800495c:	e17ffe17 	ldw	r5,-8(fp)
 8004960:	e13ffc17 	ldw	r4,-16(fp)
 8004964:	103ee83a 	callr	r2
 8004968:	e0bffb15 	stw	r2,-20(fp)
 800496c:	00000506 	br	8004984 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8004970:	00bfde84 	movi	r2,-134
 8004974:	e0bffb15 	stw	r2,-20(fp)
 8004978:	00000206 	br	8004984 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800497c:	00bfebc4 	movi	r2,-81
 8004980:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8004984:	e0bffb17 	ldw	r2,-20(fp)
 8004988:	1000070e 	bge	r2,zero,80049a8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800498c:	80048b00 	call	80048b0 <alt_get_errno>
 8004990:	1007883a 	mov	r3,r2
 8004994:	e0bffb17 	ldw	r2,-20(fp)
 8004998:	0085c83a 	sub	r2,zero,r2
 800499c:	18800015 	stw	r2,0(r3)
    rc = -1;
 80049a0:	00bfffc4 	movi	r2,-1
 80049a4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 80049a8:	e0bffb17 	ldw	r2,-20(fp)
}
 80049ac:	e037883a 	mov	sp,fp
 80049b0:	dfc00117 	ldw	ra,4(sp)
 80049b4:	df000017 	ldw	fp,0(sp)
 80049b8:	dec00204 	addi	sp,sp,8
 80049bc:	f800283a 	ret

080049c0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80049c0:	defffd04 	addi	sp,sp,-12
 80049c4:	dfc00215 	stw	ra,8(sp)
 80049c8:	df000115 	stw	fp,4(sp)
 80049cc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80049d0:	0009883a 	mov	r4,zero
 80049d4:	8004e680 	call	8004e68 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80049d8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80049dc:	8004ea00 	call	8004ea0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80049e0:	01820034 	movhi	r6,2048
 80049e4:	319b5504 	addi	r6,r6,27988
 80049e8:	01420034 	movhi	r5,2048
 80049ec:	295b5504 	addi	r5,r5,27988
 80049f0:	01020034 	movhi	r4,2048
 80049f4:	211b5504 	addi	r4,r4,27988
 80049f8:	80061540 	call	8006154 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80049fc:	8005cfc0 	call	8005cfc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8004a00:	01020034 	movhi	r4,2048
 8004a04:	21175704 	addi	r4,r4,23900
 8004a08:	80069540 	call	8006954 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8004a0c:	d0a6ad17 	ldw	r2,-25932(gp)
 8004a10:	d0e6ae17 	ldw	r3,-25928(gp)
 8004a14:	d126af17 	ldw	r4,-25924(gp)
 8004a18:	200d883a 	mov	r6,r4
 8004a1c:	180b883a 	mov	r5,r3
 8004a20:	1009883a 	mov	r4,r2
 8004a24:	80014200 	call	8001420 <main>
 8004a28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8004a2c:	01000044 	movi	r4,1
 8004a30:	80044fc0 	call	80044fc <close>
  exit (result);
 8004a34:	e13fff17 	ldw	r4,-4(fp)
 8004a38:	80069680 	call	8006968 <exit>

08004a3c <__malloc_lock>:
 8004a3c:	defffe04 	addi	sp,sp,-8
 8004a40:	df000115 	stw	fp,4(sp)
 8004a44:	df000104 	addi	fp,sp,4
 8004a48:	e13fff15 	stw	r4,-4(fp)
 8004a4c:	0001883a 	nop
 8004a50:	e037883a 	mov	sp,fp
 8004a54:	df000017 	ldw	fp,0(sp)
 8004a58:	dec00104 	addi	sp,sp,4
 8004a5c:	f800283a 	ret

08004a60 <__malloc_unlock>:
 8004a60:	defffe04 	addi	sp,sp,-8
 8004a64:	df000115 	stw	fp,4(sp)
 8004a68:	df000104 	addi	fp,sp,4
 8004a6c:	e13fff15 	stw	r4,-4(fp)
 8004a70:	0001883a 	nop
 8004a74:	e037883a 	mov	sp,fp
 8004a78:	df000017 	ldw	fp,0(sp)
 8004a7c:	dec00104 	addi	sp,sp,4
 8004a80:	f800283a 	ret

08004a84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004a84:	defffe04 	addi	sp,sp,-8
 8004a88:	dfc00115 	stw	ra,4(sp)
 8004a8c:	df000015 	stw	fp,0(sp)
 8004a90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004a94:	d0a00917 	ldw	r2,-32732(gp)
 8004a98:	10000326 	beq	r2,zero,8004aa8 <alt_get_errno+0x24>
 8004a9c:	d0a00917 	ldw	r2,-32732(gp)
 8004aa0:	103ee83a 	callr	r2
 8004aa4:	00000106 	br	8004aac <alt_get_errno+0x28>
 8004aa8:	d0a6ac04 	addi	r2,gp,-25936
}
 8004aac:	e037883a 	mov	sp,fp
 8004ab0:	dfc00117 	ldw	ra,4(sp)
 8004ab4:	df000017 	ldw	fp,0(sp)
 8004ab8:	dec00204 	addi	sp,sp,8
 8004abc:	f800283a 	ret

08004ac0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8004ac0:	defff904 	addi	sp,sp,-28
 8004ac4:	dfc00615 	stw	ra,24(sp)
 8004ac8:	df000515 	stw	fp,20(sp)
 8004acc:	df000504 	addi	fp,sp,20
 8004ad0:	e13ffd15 	stw	r4,-12(fp)
 8004ad4:	e17ffe15 	stw	r5,-8(fp)
 8004ad8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004adc:	e0bffd17 	ldw	r2,-12(fp)
 8004ae0:	10000616 	blt	r2,zero,8004afc <read+0x3c>
 8004ae4:	e0bffd17 	ldw	r2,-12(fp)
 8004ae8:	10c00324 	muli	r3,r2,12
 8004aec:	00820034 	movhi	r2,2048
 8004af0:	109d7404 	addi	r2,r2,30160
 8004af4:	1885883a 	add	r2,r3,r2
 8004af8:	00000106 	br	8004b00 <read+0x40>
 8004afc:	0005883a 	mov	r2,zero
 8004b00:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004b04:	e0bffb17 	ldw	r2,-20(fp)
 8004b08:	10002226 	beq	r2,zero,8004b94 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8004b0c:	e0bffb17 	ldw	r2,-20(fp)
 8004b10:	10800217 	ldw	r2,8(r2)
 8004b14:	108000cc 	andi	r2,r2,3
 8004b18:	10800060 	cmpeqi	r2,r2,1
 8004b1c:	1000181e 	bne	r2,zero,8004b80 <read+0xc0>
        (fd->dev->read))
 8004b20:	e0bffb17 	ldw	r2,-20(fp)
 8004b24:	10800017 	ldw	r2,0(r2)
 8004b28:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8004b2c:	10001426 	beq	r2,zero,8004b80 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8004b30:	e0bffb17 	ldw	r2,-20(fp)
 8004b34:	10800017 	ldw	r2,0(r2)
 8004b38:	10800517 	ldw	r2,20(r2)
 8004b3c:	e0ffff17 	ldw	r3,-4(fp)
 8004b40:	180d883a 	mov	r6,r3
 8004b44:	e17ffe17 	ldw	r5,-8(fp)
 8004b48:	e13ffb17 	ldw	r4,-20(fp)
 8004b4c:	103ee83a 	callr	r2
 8004b50:	e0bffc15 	stw	r2,-16(fp)
 8004b54:	e0bffc17 	ldw	r2,-16(fp)
 8004b58:	1000070e 	bge	r2,zero,8004b78 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8004b5c:	8004a840 	call	8004a84 <alt_get_errno>
 8004b60:	1007883a 	mov	r3,r2
 8004b64:	e0bffc17 	ldw	r2,-16(fp)
 8004b68:	0085c83a 	sub	r2,zero,r2
 8004b6c:	18800015 	stw	r2,0(r3)
          return -1;
 8004b70:	00bfffc4 	movi	r2,-1
 8004b74:	00000c06 	br	8004ba8 <read+0xe8>
        }
        return rval;
 8004b78:	e0bffc17 	ldw	r2,-16(fp)
 8004b7c:	00000a06 	br	8004ba8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8004b80:	8004a840 	call	8004a84 <alt_get_errno>
 8004b84:	1007883a 	mov	r3,r2
 8004b88:	00800344 	movi	r2,13
 8004b8c:	18800015 	stw	r2,0(r3)
 8004b90:	00000406 	br	8004ba4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8004b94:	8004a840 	call	8004a84 <alt_get_errno>
 8004b98:	1007883a 	mov	r3,r2
 8004b9c:	00801444 	movi	r2,81
 8004ba0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004ba4:	00bfffc4 	movi	r2,-1
}
 8004ba8:	e037883a 	mov	sp,fp
 8004bac:	dfc00117 	ldw	ra,4(sp)
 8004bb0:	df000017 	ldw	fp,0(sp)
 8004bb4:	dec00204 	addi	sp,sp,8
 8004bb8:	f800283a 	ret

08004bbc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8004bbc:	defffe04 	addi	sp,sp,-8
 8004bc0:	df000115 	stw	fp,4(sp)
 8004bc4:	df000104 	addi	fp,sp,4
 8004bc8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8004bcc:	e0bfff17 	ldw	r2,-4(fp)
 8004bd0:	108000d0 	cmplti	r2,r2,3
 8004bd4:	10000d1e 	bne	r2,zero,8004c0c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8004bd8:	00820034 	movhi	r2,2048
 8004bdc:	109d7404 	addi	r2,r2,30160
 8004be0:	e0ffff17 	ldw	r3,-4(fp)
 8004be4:	18c00324 	muli	r3,r3,12
 8004be8:	10c5883a 	add	r2,r2,r3
 8004bec:	10800204 	addi	r2,r2,8
 8004bf0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8004bf4:	00820034 	movhi	r2,2048
 8004bf8:	109d7404 	addi	r2,r2,30160
 8004bfc:	e0ffff17 	ldw	r3,-4(fp)
 8004c00:	18c00324 	muli	r3,r3,12
 8004c04:	10c5883a 	add	r2,r2,r3
 8004c08:	10000015 	stw	zero,0(r2)
  }
}
 8004c0c:	0001883a 	nop
 8004c10:	e037883a 	mov	sp,fp
 8004c14:	df000017 	ldw	fp,0(sp)
 8004c18:	dec00104 	addi	sp,sp,4
 8004c1c:	f800283a 	ret

08004c20 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8004c20:	defff904 	addi	sp,sp,-28
 8004c24:	df000615 	stw	fp,24(sp)
 8004c28:	df000604 	addi	fp,sp,24
 8004c2c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c30:	0005303a 	rdctl	r2,status
 8004c34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c38:	e0fffe17 	ldw	r3,-8(fp)
 8004c3c:	00bfff84 	movi	r2,-2
 8004c40:	1884703a 	and	r2,r3,r2
 8004c44:	1001703a 	wrctl	status,r2
  
  return context;
 8004c48:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8004c4c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8004c50:	d0a00a17 	ldw	r2,-32728(gp)
 8004c54:	10c000c4 	addi	r3,r2,3
 8004c58:	00bfff04 	movi	r2,-4
 8004c5c:	1884703a 	and	r2,r3,r2
 8004c60:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8004c64:	d0e00a17 	ldw	r3,-32728(gp)
 8004c68:	e0bfff17 	ldw	r2,-4(fp)
 8004c6c:	1887883a 	add	r3,r3,r2
 8004c70:	00840034 	movhi	r2,4096
 8004c74:	10800004 	addi	r2,r2,0
 8004c78:	10c0062e 	bgeu	r2,r3,8004c94 <sbrk+0x74>
 8004c7c:	e0bffb17 	ldw	r2,-20(fp)
 8004c80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004c84:	e0bffa17 	ldw	r2,-24(fp)
 8004c88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8004c8c:	00bfffc4 	movi	r2,-1
 8004c90:	00000b06 	br	8004cc0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8004c94:	d0a00a17 	ldw	r2,-32728(gp)
 8004c98:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8004c9c:	d0e00a17 	ldw	r3,-32728(gp)
 8004ca0:	e0bfff17 	ldw	r2,-4(fp)
 8004ca4:	1885883a 	add	r2,r3,r2
 8004ca8:	d0a00a15 	stw	r2,-32728(gp)
 8004cac:	e0bffb17 	ldw	r2,-20(fp)
 8004cb0:	e0bffc15 	stw	r2,-16(fp)
 8004cb4:	e0bffc17 	ldw	r2,-16(fp)
 8004cb8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8004cbc:	e0bffd17 	ldw	r2,-12(fp)
} 
 8004cc0:	e037883a 	mov	sp,fp
 8004cc4:	df000017 	ldw	fp,0(sp)
 8004cc8:	dec00104 	addi	sp,sp,4
 8004ccc:	f800283a 	ret

08004cd0 <usleep>:
 8004cd0:	defffd04 	addi	sp,sp,-12
 8004cd4:	dfc00215 	stw	ra,8(sp)
 8004cd8:	df000115 	stw	fp,4(sp)
 8004cdc:	df000104 	addi	fp,sp,4
 8004ce0:	e13fff15 	stw	r4,-4(fp)
 8004ce4:	e13fff17 	ldw	r4,-4(fp)
 8004ce8:	8005a7c0 	call	8005a7c <alt_busy_sleep>
 8004cec:	e037883a 	mov	sp,fp
 8004cf0:	dfc00117 	ldw	ra,4(sp)
 8004cf4:	df000017 	ldw	fp,0(sp)
 8004cf8:	dec00204 	addi	sp,sp,8
 8004cfc:	f800283a 	ret

08004d00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004d00:	defffe04 	addi	sp,sp,-8
 8004d04:	dfc00115 	stw	ra,4(sp)
 8004d08:	df000015 	stw	fp,0(sp)
 8004d0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004d10:	d0a00917 	ldw	r2,-32732(gp)
 8004d14:	10000326 	beq	r2,zero,8004d24 <alt_get_errno+0x24>
 8004d18:	d0a00917 	ldw	r2,-32732(gp)
 8004d1c:	103ee83a 	callr	r2
 8004d20:	00000106 	br	8004d28 <alt_get_errno+0x28>
 8004d24:	d0a6ac04 	addi	r2,gp,-25936
}
 8004d28:	e037883a 	mov	sp,fp
 8004d2c:	dfc00117 	ldw	ra,4(sp)
 8004d30:	df000017 	ldw	fp,0(sp)
 8004d34:	dec00204 	addi	sp,sp,8
 8004d38:	f800283a 	ret

08004d3c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004d3c:	defff904 	addi	sp,sp,-28
 8004d40:	dfc00615 	stw	ra,24(sp)
 8004d44:	df000515 	stw	fp,20(sp)
 8004d48:	df000504 	addi	fp,sp,20
 8004d4c:	e13ffd15 	stw	r4,-12(fp)
 8004d50:	e17ffe15 	stw	r5,-8(fp)
 8004d54:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004d58:	e0bffd17 	ldw	r2,-12(fp)
 8004d5c:	10000616 	blt	r2,zero,8004d78 <write+0x3c>
 8004d60:	e0bffd17 	ldw	r2,-12(fp)
 8004d64:	10c00324 	muli	r3,r2,12
 8004d68:	00820034 	movhi	r2,2048
 8004d6c:	109d7404 	addi	r2,r2,30160
 8004d70:	1885883a 	add	r2,r3,r2
 8004d74:	00000106 	br	8004d7c <write+0x40>
 8004d78:	0005883a 	mov	r2,zero
 8004d7c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004d80:	e0bffb17 	ldw	r2,-20(fp)
 8004d84:	10002126 	beq	r2,zero,8004e0c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004d88:	e0bffb17 	ldw	r2,-20(fp)
 8004d8c:	10800217 	ldw	r2,8(r2)
 8004d90:	108000cc 	andi	r2,r2,3
 8004d94:	10001826 	beq	r2,zero,8004df8 <write+0xbc>
 8004d98:	e0bffb17 	ldw	r2,-20(fp)
 8004d9c:	10800017 	ldw	r2,0(r2)
 8004da0:	10800617 	ldw	r2,24(r2)
 8004da4:	10001426 	beq	r2,zero,8004df8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8004da8:	e0bffb17 	ldw	r2,-20(fp)
 8004dac:	10800017 	ldw	r2,0(r2)
 8004db0:	10800617 	ldw	r2,24(r2)
 8004db4:	e0ffff17 	ldw	r3,-4(fp)
 8004db8:	180d883a 	mov	r6,r3
 8004dbc:	e17ffe17 	ldw	r5,-8(fp)
 8004dc0:	e13ffb17 	ldw	r4,-20(fp)
 8004dc4:	103ee83a 	callr	r2
 8004dc8:	e0bffc15 	stw	r2,-16(fp)
 8004dcc:	e0bffc17 	ldw	r2,-16(fp)
 8004dd0:	1000070e 	bge	r2,zero,8004df0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8004dd4:	8004d000 	call	8004d00 <alt_get_errno>
 8004dd8:	1007883a 	mov	r3,r2
 8004ddc:	e0bffc17 	ldw	r2,-16(fp)
 8004de0:	0085c83a 	sub	r2,zero,r2
 8004de4:	18800015 	stw	r2,0(r3)
        return -1;
 8004de8:	00bfffc4 	movi	r2,-1
 8004dec:	00000c06 	br	8004e20 <write+0xe4>
      }
      return rval;
 8004df0:	e0bffc17 	ldw	r2,-16(fp)
 8004df4:	00000a06 	br	8004e20 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004df8:	8004d000 	call	8004d00 <alt_get_errno>
 8004dfc:	1007883a 	mov	r3,r2
 8004e00:	00800344 	movi	r2,13
 8004e04:	18800015 	stw	r2,0(r3)
 8004e08:	00000406 	br	8004e1c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004e0c:	8004d000 	call	8004d00 <alt_get_errno>
 8004e10:	1007883a 	mov	r3,r2
 8004e14:	00801444 	movi	r2,81
 8004e18:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004e1c:	00bfffc4 	movi	r2,-1
}
 8004e20:	e037883a 	mov	sp,fp
 8004e24:	dfc00117 	ldw	ra,4(sp)
 8004e28:	df000017 	ldw	fp,0(sp)
 8004e2c:	dec00204 	addi	sp,sp,8
 8004e30:	f800283a 	ret

08004e34 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004e34:	defffd04 	addi	sp,sp,-12
 8004e38:	dfc00215 	stw	ra,8(sp)
 8004e3c:	df000115 	stw	fp,4(sp)
 8004e40:	df000104 	addi	fp,sp,4
 8004e44:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004e48:	d1600604 	addi	r5,gp,-32744
 8004e4c:	e13fff17 	ldw	r4,-4(fp)
 8004e50:	8005c580 	call	8005c58 <alt_dev_llist_insert>
}
 8004e54:	e037883a 	mov	sp,fp
 8004e58:	dfc00117 	ldw	ra,4(sp)
 8004e5c:	df000017 	ldw	fp,0(sp)
 8004e60:	dec00204 	addi	sp,sp,8
 8004e64:	f800283a 	ret

08004e68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8004e68:	defffd04 	addi	sp,sp,-12
 8004e6c:	dfc00215 	stw	ra,8(sp)
 8004e70:	df000115 	stw	fp,4(sp)
 8004e74:	df000104 	addi	fp,sp,4
 8004e78:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8004e7c:	80065c80 	call	80065c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004e80:	00800044 	movi	r2,1
 8004e84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004e88:	0001883a 	nop
 8004e8c:	e037883a 	mov	sp,fp
 8004e90:	dfc00117 	ldw	ra,4(sp)
 8004e94:	df000017 	ldw	fp,0(sp)
 8004e98:	dec00204 	addi	sp,sp,8
 8004e9c:	f800283a 	ret

08004ea0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004ea0:	defffe04 	addi	sp,sp,-8
 8004ea4:	dfc00115 	stw	ra,4(sp)
 8004ea8:	df000015 	stw	fp,0(sp)
 8004eac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004eb0:	000d883a 	mov	r6,zero
 8004eb4:	000b883a 	mov	r5,zero
 8004eb8:	01020034 	movhi	r4,2048
 8004ebc:	211dde04 	addi	r4,r4,30584
 8004ec0:	800504c0 	call	800504c <altera_avalon_jtag_uart_init>
 8004ec4:	01020034 	movhi	r4,2048
 8004ec8:	211dd404 	addi	r4,r4,30544
 8004ecc:	8004e340 	call	8004e34 <alt_dev_reg>
}
 8004ed0:	0001883a 	nop
 8004ed4:	e037883a 	mov	sp,fp
 8004ed8:	dfc00117 	ldw	ra,4(sp)
 8004edc:	df000017 	ldw	fp,0(sp)
 8004ee0:	dec00204 	addi	sp,sp,8
 8004ee4:	f800283a 	ret

08004ee8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8004ee8:	defffa04 	addi	sp,sp,-24
 8004eec:	dfc00515 	stw	ra,20(sp)
 8004ef0:	df000415 	stw	fp,16(sp)
 8004ef4:	df000404 	addi	fp,sp,16
 8004ef8:	e13ffd15 	stw	r4,-12(fp)
 8004efc:	e17ffe15 	stw	r5,-8(fp)
 8004f00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004f04:	e0bffd17 	ldw	r2,-12(fp)
 8004f08:	10800017 	ldw	r2,0(r2)
 8004f0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8004f10:	e0bffc17 	ldw	r2,-16(fp)
 8004f14:	10c00a04 	addi	r3,r2,40
 8004f18:	e0bffd17 	ldw	r2,-12(fp)
 8004f1c:	10800217 	ldw	r2,8(r2)
 8004f20:	100f883a 	mov	r7,r2
 8004f24:	e1bfff17 	ldw	r6,-4(fp)
 8004f28:	e17ffe17 	ldw	r5,-8(fp)
 8004f2c:	1809883a 	mov	r4,r3
 8004f30:	80055100 	call	8005510 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8004f34:	e037883a 	mov	sp,fp
 8004f38:	dfc00117 	ldw	ra,4(sp)
 8004f3c:	df000017 	ldw	fp,0(sp)
 8004f40:	dec00204 	addi	sp,sp,8
 8004f44:	f800283a 	ret

08004f48 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8004f48:	defffa04 	addi	sp,sp,-24
 8004f4c:	dfc00515 	stw	ra,20(sp)
 8004f50:	df000415 	stw	fp,16(sp)
 8004f54:	df000404 	addi	fp,sp,16
 8004f58:	e13ffd15 	stw	r4,-12(fp)
 8004f5c:	e17ffe15 	stw	r5,-8(fp)
 8004f60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004f64:	e0bffd17 	ldw	r2,-12(fp)
 8004f68:	10800017 	ldw	r2,0(r2)
 8004f6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8004f70:	e0bffc17 	ldw	r2,-16(fp)
 8004f74:	10c00a04 	addi	r3,r2,40
 8004f78:	e0bffd17 	ldw	r2,-12(fp)
 8004f7c:	10800217 	ldw	r2,8(r2)
 8004f80:	100f883a 	mov	r7,r2
 8004f84:	e1bfff17 	ldw	r6,-4(fp)
 8004f88:	e17ffe17 	ldw	r5,-8(fp)
 8004f8c:	1809883a 	mov	r4,r3
 8004f90:	800572c0 	call	800572c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8004f94:	e037883a 	mov	sp,fp
 8004f98:	dfc00117 	ldw	ra,4(sp)
 8004f9c:	df000017 	ldw	fp,0(sp)
 8004fa0:	dec00204 	addi	sp,sp,8
 8004fa4:	f800283a 	ret

08004fa8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8004fa8:	defffc04 	addi	sp,sp,-16
 8004fac:	dfc00315 	stw	ra,12(sp)
 8004fb0:	df000215 	stw	fp,8(sp)
 8004fb4:	df000204 	addi	fp,sp,8
 8004fb8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004fbc:	e0bfff17 	ldw	r2,-4(fp)
 8004fc0:	10800017 	ldw	r2,0(r2)
 8004fc4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8004fc8:	e0bffe17 	ldw	r2,-8(fp)
 8004fcc:	10c00a04 	addi	r3,r2,40
 8004fd0:	e0bfff17 	ldw	r2,-4(fp)
 8004fd4:	10800217 	ldw	r2,8(r2)
 8004fd8:	100b883a 	mov	r5,r2
 8004fdc:	1809883a 	mov	r4,r3
 8004fe0:	80053b80 	call	80053b8 <altera_avalon_jtag_uart_close>
}
 8004fe4:	e037883a 	mov	sp,fp
 8004fe8:	dfc00117 	ldw	ra,4(sp)
 8004fec:	df000017 	ldw	fp,0(sp)
 8004ff0:	dec00204 	addi	sp,sp,8
 8004ff4:	f800283a 	ret

08004ff8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8004ff8:	defffa04 	addi	sp,sp,-24
 8004ffc:	dfc00515 	stw	ra,20(sp)
 8005000:	df000415 	stw	fp,16(sp)
 8005004:	df000404 	addi	fp,sp,16
 8005008:	e13ffd15 	stw	r4,-12(fp)
 800500c:	e17ffe15 	stw	r5,-8(fp)
 8005010:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8005014:	e0bffd17 	ldw	r2,-12(fp)
 8005018:	10800017 	ldw	r2,0(r2)
 800501c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8005020:	e0bffc17 	ldw	r2,-16(fp)
 8005024:	10800a04 	addi	r2,r2,40
 8005028:	e1bfff17 	ldw	r6,-4(fp)
 800502c:	e17ffe17 	ldw	r5,-8(fp)
 8005030:	1009883a 	mov	r4,r2
 8005034:	80054200 	call	8005420 <altera_avalon_jtag_uart_ioctl>
}
 8005038:	e037883a 	mov	sp,fp
 800503c:	dfc00117 	ldw	ra,4(sp)
 8005040:	df000017 	ldw	fp,0(sp)
 8005044:	dec00204 	addi	sp,sp,8
 8005048:	f800283a 	ret

0800504c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800504c:	defffa04 	addi	sp,sp,-24
 8005050:	dfc00515 	stw	ra,20(sp)
 8005054:	df000415 	stw	fp,16(sp)
 8005058:	df000404 	addi	fp,sp,16
 800505c:	e13ffd15 	stw	r4,-12(fp)
 8005060:	e17ffe15 	stw	r5,-8(fp)
 8005064:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8005068:	e0bffd17 	ldw	r2,-12(fp)
 800506c:	00c00044 	movi	r3,1
 8005070:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8005074:	e0bffd17 	ldw	r2,-12(fp)
 8005078:	10800017 	ldw	r2,0(r2)
 800507c:	10800104 	addi	r2,r2,4
 8005080:	1007883a 	mov	r3,r2
 8005084:	e0bffd17 	ldw	r2,-12(fp)
 8005088:	10800817 	ldw	r2,32(r2)
 800508c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8005090:	e0bffe17 	ldw	r2,-8(fp)
 8005094:	e0ffff17 	ldw	r3,-4(fp)
 8005098:	d8000015 	stw	zero,0(sp)
 800509c:	e1fffd17 	ldw	r7,-12(fp)
 80050a0:	01820034 	movhi	r6,2048
 80050a4:	31944304 	addi	r6,r6,20748
 80050a8:	180b883a 	mov	r5,r3
 80050ac:	1009883a 	mov	r4,r2
 80050b0:	8005df00 	call	8005df0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80050b4:	e0bffd17 	ldw	r2,-12(fp)
 80050b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80050bc:	e0bffd17 	ldw	r2,-12(fp)
 80050c0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80050c4:	d0e6b117 	ldw	r3,-25916(gp)
 80050c8:	e1fffd17 	ldw	r7,-12(fp)
 80050cc:	01820034 	movhi	r6,2048
 80050d0:	3194c604 	addi	r6,r6,21272
 80050d4:	180b883a 	mov	r5,r3
 80050d8:	1009883a 	mov	r4,r2
 80050dc:	80059500 	call	8005950 <alt_alarm_start>
 80050e0:	1000040e 	bge	r2,zero,80050f4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80050e4:	e0fffd17 	ldw	r3,-12(fp)
 80050e8:	00a00034 	movhi	r2,32768
 80050ec:	10bfffc4 	addi	r2,r2,-1
 80050f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80050f4:	0001883a 	nop
 80050f8:	e037883a 	mov	sp,fp
 80050fc:	dfc00117 	ldw	ra,4(sp)
 8005100:	df000017 	ldw	fp,0(sp)
 8005104:	dec00204 	addi	sp,sp,8
 8005108:	f800283a 	ret

0800510c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800510c:	defff804 	addi	sp,sp,-32
 8005110:	df000715 	stw	fp,28(sp)
 8005114:	df000704 	addi	fp,sp,28
 8005118:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800511c:	e0bfff17 	ldw	r2,-4(fp)
 8005120:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8005124:	e0bffb17 	ldw	r2,-20(fp)
 8005128:	10800017 	ldw	r2,0(r2)
 800512c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8005130:	e0bffc17 	ldw	r2,-16(fp)
 8005134:	10800104 	addi	r2,r2,4
 8005138:	10800037 	ldwio	r2,0(r2)
 800513c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8005140:	e0bffd17 	ldw	r2,-12(fp)
 8005144:	1080c00c 	andi	r2,r2,768
 8005148:	10006d26 	beq	r2,zero,8005300 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800514c:	e0bffd17 	ldw	r2,-12(fp)
 8005150:	1080400c 	andi	r2,r2,256
 8005154:	10003526 	beq	r2,zero,800522c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8005158:	00800074 	movhi	r2,1
 800515c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005160:	e0bffb17 	ldw	r2,-20(fp)
 8005164:	10800a17 	ldw	r2,40(r2)
 8005168:	10800044 	addi	r2,r2,1
 800516c:	1081ffcc 	andi	r2,r2,2047
 8005170:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8005174:	e0bffb17 	ldw	r2,-20(fp)
 8005178:	10c00b17 	ldw	r3,44(r2)
 800517c:	e0bffe17 	ldw	r2,-8(fp)
 8005180:	18801526 	beq	r3,r2,80051d8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8005184:	e0bffc17 	ldw	r2,-16(fp)
 8005188:	10800037 	ldwio	r2,0(r2)
 800518c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8005190:	e0bff917 	ldw	r2,-28(fp)
 8005194:	10a0000c 	andi	r2,r2,32768
 8005198:	10001126 	beq	r2,zero,80051e0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800519c:	e0bffb17 	ldw	r2,-20(fp)
 80051a0:	10800a17 	ldw	r2,40(r2)
 80051a4:	e0fff917 	ldw	r3,-28(fp)
 80051a8:	1809883a 	mov	r4,r3
 80051ac:	e0fffb17 	ldw	r3,-20(fp)
 80051b0:	1885883a 	add	r2,r3,r2
 80051b4:	10800e04 	addi	r2,r2,56
 80051b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80051bc:	e0bffb17 	ldw	r2,-20(fp)
 80051c0:	10800a17 	ldw	r2,40(r2)
 80051c4:	10800044 	addi	r2,r2,1
 80051c8:	10c1ffcc 	andi	r3,r2,2047
 80051cc:	e0bffb17 	ldw	r2,-20(fp)
 80051d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 80051d4:	003fe206 	br	8005160 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 80051d8:	0001883a 	nop
 80051dc:	00000106 	br	80051e4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 80051e0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80051e4:	e0bff917 	ldw	r2,-28(fp)
 80051e8:	10bfffec 	andhi	r2,r2,65535
 80051ec:	10000f26 	beq	r2,zero,800522c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80051f0:	e0bffb17 	ldw	r2,-20(fp)
 80051f4:	10c00817 	ldw	r3,32(r2)
 80051f8:	00bfff84 	movi	r2,-2
 80051fc:	1886703a 	and	r3,r3,r2
 8005200:	e0bffb17 	ldw	r2,-20(fp)
 8005204:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8005208:	e0bffc17 	ldw	r2,-16(fp)
 800520c:	10800104 	addi	r2,r2,4
 8005210:	1007883a 	mov	r3,r2
 8005214:	e0bffb17 	ldw	r2,-20(fp)
 8005218:	10800817 	ldw	r2,32(r2)
 800521c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8005220:	e0bffc17 	ldw	r2,-16(fp)
 8005224:	10800104 	addi	r2,r2,4
 8005228:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800522c:	e0bffd17 	ldw	r2,-12(fp)
 8005230:	1080800c 	andi	r2,r2,512
 8005234:	103fbe26 	beq	r2,zero,8005130 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8005238:	e0bffd17 	ldw	r2,-12(fp)
 800523c:	1004d43a 	srli	r2,r2,16
 8005240:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8005244:	00001406 	br	8005298 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8005248:	e0bffc17 	ldw	r2,-16(fp)
 800524c:	e0fffb17 	ldw	r3,-20(fp)
 8005250:	18c00d17 	ldw	r3,52(r3)
 8005254:	e13ffb17 	ldw	r4,-20(fp)
 8005258:	20c7883a 	add	r3,r4,r3
 800525c:	18c20e04 	addi	r3,r3,2104
 8005260:	18c00003 	ldbu	r3,0(r3)
 8005264:	18c03fcc 	andi	r3,r3,255
 8005268:	18c0201c 	xori	r3,r3,128
 800526c:	18ffe004 	addi	r3,r3,-128
 8005270:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005274:	e0bffb17 	ldw	r2,-20(fp)
 8005278:	10800d17 	ldw	r2,52(r2)
 800527c:	10800044 	addi	r2,r2,1
 8005280:	10c1ffcc 	andi	r3,r2,2047
 8005284:	e0bffb17 	ldw	r2,-20(fp)
 8005288:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800528c:	e0bffa17 	ldw	r2,-24(fp)
 8005290:	10bfffc4 	addi	r2,r2,-1
 8005294:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8005298:	e0bffa17 	ldw	r2,-24(fp)
 800529c:	10000526 	beq	r2,zero,80052b4 <altera_avalon_jtag_uart_irq+0x1a8>
 80052a0:	e0bffb17 	ldw	r2,-20(fp)
 80052a4:	10c00d17 	ldw	r3,52(r2)
 80052a8:	e0bffb17 	ldw	r2,-20(fp)
 80052ac:	10800c17 	ldw	r2,48(r2)
 80052b0:	18bfe51e 	bne	r3,r2,8005248 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 80052b4:	e0bffa17 	ldw	r2,-24(fp)
 80052b8:	103f9d26 	beq	r2,zero,8005130 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80052bc:	e0bffb17 	ldw	r2,-20(fp)
 80052c0:	10c00817 	ldw	r3,32(r2)
 80052c4:	00bfff44 	movi	r2,-3
 80052c8:	1886703a 	and	r3,r3,r2
 80052cc:	e0bffb17 	ldw	r2,-20(fp)
 80052d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80052d4:	e0bffb17 	ldw	r2,-20(fp)
 80052d8:	10800017 	ldw	r2,0(r2)
 80052dc:	10800104 	addi	r2,r2,4
 80052e0:	1007883a 	mov	r3,r2
 80052e4:	e0bffb17 	ldw	r2,-20(fp)
 80052e8:	10800817 	ldw	r2,32(r2)
 80052ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80052f0:	e0bffc17 	ldw	r2,-16(fp)
 80052f4:	10800104 	addi	r2,r2,4
 80052f8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80052fc:	003f8c06 	br	8005130 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8005300:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8005304:	0001883a 	nop
 8005308:	e037883a 	mov	sp,fp
 800530c:	df000017 	ldw	fp,0(sp)
 8005310:	dec00104 	addi	sp,sp,4
 8005314:	f800283a 	ret

08005318 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8005318:	defff804 	addi	sp,sp,-32
 800531c:	df000715 	stw	fp,28(sp)
 8005320:	df000704 	addi	fp,sp,28
 8005324:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8005328:	e0bffb17 	ldw	r2,-20(fp)
 800532c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8005330:	e0bff917 	ldw	r2,-28(fp)
 8005334:	10800017 	ldw	r2,0(r2)
 8005338:	10800104 	addi	r2,r2,4
 800533c:	10800037 	ldwio	r2,0(r2)
 8005340:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8005344:	e0bffa17 	ldw	r2,-24(fp)
 8005348:	1081000c 	andi	r2,r2,1024
 800534c:	10000b26 	beq	r2,zero,800537c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8005350:	e0bff917 	ldw	r2,-28(fp)
 8005354:	10800017 	ldw	r2,0(r2)
 8005358:	10800104 	addi	r2,r2,4
 800535c:	1007883a 	mov	r3,r2
 8005360:	e0bff917 	ldw	r2,-28(fp)
 8005364:	10800817 	ldw	r2,32(r2)
 8005368:	10810014 	ori	r2,r2,1024
 800536c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8005370:	e0bff917 	ldw	r2,-28(fp)
 8005374:	10000915 	stw	zero,36(r2)
 8005378:	00000a06 	br	80053a4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800537c:	e0bff917 	ldw	r2,-28(fp)
 8005380:	10c00917 	ldw	r3,36(r2)
 8005384:	00a00034 	movhi	r2,32768
 8005388:	10bfff04 	addi	r2,r2,-4
 800538c:	10c00536 	bltu	r2,r3,80053a4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8005390:	e0bff917 	ldw	r2,-28(fp)
 8005394:	10800917 	ldw	r2,36(r2)
 8005398:	10c00044 	addi	r3,r2,1
 800539c:	e0bff917 	ldw	r2,-28(fp)
 80053a0:	10c00915 	stw	r3,36(r2)
 80053a4:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80053a8:	e037883a 	mov	sp,fp
 80053ac:	df000017 	ldw	fp,0(sp)
 80053b0:	dec00104 	addi	sp,sp,4
 80053b4:	f800283a 	ret

080053b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80053b8:	defffd04 	addi	sp,sp,-12
 80053bc:	df000215 	stw	fp,8(sp)
 80053c0:	df000204 	addi	fp,sp,8
 80053c4:	e13ffe15 	stw	r4,-8(fp)
 80053c8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80053cc:	00000506 	br	80053e4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80053d0:	e0bfff17 	ldw	r2,-4(fp)
 80053d4:	1090000c 	andi	r2,r2,16384
 80053d8:	10000226 	beq	r2,zero,80053e4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80053dc:	00bffd44 	movi	r2,-11
 80053e0:	00000b06 	br	8005410 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80053e4:	e0bffe17 	ldw	r2,-8(fp)
 80053e8:	10c00d17 	ldw	r3,52(r2)
 80053ec:	e0bffe17 	ldw	r2,-8(fp)
 80053f0:	10800c17 	ldw	r2,48(r2)
 80053f4:	18800526 	beq	r3,r2,800540c <altera_avalon_jtag_uart_close+0x54>
 80053f8:	e0bffe17 	ldw	r2,-8(fp)
 80053fc:	10c00917 	ldw	r3,36(r2)
 8005400:	e0bffe17 	ldw	r2,-8(fp)
 8005404:	10800117 	ldw	r2,4(r2)
 8005408:	18bff136 	bltu	r3,r2,80053d0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800540c:	0005883a 	mov	r2,zero
}
 8005410:	e037883a 	mov	sp,fp
 8005414:	df000017 	ldw	fp,0(sp)
 8005418:	dec00104 	addi	sp,sp,4
 800541c:	f800283a 	ret

08005420 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8005420:	defffa04 	addi	sp,sp,-24
 8005424:	df000515 	stw	fp,20(sp)
 8005428:	df000504 	addi	fp,sp,20
 800542c:	e13ffd15 	stw	r4,-12(fp)
 8005430:	e17ffe15 	stw	r5,-8(fp)
 8005434:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8005438:	00bff9c4 	movi	r2,-25
 800543c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8005440:	e0bffe17 	ldw	r2,-8(fp)
 8005444:	10da8060 	cmpeqi	r3,r2,27137
 8005448:	1800031e 	bne	r3,zero,8005458 <altera_avalon_jtag_uart_ioctl+0x38>
 800544c:	109a80a0 	cmpeqi	r2,r2,27138
 8005450:	1000181e 	bne	r2,zero,80054b4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8005454:	00002906 	br	80054fc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8005458:	e0bffd17 	ldw	r2,-12(fp)
 800545c:	10c00117 	ldw	r3,4(r2)
 8005460:	00a00034 	movhi	r2,32768
 8005464:	10bfffc4 	addi	r2,r2,-1
 8005468:	18802126 	beq	r3,r2,80054f0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800546c:	e0bfff17 	ldw	r2,-4(fp)
 8005470:	10800017 	ldw	r2,0(r2)
 8005474:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8005478:	e0bffc17 	ldw	r2,-16(fp)
 800547c:	10800090 	cmplti	r2,r2,2
 8005480:	1000061e 	bne	r2,zero,800549c <altera_avalon_jtag_uart_ioctl+0x7c>
 8005484:	e0fffc17 	ldw	r3,-16(fp)
 8005488:	00a00034 	movhi	r2,32768
 800548c:	10bfffc4 	addi	r2,r2,-1
 8005490:	18800226 	beq	r3,r2,800549c <altera_avalon_jtag_uart_ioctl+0x7c>
 8005494:	e0bffc17 	ldw	r2,-16(fp)
 8005498:	00000206 	br	80054a4 <altera_avalon_jtag_uart_ioctl+0x84>
 800549c:	00a00034 	movhi	r2,32768
 80054a0:	10bfff84 	addi	r2,r2,-2
 80054a4:	e0fffd17 	ldw	r3,-12(fp)
 80054a8:	18800115 	stw	r2,4(r3)
      rc = 0;
 80054ac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80054b0:	00000f06 	br	80054f0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80054b4:	e0bffd17 	ldw	r2,-12(fp)
 80054b8:	10c00117 	ldw	r3,4(r2)
 80054bc:	00a00034 	movhi	r2,32768
 80054c0:	10bfffc4 	addi	r2,r2,-1
 80054c4:	18800c26 	beq	r3,r2,80054f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80054c8:	e0bffd17 	ldw	r2,-12(fp)
 80054cc:	10c00917 	ldw	r3,36(r2)
 80054d0:	e0bffd17 	ldw	r2,-12(fp)
 80054d4:	10800117 	ldw	r2,4(r2)
 80054d8:	1885803a 	cmpltu	r2,r3,r2
 80054dc:	10c03fcc 	andi	r3,r2,255
 80054e0:	e0bfff17 	ldw	r2,-4(fp)
 80054e4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80054e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80054ec:	00000206 	br	80054f8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80054f0:	0001883a 	nop
 80054f4:	00000106 	br	80054fc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80054f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80054fc:	e0bffb17 	ldw	r2,-20(fp)
}
 8005500:	e037883a 	mov	sp,fp
 8005504:	df000017 	ldw	fp,0(sp)
 8005508:	dec00104 	addi	sp,sp,4
 800550c:	f800283a 	ret

08005510 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8005510:	defff304 	addi	sp,sp,-52
 8005514:	dfc00c15 	stw	ra,48(sp)
 8005518:	df000b15 	stw	fp,44(sp)
 800551c:	df000b04 	addi	fp,sp,44
 8005520:	e13ffc15 	stw	r4,-16(fp)
 8005524:	e17ffd15 	stw	r5,-12(fp)
 8005528:	e1bffe15 	stw	r6,-8(fp)
 800552c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8005530:	e0bffd17 	ldw	r2,-12(fp)
 8005534:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8005538:	00004706 	br	8005658 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800553c:	e0bffc17 	ldw	r2,-16(fp)
 8005540:	10800a17 	ldw	r2,40(r2)
 8005544:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8005548:	e0bffc17 	ldw	r2,-16(fp)
 800554c:	10800b17 	ldw	r2,44(r2)
 8005550:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8005554:	e0fff717 	ldw	r3,-36(fp)
 8005558:	e0bff817 	ldw	r2,-32(fp)
 800555c:	18800536 	bltu	r3,r2,8005574 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8005560:	e0fff717 	ldw	r3,-36(fp)
 8005564:	e0bff817 	ldw	r2,-32(fp)
 8005568:	1885c83a 	sub	r2,r3,r2
 800556c:	e0bff615 	stw	r2,-40(fp)
 8005570:	00000406 	br	8005584 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8005574:	00c20004 	movi	r3,2048
 8005578:	e0bff817 	ldw	r2,-32(fp)
 800557c:	1885c83a 	sub	r2,r3,r2
 8005580:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8005584:	e0bff617 	ldw	r2,-40(fp)
 8005588:	10001e26 	beq	r2,zero,8005604 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800558c:	e0fffe17 	ldw	r3,-8(fp)
 8005590:	e0bff617 	ldw	r2,-40(fp)
 8005594:	1880022e 	bgeu	r3,r2,80055a0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8005598:	e0bffe17 	ldw	r2,-8(fp)
 800559c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80055a0:	e0bffc17 	ldw	r2,-16(fp)
 80055a4:	10c00e04 	addi	r3,r2,56
 80055a8:	e0bff817 	ldw	r2,-32(fp)
 80055ac:	1885883a 	add	r2,r3,r2
 80055b0:	e1bff617 	ldw	r6,-40(fp)
 80055b4:	100b883a 	mov	r5,r2
 80055b8:	e13ff517 	ldw	r4,-44(fp)
 80055bc:	8002c8c0 	call	8002c8c <memcpy>
      ptr   += n;
 80055c0:	e0fff517 	ldw	r3,-44(fp)
 80055c4:	e0bff617 	ldw	r2,-40(fp)
 80055c8:	1885883a 	add	r2,r3,r2
 80055cc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80055d0:	e0fffe17 	ldw	r3,-8(fp)
 80055d4:	e0bff617 	ldw	r2,-40(fp)
 80055d8:	1885c83a 	sub	r2,r3,r2
 80055dc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80055e0:	e0fff817 	ldw	r3,-32(fp)
 80055e4:	e0bff617 	ldw	r2,-40(fp)
 80055e8:	1885883a 	add	r2,r3,r2
 80055ec:	10c1ffcc 	andi	r3,r2,2047
 80055f0:	e0bffc17 	ldw	r2,-16(fp)
 80055f4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80055f8:	e0bffe17 	ldw	r2,-8(fp)
 80055fc:	00bfcf16 	blt	zero,r2,800553c <altera_avalon_jtag_uart_read+0x2c>
 8005600:	00000106 	br	8005608 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8005604:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8005608:	e0fff517 	ldw	r3,-44(fp)
 800560c:	e0bffd17 	ldw	r2,-12(fp)
 8005610:	1880141e 	bne	r3,r2,8005664 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8005614:	e0bfff17 	ldw	r2,-4(fp)
 8005618:	1090000c 	andi	r2,r2,16384
 800561c:	1000131e 	bne	r2,zero,800566c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8005620:	0001883a 	nop
 8005624:	e0bffc17 	ldw	r2,-16(fp)
 8005628:	10c00a17 	ldw	r3,40(r2)
 800562c:	e0bff717 	ldw	r2,-36(fp)
 8005630:	1880051e 	bne	r3,r2,8005648 <altera_avalon_jtag_uart_read+0x138>
 8005634:	e0bffc17 	ldw	r2,-16(fp)
 8005638:	10c00917 	ldw	r3,36(r2)
 800563c:	e0bffc17 	ldw	r2,-16(fp)
 8005640:	10800117 	ldw	r2,4(r2)
 8005644:	18bff736 	bltu	r3,r2,8005624 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8005648:	e0bffc17 	ldw	r2,-16(fp)
 800564c:	10c00a17 	ldw	r3,40(r2)
 8005650:	e0bff717 	ldw	r2,-36(fp)
 8005654:	18800726 	beq	r3,r2,8005674 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8005658:	e0bffe17 	ldw	r2,-8(fp)
 800565c:	00bfb716 	blt	zero,r2,800553c <altera_avalon_jtag_uart_read+0x2c>
 8005660:	00000506 	br	8005678 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8005664:	0001883a 	nop
 8005668:	00000306 	br	8005678 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800566c:	0001883a 	nop
 8005670:	00000106 	br	8005678 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8005674:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8005678:	e0fff517 	ldw	r3,-44(fp)
 800567c:	e0bffd17 	ldw	r2,-12(fp)
 8005680:	18801826 	beq	r3,r2,80056e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005684:	0005303a 	rdctl	r2,status
 8005688:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800568c:	e0fffb17 	ldw	r3,-20(fp)
 8005690:	00bfff84 	movi	r2,-2
 8005694:	1884703a 	and	r2,r3,r2
 8005698:	1001703a 	wrctl	status,r2
  
  return context;
 800569c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80056a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80056a4:	e0bffc17 	ldw	r2,-16(fp)
 80056a8:	10800817 	ldw	r2,32(r2)
 80056ac:	10c00054 	ori	r3,r2,1
 80056b0:	e0bffc17 	ldw	r2,-16(fp)
 80056b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80056b8:	e0bffc17 	ldw	r2,-16(fp)
 80056bc:	10800017 	ldw	r2,0(r2)
 80056c0:	10800104 	addi	r2,r2,4
 80056c4:	1007883a 	mov	r3,r2
 80056c8:	e0bffc17 	ldw	r2,-16(fp)
 80056cc:	10800817 	ldw	r2,32(r2)
 80056d0:	18800035 	stwio	r2,0(r3)
 80056d4:	e0bffa17 	ldw	r2,-24(fp)
 80056d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80056dc:	e0bff917 	ldw	r2,-28(fp)
 80056e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80056e4:	e0fff517 	ldw	r3,-44(fp)
 80056e8:	e0bffd17 	ldw	r2,-12(fp)
 80056ec:	18800426 	beq	r3,r2,8005700 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80056f0:	e0fff517 	ldw	r3,-44(fp)
 80056f4:	e0bffd17 	ldw	r2,-12(fp)
 80056f8:	1885c83a 	sub	r2,r3,r2
 80056fc:	00000606 	br	8005718 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8005700:	e0bfff17 	ldw	r2,-4(fp)
 8005704:	1090000c 	andi	r2,r2,16384
 8005708:	10000226 	beq	r2,zero,8005714 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800570c:	00bffd44 	movi	r2,-11
 8005710:	00000106 	br	8005718 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8005714:	00bffec4 	movi	r2,-5
}
 8005718:	e037883a 	mov	sp,fp
 800571c:	dfc00117 	ldw	ra,4(sp)
 8005720:	df000017 	ldw	fp,0(sp)
 8005724:	dec00204 	addi	sp,sp,8
 8005728:	f800283a 	ret

0800572c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800572c:	defff304 	addi	sp,sp,-52
 8005730:	dfc00c15 	stw	ra,48(sp)
 8005734:	df000b15 	stw	fp,44(sp)
 8005738:	df000b04 	addi	fp,sp,44
 800573c:	e13ffc15 	stw	r4,-16(fp)
 8005740:	e17ffd15 	stw	r5,-12(fp)
 8005744:	e1bffe15 	stw	r6,-8(fp)
 8005748:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800574c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8005750:	e0bffd17 	ldw	r2,-12(fp)
 8005754:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8005758:	00003706 	br	8005838 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800575c:	e0bffc17 	ldw	r2,-16(fp)
 8005760:	10800c17 	ldw	r2,48(r2)
 8005764:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8005768:	e0bffc17 	ldw	r2,-16(fp)
 800576c:	10800d17 	ldw	r2,52(r2)
 8005770:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8005774:	e0fff917 	ldw	r3,-28(fp)
 8005778:	e0bff517 	ldw	r2,-44(fp)
 800577c:	1880062e 	bgeu	r3,r2,8005798 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8005780:	e0fff517 	ldw	r3,-44(fp)
 8005784:	e0bff917 	ldw	r2,-28(fp)
 8005788:	1885c83a 	sub	r2,r3,r2
 800578c:	10bfffc4 	addi	r2,r2,-1
 8005790:	e0bff615 	stw	r2,-40(fp)
 8005794:	00000b06 	br	80057c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8005798:	e0bff517 	ldw	r2,-44(fp)
 800579c:	10000526 	beq	r2,zero,80057b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80057a0:	00c20004 	movi	r3,2048
 80057a4:	e0bff917 	ldw	r2,-28(fp)
 80057a8:	1885c83a 	sub	r2,r3,r2
 80057ac:	e0bff615 	stw	r2,-40(fp)
 80057b0:	00000406 	br	80057c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 80057b4:	00c1ffc4 	movi	r3,2047
 80057b8:	e0bff917 	ldw	r2,-28(fp)
 80057bc:	1885c83a 	sub	r2,r3,r2
 80057c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80057c4:	e0bff617 	ldw	r2,-40(fp)
 80057c8:	10001e26 	beq	r2,zero,8005844 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80057cc:	e0fffe17 	ldw	r3,-8(fp)
 80057d0:	e0bff617 	ldw	r2,-40(fp)
 80057d4:	1880022e 	bgeu	r3,r2,80057e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80057d8:	e0bffe17 	ldw	r2,-8(fp)
 80057dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80057e0:	e0bffc17 	ldw	r2,-16(fp)
 80057e4:	10c20e04 	addi	r3,r2,2104
 80057e8:	e0bff917 	ldw	r2,-28(fp)
 80057ec:	1885883a 	add	r2,r3,r2
 80057f0:	e1bff617 	ldw	r6,-40(fp)
 80057f4:	e17ffd17 	ldw	r5,-12(fp)
 80057f8:	1009883a 	mov	r4,r2
 80057fc:	8002c8c0 	call	8002c8c <memcpy>
      ptr   += n;
 8005800:	e0fffd17 	ldw	r3,-12(fp)
 8005804:	e0bff617 	ldw	r2,-40(fp)
 8005808:	1885883a 	add	r2,r3,r2
 800580c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8005810:	e0fffe17 	ldw	r3,-8(fp)
 8005814:	e0bff617 	ldw	r2,-40(fp)
 8005818:	1885c83a 	sub	r2,r3,r2
 800581c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005820:	e0fff917 	ldw	r3,-28(fp)
 8005824:	e0bff617 	ldw	r2,-40(fp)
 8005828:	1885883a 	add	r2,r3,r2
 800582c:	10c1ffcc 	andi	r3,r2,2047
 8005830:	e0bffc17 	ldw	r2,-16(fp)
 8005834:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8005838:	e0bffe17 	ldw	r2,-8(fp)
 800583c:	00bfc716 	blt	zero,r2,800575c <altera_avalon_jtag_uart_write+0x30>
 8005840:	00000106 	br	8005848 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8005844:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005848:	0005303a 	rdctl	r2,status
 800584c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005850:	e0fffb17 	ldw	r3,-20(fp)
 8005854:	00bfff84 	movi	r2,-2
 8005858:	1884703a 	and	r2,r3,r2
 800585c:	1001703a 	wrctl	status,r2
  
  return context;
 8005860:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8005864:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8005868:	e0bffc17 	ldw	r2,-16(fp)
 800586c:	10800817 	ldw	r2,32(r2)
 8005870:	10c00094 	ori	r3,r2,2
 8005874:	e0bffc17 	ldw	r2,-16(fp)
 8005878:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800587c:	e0bffc17 	ldw	r2,-16(fp)
 8005880:	10800017 	ldw	r2,0(r2)
 8005884:	10800104 	addi	r2,r2,4
 8005888:	1007883a 	mov	r3,r2
 800588c:	e0bffc17 	ldw	r2,-16(fp)
 8005890:	10800817 	ldw	r2,32(r2)
 8005894:	18800035 	stwio	r2,0(r3)
 8005898:	e0bffa17 	ldw	r2,-24(fp)
 800589c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80058a0:	e0bff817 	ldw	r2,-32(fp)
 80058a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 80058a8:	e0bffe17 	ldw	r2,-8(fp)
 80058ac:	0080100e 	bge	zero,r2,80058f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 80058b0:	e0bfff17 	ldw	r2,-4(fp)
 80058b4:	1090000c 	andi	r2,r2,16384
 80058b8:	1000101e 	bne	r2,zero,80058fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 80058bc:	0001883a 	nop
 80058c0:	e0bffc17 	ldw	r2,-16(fp)
 80058c4:	10c00d17 	ldw	r3,52(r2)
 80058c8:	e0bff517 	ldw	r2,-44(fp)
 80058cc:	1880051e 	bne	r3,r2,80058e4 <altera_avalon_jtag_uart_write+0x1b8>
 80058d0:	e0bffc17 	ldw	r2,-16(fp)
 80058d4:	10c00917 	ldw	r3,36(r2)
 80058d8:	e0bffc17 	ldw	r2,-16(fp)
 80058dc:	10800117 	ldw	r2,4(r2)
 80058e0:	18bff736 	bltu	r3,r2,80058c0 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80058e4:	e0bffc17 	ldw	r2,-16(fp)
 80058e8:	10800917 	ldw	r2,36(r2)
 80058ec:	1000051e 	bne	r2,zero,8005904 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80058f0:	e0bffe17 	ldw	r2,-8(fp)
 80058f4:	00bfd016 	blt	zero,r2,8005838 <altera_avalon_jtag_uart_write+0x10c>
 80058f8:	00000306 	br	8005908 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80058fc:	0001883a 	nop
 8005900:	00000106 	br	8005908 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8005904:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8005908:	e0fffd17 	ldw	r3,-12(fp)
 800590c:	e0bff717 	ldw	r2,-36(fp)
 8005910:	18800426 	beq	r3,r2,8005924 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8005914:	e0fffd17 	ldw	r3,-12(fp)
 8005918:	e0bff717 	ldw	r2,-36(fp)
 800591c:	1885c83a 	sub	r2,r3,r2
 8005920:	00000606 	br	800593c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8005924:	e0bfff17 	ldw	r2,-4(fp)
 8005928:	1090000c 	andi	r2,r2,16384
 800592c:	10000226 	beq	r2,zero,8005938 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8005930:	00bffd44 	movi	r2,-11
 8005934:	00000106 	br	800593c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8005938:	00bffec4 	movi	r2,-5
}
 800593c:	e037883a 	mov	sp,fp
 8005940:	dfc00117 	ldw	ra,4(sp)
 8005944:	df000017 	ldw	fp,0(sp)
 8005948:	dec00204 	addi	sp,sp,8
 800594c:	f800283a 	ret

08005950 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8005950:	defff504 	addi	sp,sp,-44
 8005954:	df000a15 	stw	fp,40(sp)
 8005958:	df000a04 	addi	fp,sp,40
 800595c:	e13ffc15 	stw	r4,-16(fp)
 8005960:	e17ffd15 	stw	r5,-12(fp)
 8005964:	e1bffe15 	stw	r6,-8(fp)
 8005968:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800596c:	e03ff615 	stw	zero,-40(fp)
 8005970:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 8005974:	10003c26 	beq	r2,zero,8005a68 <alt_alarm_start+0x118>
  {
    if (alarm)
 8005978:	e0bffc17 	ldw	r2,-16(fp)
 800597c:	10003826 	beq	r2,zero,8005a60 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8005980:	e0bffc17 	ldw	r2,-16(fp)
 8005984:	e0fffe17 	ldw	r3,-8(fp)
 8005988:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800598c:	e0bffc17 	ldw	r2,-16(fp)
 8005990:	e0ffff17 	ldw	r3,-4(fp)
 8005994:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005998:	0005303a 	rdctl	r2,status
 800599c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80059a0:	e0fff917 	ldw	r3,-28(fp)
 80059a4:	00bfff84 	movi	r2,-2
 80059a8:	1884703a 	and	r2,r3,r2
 80059ac:	1001703a 	wrctl	status,r2
  
  return context;
 80059b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80059b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80059b8:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 80059bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80059c0:	e0fffd17 	ldw	r3,-12(fp)
 80059c4:	e0bff617 	ldw	r2,-40(fp)
 80059c8:	1885883a 	add	r2,r3,r2
 80059cc:	10c00044 	addi	r3,r2,1
 80059d0:	e0bffc17 	ldw	r2,-16(fp)
 80059d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 80059d8:	e0bffc17 	ldw	r2,-16(fp)
 80059dc:	10c00217 	ldw	r3,8(r2)
 80059e0:	e0bff617 	ldw	r2,-40(fp)
 80059e4:	1880042e 	bgeu	r3,r2,80059f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 80059e8:	e0bffc17 	ldw	r2,-16(fp)
 80059ec:	00c00044 	movi	r3,1
 80059f0:	10c00405 	stb	r3,16(r2)
 80059f4:	00000206 	br	8005a00 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80059f8:	e0bffc17 	ldw	r2,-16(fp)
 80059fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8005a00:	e0bffc17 	ldw	r2,-16(fp)
 8005a04:	d0e00c04 	addi	r3,gp,-32720
 8005a08:	e0fffa15 	stw	r3,-24(fp)
 8005a0c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005a10:	e0bffb17 	ldw	r2,-20(fp)
 8005a14:	e0fffa17 	ldw	r3,-24(fp)
 8005a18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005a1c:	e0bffa17 	ldw	r2,-24(fp)
 8005a20:	10c00017 	ldw	r3,0(r2)
 8005a24:	e0bffb17 	ldw	r2,-20(fp)
 8005a28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005a2c:	e0bffa17 	ldw	r2,-24(fp)
 8005a30:	10800017 	ldw	r2,0(r2)
 8005a34:	e0fffb17 	ldw	r3,-20(fp)
 8005a38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005a3c:	e0bffa17 	ldw	r2,-24(fp)
 8005a40:	e0fffb17 	ldw	r3,-20(fp)
 8005a44:	10c00015 	stw	r3,0(r2)
 8005a48:	e0bff817 	ldw	r2,-32(fp)
 8005a4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005a50:	e0bff717 	ldw	r2,-36(fp)
 8005a54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8005a58:	0005883a 	mov	r2,zero
 8005a5c:	00000306 	br	8005a6c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8005a60:	00bffa84 	movi	r2,-22
 8005a64:	00000106 	br	8005a6c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8005a68:	00bfde84 	movi	r2,-134
  }
}
 8005a6c:	e037883a 	mov	sp,fp
 8005a70:	df000017 	ldw	fp,0(sp)
 8005a74:	dec00104 	addi	sp,sp,4
 8005a78:	f800283a 	ret

08005a7c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8005a7c:	defffa04 	addi	sp,sp,-24
 8005a80:	dfc00515 	stw	ra,20(sp)
 8005a84:	df000415 	stw	fp,16(sp)
 8005a88:	df000404 	addi	fp,sp,16
 8005a8c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8005a90:	008000c4 	movi	r2,3
 8005a94:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8005a98:	e0fffd17 	ldw	r3,-12(fp)
 8005a9c:	008003f4 	movhi	r2,15
 8005aa0:	10909004 	addi	r2,r2,16960
 8005aa4:	1885383a 	mul	r2,r3,r2
 8005aa8:	100b883a 	mov	r5,r2
 8005aac:	0100bef4 	movhi	r4,763
 8005ab0:	213c2004 	addi	r4,r4,-3968
 8005ab4:	80017140 	call	8001714 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8005ab8:	100b883a 	mov	r5,r2
 8005abc:	01200034 	movhi	r4,32768
 8005ac0:	213fffc4 	addi	r4,r4,-1
 8005ac4:	80017140 	call	8001714 <__udivsi3>
 8005ac8:	100b883a 	mov	r5,r2
 8005acc:	e13fff17 	ldw	r4,-4(fp)
 8005ad0:	80017140 	call	8001714 <__udivsi3>
 8005ad4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8005ad8:	e0bffe17 	ldw	r2,-8(fp)
 8005adc:	10002a26 	beq	r2,zero,8005b88 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8005ae0:	e03ffc15 	stw	zero,-16(fp)
 8005ae4:	00001706 	br	8005b44 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8005ae8:	00a00034 	movhi	r2,32768
 8005aec:	10bfffc4 	addi	r2,r2,-1
 8005af0:	10bfffc4 	addi	r2,r2,-1
 8005af4:	103ffe1e 	bne	r2,zero,8005af0 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8005af8:	e0fffd17 	ldw	r3,-12(fp)
 8005afc:	008003f4 	movhi	r2,15
 8005b00:	10909004 	addi	r2,r2,16960
 8005b04:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8005b08:	100b883a 	mov	r5,r2
 8005b0c:	0100bef4 	movhi	r4,763
 8005b10:	213c2004 	addi	r4,r4,-3968
 8005b14:	80017140 	call	8001714 <__udivsi3>
 8005b18:	100b883a 	mov	r5,r2
 8005b1c:	01200034 	movhi	r4,32768
 8005b20:	213fffc4 	addi	r4,r4,-1
 8005b24:	80017140 	call	8001714 <__udivsi3>
 8005b28:	1007883a 	mov	r3,r2
 8005b2c:	e0bfff17 	ldw	r2,-4(fp)
 8005b30:	10c5c83a 	sub	r2,r2,r3
 8005b34:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8005b38:	e0bffc17 	ldw	r2,-16(fp)
 8005b3c:	10800044 	addi	r2,r2,1
 8005b40:	e0bffc15 	stw	r2,-16(fp)
 8005b44:	e0fffc17 	ldw	r3,-16(fp)
 8005b48:	e0bffe17 	ldw	r2,-8(fp)
 8005b4c:	18bfe616 	blt	r3,r2,8005ae8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8005b50:	e0fffd17 	ldw	r3,-12(fp)
 8005b54:	008003f4 	movhi	r2,15
 8005b58:	10909004 	addi	r2,r2,16960
 8005b5c:	1885383a 	mul	r2,r3,r2
 8005b60:	100b883a 	mov	r5,r2
 8005b64:	0100bef4 	movhi	r4,763
 8005b68:	213c2004 	addi	r4,r4,-3968
 8005b6c:	80017140 	call	8001714 <__udivsi3>
 8005b70:	1007883a 	mov	r3,r2
 8005b74:	e0bfff17 	ldw	r2,-4(fp)
 8005b78:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8005b7c:	10bfffc4 	addi	r2,r2,-1
 8005b80:	103ffe1e 	bne	r2,zero,8005b7c <alt_busy_sleep+0x100>
 8005b84:	00000d06 	br	8005bbc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8005b88:	e0fffd17 	ldw	r3,-12(fp)
 8005b8c:	008003f4 	movhi	r2,15
 8005b90:	10909004 	addi	r2,r2,16960
 8005b94:	1885383a 	mul	r2,r3,r2
 8005b98:	100b883a 	mov	r5,r2
 8005b9c:	0100bef4 	movhi	r4,763
 8005ba0:	213c2004 	addi	r4,r4,-3968
 8005ba4:	80017140 	call	8001714 <__udivsi3>
 8005ba8:	1007883a 	mov	r3,r2
 8005bac:	e0bfff17 	ldw	r2,-4(fp)
 8005bb0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8005bb4:	10bfffc4 	addi	r2,r2,-1
 8005bb8:	00bffe16 	blt	zero,r2,8005bb4 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8005bbc:	0005883a 	mov	r2,zero
}
 8005bc0:	e037883a 	mov	sp,fp
 8005bc4:	dfc00117 	ldw	ra,4(sp)
 8005bc8:	df000017 	ldw	fp,0(sp)
 8005bcc:	dec00204 	addi	sp,sp,8
 8005bd0:	f800283a 	ret

08005bd4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8005bd4:	defffe04 	addi	sp,sp,-8
 8005bd8:	df000115 	stw	fp,4(sp)
 8005bdc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8005be0:	e03fff15 	stw	zero,-4(fp)
 8005be4:	00000506 	br	8005bfc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8005be8:	e0bfff17 	ldw	r2,-4(fp)
 8005bec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8005bf0:	e0bfff17 	ldw	r2,-4(fp)
 8005bf4:	10800804 	addi	r2,r2,32
 8005bf8:	e0bfff15 	stw	r2,-4(fp)
 8005bfc:	e0bfff17 	ldw	r2,-4(fp)
 8005c00:	10820030 	cmpltui	r2,r2,2048
 8005c04:	103ff81e 	bne	r2,zero,8005be8 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8005c08:	0001883a 	nop
 8005c0c:	e037883a 	mov	sp,fp
 8005c10:	df000017 	ldw	fp,0(sp)
 8005c14:	dec00104 	addi	sp,sp,4
 8005c18:	f800283a 	ret

08005c1c <alt_get_errno>:
 8005c1c:	defffe04 	addi	sp,sp,-8
 8005c20:	dfc00115 	stw	ra,4(sp)
 8005c24:	df000015 	stw	fp,0(sp)
 8005c28:	d839883a 	mov	fp,sp
 8005c2c:	d0a00917 	ldw	r2,-32732(gp)
 8005c30:	10000326 	beq	r2,zero,8005c40 <alt_get_errno+0x24>
 8005c34:	d0a00917 	ldw	r2,-32732(gp)
 8005c38:	103ee83a 	callr	r2
 8005c3c:	00000106 	br	8005c44 <alt_get_errno+0x28>
 8005c40:	d0a6ac04 	addi	r2,gp,-25936
 8005c44:	e037883a 	mov	sp,fp
 8005c48:	dfc00117 	ldw	ra,4(sp)
 8005c4c:	df000017 	ldw	fp,0(sp)
 8005c50:	dec00204 	addi	sp,sp,8
 8005c54:	f800283a 	ret

08005c58 <alt_dev_llist_insert>:
 8005c58:	defffa04 	addi	sp,sp,-24
 8005c5c:	dfc00515 	stw	ra,20(sp)
 8005c60:	df000415 	stw	fp,16(sp)
 8005c64:	df000404 	addi	fp,sp,16
 8005c68:	e13ffe15 	stw	r4,-8(fp)
 8005c6c:	e17fff15 	stw	r5,-4(fp)
 8005c70:	e0bffe17 	ldw	r2,-8(fp)
 8005c74:	10000326 	beq	r2,zero,8005c84 <alt_dev_llist_insert+0x2c>
 8005c78:	e0bffe17 	ldw	r2,-8(fp)
 8005c7c:	10800217 	ldw	r2,8(r2)
 8005c80:	1000061e 	bne	r2,zero,8005c9c <alt_dev_llist_insert+0x44>
 8005c84:	8005c1c0 	call	8005c1c <alt_get_errno>
 8005c88:	1007883a 	mov	r3,r2
 8005c8c:	00800584 	movi	r2,22
 8005c90:	18800015 	stw	r2,0(r3)
 8005c94:	00bffa84 	movi	r2,-22
 8005c98:	00001306 	br	8005ce8 <alt_dev_llist_insert+0x90>
 8005c9c:	e0bffe17 	ldw	r2,-8(fp)
 8005ca0:	e0ffff17 	ldw	r3,-4(fp)
 8005ca4:	e0fffc15 	stw	r3,-16(fp)
 8005ca8:	e0bffd15 	stw	r2,-12(fp)
 8005cac:	e0bffd17 	ldw	r2,-12(fp)
 8005cb0:	e0fffc17 	ldw	r3,-16(fp)
 8005cb4:	10c00115 	stw	r3,4(r2)
 8005cb8:	e0bffc17 	ldw	r2,-16(fp)
 8005cbc:	10c00017 	ldw	r3,0(r2)
 8005cc0:	e0bffd17 	ldw	r2,-12(fp)
 8005cc4:	10c00015 	stw	r3,0(r2)
 8005cc8:	e0bffc17 	ldw	r2,-16(fp)
 8005ccc:	10800017 	ldw	r2,0(r2)
 8005cd0:	e0fffd17 	ldw	r3,-12(fp)
 8005cd4:	10c00115 	stw	r3,4(r2)
 8005cd8:	e0bffc17 	ldw	r2,-16(fp)
 8005cdc:	e0fffd17 	ldw	r3,-12(fp)
 8005ce0:	10c00015 	stw	r3,0(r2)
 8005ce4:	0005883a 	mov	r2,zero
 8005ce8:	e037883a 	mov	sp,fp
 8005cec:	dfc00117 	ldw	ra,4(sp)
 8005cf0:	df000017 	ldw	fp,0(sp)
 8005cf4:	dec00204 	addi	sp,sp,8
 8005cf8:	f800283a 	ret

08005cfc <_do_ctors>:
 8005cfc:	defffd04 	addi	sp,sp,-12
 8005d00:	dfc00215 	stw	ra,8(sp)
 8005d04:	df000115 	stw	fp,4(sp)
 8005d08:	df000104 	addi	fp,sp,4
 8005d0c:	00820034 	movhi	r2,2048
 8005d10:	109b3904 	addi	r2,r2,27876
 8005d14:	e0bfff15 	stw	r2,-4(fp)
 8005d18:	00000606 	br	8005d34 <_do_ctors+0x38>
 8005d1c:	e0bfff17 	ldw	r2,-4(fp)
 8005d20:	10800017 	ldw	r2,0(r2)
 8005d24:	103ee83a 	callr	r2
 8005d28:	e0bfff17 	ldw	r2,-4(fp)
 8005d2c:	10bfff04 	addi	r2,r2,-4
 8005d30:	e0bfff15 	stw	r2,-4(fp)
 8005d34:	e0ffff17 	ldw	r3,-4(fp)
 8005d38:	00820034 	movhi	r2,2048
 8005d3c:	109b3a04 	addi	r2,r2,27880
 8005d40:	18bff62e 	bgeu	r3,r2,8005d1c <_do_ctors+0x20>
 8005d44:	0001883a 	nop
 8005d48:	e037883a 	mov	sp,fp
 8005d4c:	dfc00117 	ldw	ra,4(sp)
 8005d50:	df000017 	ldw	fp,0(sp)
 8005d54:	dec00204 	addi	sp,sp,8
 8005d58:	f800283a 	ret

08005d5c <_do_dtors>:
 8005d5c:	defffd04 	addi	sp,sp,-12
 8005d60:	dfc00215 	stw	ra,8(sp)
 8005d64:	df000115 	stw	fp,4(sp)
 8005d68:	df000104 	addi	fp,sp,4
 8005d6c:	00820034 	movhi	r2,2048
 8005d70:	109b3904 	addi	r2,r2,27876
 8005d74:	e0bfff15 	stw	r2,-4(fp)
 8005d78:	00000606 	br	8005d94 <_do_dtors+0x38>
 8005d7c:	e0bfff17 	ldw	r2,-4(fp)
 8005d80:	10800017 	ldw	r2,0(r2)
 8005d84:	103ee83a 	callr	r2
 8005d88:	e0bfff17 	ldw	r2,-4(fp)
 8005d8c:	10bfff04 	addi	r2,r2,-4
 8005d90:	e0bfff15 	stw	r2,-4(fp)
 8005d94:	e0ffff17 	ldw	r3,-4(fp)
 8005d98:	00820034 	movhi	r2,2048
 8005d9c:	109b3a04 	addi	r2,r2,27880
 8005da0:	18bff62e 	bgeu	r3,r2,8005d7c <_do_dtors+0x20>
 8005da4:	0001883a 	nop
 8005da8:	e037883a 	mov	sp,fp
 8005dac:	dfc00117 	ldw	ra,4(sp)
 8005db0:	df000017 	ldw	fp,0(sp)
 8005db4:	dec00204 	addi	sp,sp,8
 8005db8:	f800283a 	ret

08005dbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8005dbc:	defffe04 	addi	sp,sp,-8
 8005dc0:	dfc00115 	stw	ra,4(sp)
 8005dc4:	df000015 	stw	fp,0(sp)
 8005dc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8005dcc:	01440004 	movi	r5,4096
 8005dd0:	0009883a 	mov	r4,zero
 8005dd4:	80068280 	call	8006828 <alt_icache_flush>
#endif
}
 8005dd8:	0001883a 	nop
 8005ddc:	e037883a 	mov	sp,fp
 8005de0:	dfc00117 	ldw	ra,4(sp)
 8005de4:	df000017 	ldw	fp,0(sp)
 8005de8:	dec00204 	addi	sp,sp,8
 8005dec:	f800283a 	ret

08005df0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005df0:	defff904 	addi	sp,sp,-28
 8005df4:	dfc00615 	stw	ra,24(sp)
 8005df8:	df000515 	stw	fp,20(sp)
 8005dfc:	df000504 	addi	fp,sp,20
 8005e00:	e13ffc15 	stw	r4,-16(fp)
 8005e04:	e17ffd15 	stw	r5,-12(fp)
 8005e08:	e1bffe15 	stw	r6,-8(fp)
 8005e0c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8005e10:	e0800217 	ldw	r2,8(fp)
 8005e14:	d8800015 	stw	r2,0(sp)
 8005e18:	e1ffff17 	ldw	r7,-4(fp)
 8005e1c:	e1bffe17 	ldw	r6,-8(fp)
 8005e20:	e17ffd17 	ldw	r5,-12(fp)
 8005e24:	e13ffc17 	ldw	r4,-16(fp)
 8005e28:	8005fa00 	call	8005fa0 <alt_iic_isr_register>
}  
 8005e2c:	e037883a 	mov	sp,fp
 8005e30:	dfc00117 	ldw	ra,4(sp)
 8005e34:	df000017 	ldw	fp,0(sp)
 8005e38:	dec00204 	addi	sp,sp,8
 8005e3c:	f800283a 	ret

08005e40 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8005e40:	defff904 	addi	sp,sp,-28
 8005e44:	df000615 	stw	fp,24(sp)
 8005e48:	df000604 	addi	fp,sp,24
 8005e4c:	e13ffe15 	stw	r4,-8(fp)
 8005e50:	e17fff15 	stw	r5,-4(fp)
 8005e54:	e0bfff17 	ldw	r2,-4(fp)
 8005e58:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005e5c:	0005303a 	rdctl	r2,status
 8005e60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005e64:	e0fffb17 	ldw	r3,-20(fp)
 8005e68:	00bfff84 	movi	r2,-2
 8005e6c:	1884703a 	and	r2,r3,r2
 8005e70:	1001703a 	wrctl	status,r2
  
  return context;
 8005e74:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005e78:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8005e7c:	00c00044 	movi	r3,1
 8005e80:	e0bffa17 	ldw	r2,-24(fp)
 8005e84:	1884983a 	sll	r2,r3,r2
 8005e88:	1007883a 	mov	r3,r2
 8005e8c:	d0a6b017 	ldw	r2,-25920(gp)
 8005e90:	1884b03a 	or	r2,r3,r2
 8005e94:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005e98:	d0a6b017 	ldw	r2,-25920(gp)
 8005e9c:	100170fa 	wrctl	ienable,r2
 8005ea0:	e0bffc17 	ldw	r2,-16(fp)
 8005ea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005ea8:	e0bffd17 	ldw	r2,-12(fp)
 8005eac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005eb0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8005eb4:	0001883a 	nop
}
 8005eb8:	e037883a 	mov	sp,fp
 8005ebc:	df000017 	ldw	fp,0(sp)
 8005ec0:	dec00104 	addi	sp,sp,4
 8005ec4:	f800283a 	ret

08005ec8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8005ec8:	defff904 	addi	sp,sp,-28
 8005ecc:	df000615 	stw	fp,24(sp)
 8005ed0:	df000604 	addi	fp,sp,24
 8005ed4:	e13ffe15 	stw	r4,-8(fp)
 8005ed8:	e17fff15 	stw	r5,-4(fp)
 8005edc:	e0bfff17 	ldw	r2,-4(fp)
 8005ee0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005ee4:	0005303a 	rdctl	r2,status
 8005ee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005eec:	e0fffb17 	ldw	r3,-20(fp)
 8005ef0:	00bfff84 	movi	r2,-2
 8005ef4:	1884703a 	and	r2,r3,r2
 8005ef8:	1001703a 	wrctl	status,r2
  
  return context;
 8005efc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005f00:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8005f04:	00c00044 	movi	r3,1
 8005f08:	e0bffa17 	ldw	r2,-24(fp)
 8005f0c:	1884983a 	sll	r2,r3,r2
 8005f10:	0084303a 	nor	r2,zero,r2
 8005f14:	1007883a 	mov	r3,r2
 8005f18:	d0a6b017 	ldw	r2,-25920(gp)
 8005f1c:	1884703a 	and	r2,r3,r2
 8005f20:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005f24:	d0a6b017 	ldw	r2,-25920(gp)
 8005f28:	100170fa 	wrctl	ienable,r2
 8005f2c:	e0bffc17 	ldw	r2,-16(fp)
 8005f30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005f34:	e0bffd17 	ldw	r2,-12(fp)
 8005f38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005f3c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8005f40:	0001883a 	nop
}
 8005f44:	e037883a 	mov	sp,fp
 8005f48:	df000017 	ldw	fp,0(sp)
 8005f4c:	dec00104 	addi	sp,sp,4
 8005f50:	f800283a 	ret

08005f54 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8005f54:	defffc04 	addi	sp,sp,-16
 8005f58:	df000315 	stw	fp,12(sp)
 8005f5c:	df000304 	addi	fp,sp,12
 8005f60:	e13ffe15 	stw	r4,-8(fp)
 8005f64:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8005f68:	000530fa 	rdctl	r2,ienable
 8005f6c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8005f70:	00c00044 	movi	r3,1
 8005f74:	e0bfff17 	ldw	r2,-4(fp)
 8005f78:	1884983a 	sll	r2,r3,r2
 8005f7c:	1007883a 	mov	r3,r2
 8005f80:	e0bffd17 	ldw	r2,-12(fp)
 8005f84:	1884703a 	and	r2,r3,r2
 8005f88:	1004c03a 	cmpne	r2,r2,zero
 8005f8c:	10803fcc 	andi	r2,r2,255
}
 8005f90:	e037883a 	mov	sp,fp
 8005f94:	df000017 	ldw	fp,0(sp)
 8005f98:	dec00104 	addi	sp,sp,4
 8005f9c:	f800283a 	ret

08005fa0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005fa0:	defff504 	addi	sp,sp,-44
 8005fa4:	dfc00a15 	stw	ra,40(sp)
 8005fa8:	df000915 	stw	fp,36(sp)
 8005fac:	df000904 	addi	fp,sp,36
 8005fb0:	e13ffc15 	stw	r4,-16(fp)
 8005fb4:	e17ffd15 	stw	r5,-12(fp)
 8005fb8:	e1bffe15 	stw	r6,-8(fp)
 8005fbc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8005fc0:	00bffa84 	movi	r2,-22
 8005fc4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8005fc8:	e0bffd17 	ldw	r2,-12(fp)
 8005fcc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8005fd0:	e0bff817 	ldw	r2,-32(fp)
 8005fd4:	10800808 	cmpgei	r2,r2,32
 8005fd8:	1000271e 	bne	r2,zero,8006078 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005fdc:	0005303a 	rdctl	r2,status
 8005fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005fe4:	e0fffb17 	ldw	r3,-20(fp)
 8005fe8:	00bfff84 	movi	r2,-2
 8005fec:	1884703a 	and	r2,r3,r2
 8005ff0:	1001703a 	wrctl	status,r2
  
  return context;
 8005ff4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8005ff8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8005ffc:	00820074 	movhi	r2,2049
 8006000:	10a8b904 	addi	r2,r2,-23836
 8006004:	e0fff817 	ldw	r3,-32(fp)
 8006008:	180690fa 	slli	r3,r3,3
 800600c:	10c5883a 	add	r2,r2,r3
 8006010:	e0fffe17 	ldw	r3,-8(fp)
 8006014:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8006018:	00820074 	movhi	r2,2049
 800601c:	10a8b904 	addi	r2,r2,-23836
 8006020:	e0fff817 	ldw	r3,-32(fp)
 8006024:	180690fa 	slli	r3,r3,3
 8006028:	10c5883a 	add	r2,r2,r3
 800602c:	10800104 	addi	r2,r2,4
 8006030:	e0ffff17 	ldw	r3,-4(fp)
 8006034:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8006038:	e0bffe17 	ldw	r2,-8(fp)
 800603c:	10000526 	beq	r2,zero,8006054 <alt_iic_isr_register+0xb4>
 8006040:	e0bff817 	ldw	r2,-32(fp)
 8006044:	100b883a 	mov	r5,r2
 8006048:	e13ffc17 	ldw	r4,-16(fp)
 800604c:	8005e400 	call	8005e40 <alt_ic_irq_enable>
 8006050:	00000406 	br	8006064 <alt_iic_isr_register+0xc4>
 8006054:	e0bff817 	ldw	r2,-32(fp)
 8006058:	100b883a 	mov	r5,r2
 800605c:	e13ffc17 	ldw	r4,-16(fp)
 8006060:	8005ec80 	call	8005ec8 <alt_ic_irq_disable>
 8006064:	e0bff715 	stw	r2,-36(fp)
 8006068:	e0bffa17 	ldw	r2,-24(fp)
 800606c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006070:	e0bff917 	ldw	r2,-28(fp)
 8006074:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8006078:	e0bff717 	ldw	r2,-36(fp)
}
 800607c:	e037883a 	mov	sp,fp
 8006080:	dfc00117 	ldw	ra,4(sp)
 8006084:	df000017 	ldw	fp,0(sp)
 8006088:	dec00204 	addi	sp,sp,8
 800608c:	f800283a 	ret

08006090 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8006090:	defff904 	addi	sp,sp,-28
 8006094:	dfc00615 	stw	ra,24(sp)
 8006098:	df000515 	stw	fp,20(sp)
 800609c:	df000504 	addi	fp,sp,20
 80060a0:	e13ffc15 	stw	r4,-16(fp)
 80060a4:	e17ffd15 	stw	r5,-12(fp)
 80060a8:	e1bffe15 	stw	r6,-8(fp)
 80060ac:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80060b0:	e1bfff17 	ldw	r6,-4(fp)
 80060b4:	e17ffe17 	ldw	r5,-8(fp)
 80060b8:	e13ffd17 	ldw	r4,-12(fp)
 80060bc:	80062d00 	call	80062d0 <open>
 80060c0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 80060c4:	e0bffb17 	ldw	r2,-20(fp)
 80060c8:	10001c16 	blt	r2,zero,800613c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 80060cc:	00820034 	movhi	r2,2048
 80060d0:	109d7404 	addi	r2,r2,30160
 80060d4:	e0fffb17 	ldw	r3,-20(fp)
 80060d8:	18c00324 	muli	r3,r3,12
 80060dc:	10c5883a 	add	r2,r2,r3
 80060e0:	10c00017 	ldw	r3,0(r2)
 80060e4:	e0bffc17 	ldw	r2,-16(fp)
 80060e8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80060ec:	00820034 	movhi	r2,2048
 80060f0:	109d7404 	addi	r2,r2,30160
 80060f4:	e0fffb17 	ldw	r3,-20(fp)
 80060f8:	18c00324 	muli	r3,r3,12
 80060fc:	10c5883a 	add	r2,r2,r3
 8006100:	10800104 	addi	r2,r2,4
 8006104:	10c00017 	ldw	r3,0(r2)
 8006108:	e0bffc17 	ldw	r2,-16(fp)
 800610c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8006110:	00820034 	movhi	r2,2048
 8006114:	109d7404 	addi	r2,r2,30160
 8006118:	e0fffb17 	ldw	r3,-20(fp)
 800611c:	18c00324 	muli	r3,r3,12
 8006120:	10c5883a 	add	r2,r2,r3
 8006124:	10800204 	addi	r2,r2,8
 8006128:	10c00017 	ldw	r3,0(r2)
 800612c:	e0bffc17 	ldw	r2,-16(fp)
 8006130:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8006134:	e13ffb17 	ldw	r4,-20(fp)
 8006138:	8004bbc0 	call	8004bbc <alt_release_fd>
  }
} 
 800613c:	0001883a 	nop
 8006140:	e037883a 	mov	sp,fp
 8006144:	dfc00117 	ldw	ra,4(sp)
 8006148:	df000017 	ldw	fp,0(sp)
 800614c:	dec00204 	addi	sp,sp,8
 8006150:	f800283a 	ret

08006154 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8006154:	defffb04 	addi	sp,sp,-20
 8006158:	dfc00415 	stw	ra,16(sp)
 800615c:	df000315 	stw	fp,12(sp)
 8006160:	df000304 	addi	fp,sp,12
 8006164:	e13ffd15 	stw	r4,-12(fp)
 8006168:	e17ffe15 	stw	r5,-8(fp)
 800616c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8006170:	01c07fc4 	movi	r7,511
 8006174:	01800044 	movi	r6,1
 8006178:	e17ffd17 	ldw	r5,-12(fp)
 800617c:	01020034 	movhi	r4,2048
 8006180:	211d7704 	addi	r4,r4,30172
 8006184:	80060900 	call	8006090 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8006188:	01c07fc4 	movi	r7,511
 800618c:	000d883a 	mov	r6,zero
 8006190:	e17ffe17 	ldw	r5,-8(fp)
 8006194:	01020034 	movhi	r4,2048
 8006198:	211d7404 	addi	r4,r4,30160
 800619c:	80060900 	call	8006090 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80061a0:	01c07fc4 	movi	r7,511
 80061a4:	01800044 	movi	r6,1
 80061a8:	e17fff17 	ldw	r5,-4(fp)
 80061ac:	01020034 	movhi	r4,2048
 80061b0:	211d7a04 	addi	r4,r4,30184
 80061b4:	80060900 	call	8006090 <alt_open_fd>
}  
 80061b8:	0001883a 	nop
 80061bc:	e037883a 	mov	sp,fp
 80061c0:	dfc00117 	ldw	ra,4(sp)
 80061c4:	df000017 	ldw	fp,0(sp)
 80061c8:	dec00204 	addi	sp,sp,8
 80061cc:	f800283a 	ret

080061d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80061d0:	defffe04 	addi	sp,sp,-8
 80061d4:	dfc00115 	stw	ra,4(sp)
 80061d8:	df000015 	stw	fp,0(sp)
 80061dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80061e0:	d0a00917 	ldw	r2,-32732(gp)
 80061e4:	10000326 	beq	r2,zero,80061f4 <alt_get_errno+0x24>
 80061e8:	d0a00917 	ldw	r2,-32732(gp)
 80061ec:	103ee83a 	callr	r2
 80061f0:	00000106 	br	80061f8 <alt_get_errno+0x28>
 80061f4:	d0a6ac04 	addi	r2,gp,-25936
}
 80061f8:	e037883a 	mov	sp,fp
 80061fc:	dfc00117 	ldw	ra,4(sp)
 8006200:	df000017 	ldw	fp,0(sp)
 8006204:	dec00204 	addi	sp,sp,8
 8006208:	f800283a 	ret

0800620c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800620c:	defffd04 	addi	sp,sp,-12
 8006210:	df000215 	stw	fp,8(sp)
 8006214:	df000204 	addi	fp,sp,8
 8006218:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800621c:	e0bfff17 	ldw	r2,-4(fp)
 8006220:	10800217 	ldw	r2,8(r2)
 8006224:	10d00034 	orhi	r3,r2,16384
 8006228:	e0bfff17 	ldw	r2,-4(fp)
 800622c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8006230:	e03ffe15 	stw	zero,-8(fp)
 8006234:	00001d06 	br	80062ac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006238:	00820034 	movhi	r2,2048
 800623c:	109d7404 	addi	r2,r2,30160
 8006240:	e0fffe17 	ldw	r3,-8(fp)
 8006244:	18c00324 	muli	r3,r3,12
 8006248:	10c5883a 	add	r2,r2,r3
 800624c:	10c00017 	ldw	r3,0(r2)
 8006250:	e0bfff17 	ldw	r2,-4(fp)
 8006254:	10800017 	ldw	r2,0(r2)
 8006258:	1880111e 	bne	r3,r2,80062a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800625c:	00820034 	movhi	r2,2048
 8006260:	109d7404 	addi	r2,r2,30160
 8006264:	e0fffe17 	ldw	r3,-8(fp)
 8006268:	18c00324 	muli	r3,r3,12
 800626c:	10c5883a 	add	r2,r2,r3
 8006270:	10800204 	addi	r2,r2,8
 8006274:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006278:	1000090e 	bge	r2,zero,80062a0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800627c:	e0bffe17 	ldw	r2,-8(fp)
 8006280:	10c00324 	muli	r3,r2,12
 8006284:	00820034 	movhi	r2,2048
 8006288:	109d7404 	addi	r2,r2,30160
 800628c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8006290:	e0bfff17 	ldw	r2,-4(fp)
 8006294:	18800226 	beq	r3,r2,80062a0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8006298:	00bffcc4 	movi	r2,-13
 800629c:	00000806 	br	80062c0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80062a0:	e0bffe17 	ldw	r2,-8(fp)
 80062a4:	10800044 	addi	r2,r2,1
 80062a8:	e0bffe15 	stw	r2,-8(fp)
 80062ac:	d0a00817 	ldw	r2,-32736(gp)
 80062b0:	1007883a 	mov	r3,r2
 80062b4:	e0bffe17 	ldw	r2,-8(fp)
 80062b8:	18bfdf2e 	bgeu	r3,r2,8006238 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80062bc:	0005883a 	mov	r2,zero
}
 80062c0:	e037883a 	mov	sp,fp
 80062c4:	df000017 	ldw	fp,0(sp)
 80062c8:	dec00104 	addi	sp,sp,4
 80062cc:	f800283a 	ret

080062d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80062d0:	defff604 	addi	sp,sp,-40
 80062d4:	dfc00915 	stw	ra,36(sp)
 80062d8:	df000815 	stw	fp,32(sp)
 80062dc:	df000804 	addi	fp,sp,32
 80062e0:	e13ffd15 	stw	r4,-12(fp)
 80062e4:	e17ffe15 	stw	r5,-8(fp)
 80062e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80062ec:	00bfffc4 	movi	r2,-1
 80062f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80062f4:	00bffb44 	movi	r2,-19
 80062f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80062fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8006300:	d1600604 	addi	r5,gp,-32744
 8006304:	e13ffd17 	ldw	r4,-12(fp)
 8006308:	80065ec0 	call	80065ec <alt_find_dev>
 800630c:	e0bff815 	stw	r2,-32(fp)
 8006310:	e0bff817 	ldw	r2,-32(fp)
 8006314:	1000051e 	bne	r2,zero,800632c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8006318:	e13ffd17 	ldw	r4,-12(fp)
 800631c:	800667c0 	call	800667c <alt_find_file>
 8006320:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8006324:	00800044 	movi	r2,1
 8006328:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800632c:	e0bff817 	ldw	r2,-32(fp)
 8006330:	10002926 	beq	r2,zero,80063d8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8006334:	e13ff817 	ldw	r4,-32(fp)
 8006338:	80067840 	call	8006784 <alt_get_fd>
 800633c:	e0bff915 	stw	r2,-28(fp)
 8006340:	e0bff917 	ldw	r2,-28(fp)
 8006344:	1000030e 	bge	r2,zero,8006354 <open+0x84>
    {
      status = index;
 8006348:	e0bff917 	ldw	r2,-28(fp)
 800634c:	e0bffa15 	stw	r2,-24(fp)
 8006350:	00002306 	br	80063e0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8006354:	e0bff917 	ldw	r2,-28(fp)
 8006358:	10c00324 	muli	r3,r2,12
 800635c:	00820034 	movhi	r2,2048
 8006360:	109d7404 	addi	r2,r2,30160
 8006364:	1885883a 	add	r2,r3,r2
 8006368:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800636c:	e0fffe17 	ldw	r3,-8(fp)
 8006370:	00900034 	movhi	r2,16384
 8006374:	10bfffc4 	addi	r2,r2,-1
 8006378:	1886703a 	and	r3,r3,r2
 800637c:	e0bffc17 	ldw	r2,-16(fp)
 8006380:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8006384:	e0bffb17 	ldw	r2,-20(fp)
 8006388:	1000051e 	bne	r2,zero,80063a0 <open+0xd0>
 800638c:	e13ffc17 	ldw	r4,-16(fp)
 8006390:	800620c0 	call	800620c <alt_file_locked>
 8006394:	e0bffa15 	stw	r2,-24(fp)
 8006398:	e0bffa17 	ldw	r2,-24(fp)
 800639c:	10001016 	blt	r2,zero,80063e0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80063a0:	e0bff817 	ldw	r2,-32(fp)
 80063a4:	10800317 	ldw	r2,12(r2)
 80063a8:	10000826 	beq	r2,zero,80063cc <open+0xfc>
 80063ac:	e0bff817 	ldw	r2,-32(fp)
 80063b0:	10800317 	ldw	r2,12(r2)
 80063b4:	e1ffff17 	ldw	r7,-4(fp)
 80063b8:	e1bffe17 	ldw	r6,-8(fp)
 80063bc:	e17ffd17 	ldw	r5,-12(fp)
 80063c0:	e13ffc17 	ldw	r4,-16(fp)
 80063c4:	103ee83a 	callr	r2
 80063c8:	00000106 	br	80063d0 <open+0x100>
 80063cc:	0005883a 	mov	r2,zero
 80063d0:	e0bffa15 	stw	r2,-24(fp)
 80063d4:	00000206 	br	80063e0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80063d8:	00bffb44 	movi	r2,-19
 80063dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80063e0:	e0bffa17 	ldw	r2,-24(fp)
 80063e4:	1000090e 	bge	r2,zero,800640c <open+0x13c>
  {
    alt_release_fd (index);  
 80063e8:	e13ff917 	ldw	r4,-28(fp)
 80063ec:	8004bbc0 	call	8004bbc <alt_release_fd>
    ALT_ERRNO = -status;
 80063f0:	80061d00 	call	80061d0 <alt_get_errno>
 80063f4:	1007883a 	mov	r3,r2
 80063f8:	e0bffa17 	ldw	r2,-24(fp)
 80063fc:	0085c83a 	sub	r2,zero,r2
 8006400:	18800015 	stw	r2,0(r3)
    return -1;
 8006404:	00bfffc4 	movi	r2,-1
 8006408:	00000106 	br	8006410 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 800640c:	e0bff917 	ldw	r2,-28(fp)
}
 8006410:	e037883a 	mov	sp,fp
 8006414:	dfc00117 	ldw	ra,4(sp)
 8006418:	df000017 	ldw	fp,0(sp)
 800641c:	dec00204 	addi	sp,sp,8
 8006420:	f800283a 	ret

08006424 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8006424:	defffa04 	addi	sp,sp,-24
 8006428:	df000515 	stw	fp,20(sp)
 800642c:	df000504 	addi	fp,sp,20
 8006430:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006434:	0005303a 	rdctl	r2,status
 8006438:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800643c:	e0fffc17 	ldw	r3,-16(fp)
 8006440:	00bfff84 	movi	r2,-2
 8006444:	1884703a 	and	r2,r3,r2
 8006448:	1001703a 	wrctl	status,r2
  
  return context;
 800644c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8006450:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8006454:	e0bfff17 	ldw	r2,-4(fp)
 8006458:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800645c:	e0bffd17 	ldw	r2,-12(fp)
 8006460:	10800017 	ldw	r2,0(r2)
 8006464:	e0fffd17 	ldw	r3,-12(fp)
 8006468:	18c00117 	ldw	r3,4(r3)
 800646c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8006470:	e0bffd17 	ldw	r2,-12(fp)
 8006474:	10800117 	ldw	r2,4(r2)
 8006478:	e0fffd17 	ldw	r3,-12(fp)
 800647c:	18c00017 	ldw	r3,0(r3)
 8006480:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8006484:	e0bffd17 	ldw	r2,-12(fp)
 8006488:	e0fffd17 	ldw	r3,-12(fp)
 800648c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8006490:	e0bffd17 	ldw	r2,-12(fp)
 8006494:	e0fffd17 	ldw	r3,-12(fp)
 8006498:	10c00015 	stw	r3,0(r2)
 800649c:	e0bffb17 	ldw	r2,-20(fp)
 80064a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80064a4:	e0bffe17 	ldw	r2,-8(fp)
 80064a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80064ac:	0001883a 	nop
 80064b0:	e037883a 	mov	sp,fp
 80064b4:	df000017 	ldw	fp,0(sp)
 80064b8:	dec00104 	addi	sp,sp,4
 80064bc:	f800283a 	ret

080064c0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80064c0:	defffb04 	addi	sp,sp,-20
 80064c4:	dfc00415 	stw	ra,16(sp)
 80064c8:	df000315 	stw	fp,12(sp)
 80064cc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80064d0:	d0a00c17 	ldw	r2,-32720(gp)
 80064d4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80064d8:	d0a6b217 	ldw	r2,-25912(gp)
 80064dc:	10800044 	addi	r2,r2,1
 80064e0:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80064e4:	00002e06 	br	80065a0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80064e8:	e0bffd17 	ldw	r2,-12(fp)
 80064ec:	10800017 	ldw	r2,0(r2)
 80064f0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80064f4:	e0bffd17 	ldw	r2,-12(fp)
 80064f8:	10800403 	ldbu	r2,16(r2)
 80064fc:	10803fcc 	andi	r2,r2,255
 8006500:	10000426 	beq	r2,zero,8006514 <alt_tick+0x54>
 8006504:	d0a6b217 	ldw	r2,-25912(gp)
 8006508:	1000021e 	bne	r2,zero,8006514 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800650c:	e0bffd17 	ldw	r2,-12(fp)
 8006510:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8006514:	e0bffd17 	ldw	r2,-12(fp)
 8006518:	10800217 	ldw	r2,8(r2)
 800651c:	d0e6b217 	ldw	r3,-25912(gp)
 8006520:	18801d36 	bltu	r3,r2,8006598 <alt_tick+0xd8>
 8006524:	e0bffd17 	ldw	r2,-12(fp)
 8006528:	10800403 	ldbu	r2,16(r2)
 800652c:	10803fcc 	andi	r2,r2,255
 8006530:	1000191e 	bne	r2,zero,8006598 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8006534:	e0bffd17 	ldw	r2,-12(fp)
 8006538:	10800317 	ldw	r2,12(r2)
 800653c:	e0fffd17 	ldw	r3,-12(fp)
 8006540:	18c00517 	ldw	r3,20(r3)
 8006544:	1809883a 	mov	r4,r3
 8006548:	103ee83a 	callr	r2
 800654c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8006550:	e0bfff17 	ldw	r2,-4(fp)
 8006554:	1000031e 	bne	r2,zero,8006564 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8006558:	e13ffd17 	ldw	r4,-12(fp)
 800655c:	80064240 	call	8006424 <alt_alarm_stop>
 8006560:	00000d06 	br	8006598 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8006564:	e0bffd17 	ldw	r2,-12(fp)
 8006568:	10c00217 	ldw	r3,8(r2)
 800656c:	e0bfff17 	ldw	r2,-4(fp)
 8006570:	1887883a 	add	r3,r3,r2
 8006574:	e0bffd17 	ldw	r2,-12(fp)
 8006578:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800657c:	e0bffd17 	ldw	r2,-12(fp)
 8006580:	10c00217 	ldw	r3,8(r2)
 8006584:	d0a6b217 	ldw	r2,-25912(gp)
 8006588:	1880032e 	bgeu	r3,r2,8006598 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800658c:	e0bffd17 	ldw	r2,-12(fp)
 8006590:	00c00044 	movi	r3,1
 8006594:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8006598:	e0bffe17 	ldw	r2,-8(fp)
 800659c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80065a0:	e0fffd17 	ldw	r3,-12(fp)
 80065a4:	d0a00c04 	addi	r2,gp,-32720
 80065a8:	18bfcf1e 	bne	r3,r2,80064e8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80065ac:	0001883a 	nop
}
 80065b0:	0001883a 	nop
 80065b4:	e037883a 	mov	sp,fp
 80065b8:	dfc00117 	ldw	ra,4(sp)
 80065bc:	df000017 	ldw	fp,0(sp)
 80065c0:	dec00204 	addi	sp,sp,8
 80065c4:	f800283a 	ret

080065c8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80065c8:	deffff04 	addi	sp,sp,-4
 80065cc:	df000015 	stw	fp,0(sp)
 80065d0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80065d4:	000170fa 	wrctl	ienable,zero
}
 80065d8:	0001883a 	nop
 80065dc:	e037883a 	mov	sp,fp
 80065e0:	df000017 	ldw	fp,0(sp)
 80065e4:	dec00104 	addi	sp,sp,4
 80065e8:	f800283a 	ret

080065ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80065ec:	defffa04 	addi	sp,sp,-24
 80065f0:	dfc00515 	stw	ra,20(sp)
 80065f4:	df000415 	stw	fp,16(sp)
 80065f8:	df000404 	addi	fp,sp,16
 80065fc:	e13ffe15 	stw	r4,-8(fp)
 8006600:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006604:	e0bfff17 	ldw	r2,-4(fp)
 8006608:	10800017 	ldw	r2,0(r2)
 800660c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8006610:	e13ffe17 	ldw	r4,-8(fp)
 8006614:	80019200 	call	8001920 <strlen>
 8006618:	10800044 	addi	r2,r2,1
 800661c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006620:	00000d06 	br	8006658 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8006624:	e0bffc17 	ldw	r2,-16(fp)
 8006628:	10800217 	ldw	r2,8(r2)
 800662c:	e0fffd17 	ldw	r3,-12(fp)
 8006630:	180d883a 	mov	r6,r3
 8006634:	e17ffe17 	ldw	r5,-8(fp)
 8006638:	1009883a 	mov	r4,r2
 800663c:	80069a00 	call	80069a0 <memcmp>
 8006640:	1000021e 	bne	r2,zero,800664c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8006644:	e0bffc17 	ldw	r2,-16(fp)
 8006648:	00000706 	br	8006668 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800664c:	e0bffc17 	ldw	r2,-16(fp)
 8006650:	10800017 	ldw	r2,0(r2)
 8006654:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006658:	e0fffc17 	ldw	r3,-16(fp)
 800665c:	e0bfff17 	ldw	r2,-4(fp)
 8006660:	18bff01e 	bne	r3,r2,8006624 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8006664:	0005883a 	mov	r2,zero
}
 8006668:	e037883a 	mov	sp,fp
 800666c:	dfc00117 	ldw	ra,4(sp)
 8006670:	df000017 	ldw	fp,0(sp)
 8006674:	dec00204 	addi	sp,sp,8
 8006678:	f800283a 	ret

0800667c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800667c:	defffb04 	addi	sp,sp,-20
 8006680:	dfc00415 	stw	ra,16(sp)
 8006684:	df000315 	stw	fp,12(sp)
 8006688:	df000304 	addi	fp,sp,12
 800668c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006690:	d0a00417 	ldw	r2,-32752(gp)
 8006694:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006698:	00003106 	br	8006760 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800669c:	e0bffd17 	ldw	r2,-12(fp)
 80066a0:	10800217 	ldw	r2,8(r2)
 80066a4:	1009883a 	mov	r4,r2
 80066a8:	80019200 	call	8001920 <strlen>
 80066ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80066b0:	e0bffd17 	ldw	r2,-12(fp)
 80066b4:	10c00217 	ldw	r3,8(r2)
 80066b8:	e0bffe17 	ldw	r2,-8(fp)
 80066bc:	10bfffc4 	addi	r2,r2,-1
 80066c0:	1885883a 	add	r2,r3,r2
 80066c4:	10800003 	ldbu	r2,0(r2)
 80066c8:	10803fcc 	andi	r2,r2,255
 80066cc:	1080201c 	xori	r2,r2,128
 80066d0:	10bfe004 	addi	r2,r2,-128
 80066d4:	10800bd8 	cmpnei	r2,r2,47
 80066d8:	1000031e 	bne	r2,zero,80066e8 <alt_find_file+0x6c>
    {
      len -= 1;
 80066dc:	e0bffe17 	ldw	r2,-8(fp)
 80066e0:	10bfffc4 	addi	r2,r2,-1
 80066e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80066e8:	e0bffe17 	ldw	r2,-8(fp)
 80066ec:	e0ffff17 	ldw	r3,-4(fp)
 80066f0:	1885883a 	add	r2,r3,r2
 80066f4:	10800003 	ldbu	r2,0(r2)
 80066f8:	10803fcc 	andi	r2,r2,255
 80066fc:	1080201c 	xori	r2,r2,128
 8006700:	10bfe004 	addi	r2,r2,-128
 8006704:	10800be0 	cmpeqi	r2,r2,47
 8006708:	1000081e 	bne	r2,zero,800672c <alt_find_file+0xb0>
 800670c:	e0bffe17 	ldw	r2,-8(fp)
 8006710:	e0ffff17 	ldw	r3,-4(fp)
 8006714:	1885883a 	add	r2,r3,r2
 8006718:	10800003 	ldbu	r2,0(r2)
 800671c:	10803fcc 	andi	r2,r2,255
 8006720:	1080201c 	xori	r2,r2,128
 8006724:	10bfe004 	addi	r2,r2,-128
 8006728:	10000a1e 	bne	r2,zero,8006754 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800672c:	e0bffd17 	ldw	r2,-12(fp)
 8006730:	10800217 	ldw	r2,8(r2)
 8006734:	e0fffe17 	ldw	r3,-8(fp)
 8006738:	180d883a 	mov	r6,r3
 800673c:	e17fff17 	ldw	r5,-4(fp)
 8006740:	1009883a 	mov	r4,r2
 8006744:	80069a00 	call	80069a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006748:	1000021e 	bne	r2,zero,8006754 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800674c:	e0bffd17 	ldw	r2,-12(fp)
 8006750:	00000706 	br	8006770 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8006754:	e0bffd17 	ldw	r2,-12(fp)
 8006758:	10800017 	ldw	r2,0(r2)
 800675c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006760:	e0fffd17 	ldw	r3,-12(fp)
 8006764:	d0a00404 	addi	r2,gp,-32752
 8006768:	18bfcc1e 	bne	r3,r2,800669c <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800676c:	0005883a 	mov	r2,zero
}
 8006770:	e037883a 	mov	sp,fp
 8006774:	dfc00117 	ldw	ra,4(sp)
 8006778:	df000017 	ldw	fp,0(sp)
 800677c:	dec00204 	addi	sp,sp,8
 8006780:	f800283a 	ret

08006784 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006784:	defffc04 	addi	sp,sp,-16
 8006788:	df000315 	stw	fp,12(sp)
 800678c:	df000304 	addi	fp,sp,12
 8006790:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8006794:	00bffa04 	movi	r2,-24
 8006798:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800679c:	e03ffd15 	stw	zero,-12(fp)
 80067a0:	00001906 	br	8006808 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 80067a4:	00820034 	movhi	r2,2048
 80067a8:	109d7404 	addi	r2,r2,30160
 80067ac:	e0fffd17 	ldw	r3,-12(fp)
 80067b0:	18c00324 	muli	r3,r3,12
 80067b4:	10c5883a 	add	r2,r2,r3
 80067b8:	10800017 	ldw	r2,0(r2)
 80067bc:	10000f1e 	bne	r2,zero,80067fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 80067c0:	00820034 	movhi	r2,2048
 80067c4:	109d7404 	addi	r2,r2,30160
 80067c8:	e0fffd17 	ldw	r3,-12(fp)
 80067cc:	18c00324 	muli	r3,r3,12
 80067d0:	10c5883a 	add	r2,r2,r3
 80067d4:	e0ffff17 	ldw	r3,-4(fp)
 80067d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80067dc:	d0e00817 	ldw	r3,-32736(gp)
 80067e0:	e0bffd17 	ldw	r2,-12(fp)
 80067e4:	1880020e 	bge	r3,r2,80067f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 80067e8:	e0bffd17 	ldw	r2,-12(fp)
 80067ec:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 80067f0:	e0bffd17 	ldw	r2,-12(fp)
 80067f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80067f8:	00000606 	br	8006814 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80067fc:	e0bffd17 	ldw	r2,-12(fp)
 8006800:	10800044 	addi	r2,r2,1
 8006804:	e0bffd15 	stw	r2,-12(fp)
 8006808:	e0bffd17 	ldw	r2,-12(fp)
 800680c:	10800810 	cmplti	r2,r2,32
 8006810:	103fe41e 	bne	r2,zero,80067a4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006814:	e0bffe17 	ldw	r2,-8(fp)
}
 8006818:	e037883a 	mov	sp,fp
 800681c:	df000017 	ldw	fp,0(sp)
 8006820:	dec00104 	addi	sp,sp,4
 8006824:	f800283a 	ret

08006828 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8006828:	defffb04 	addi	sp,sp,-20
 800682c:	df000415 	stw	fp,16(sp)
 8006830:	df000404 	addi	fp,sp,16
 8006834:	e13ffe15 	stw	r4,-8(fp)
 8006838:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800683c:	e0bfff17 	ldw	r2,-4(fp)
 8006840:	10840070 	cmpltui	r2,r2,4097
 8006844:	1000021e 	bne	r2,zero,8006850 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8006848:	00840004 	movi	r2,4096
 800684c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8006850:	e0fffe17 	ldw	r3,-8(fp)
 8006854:	e0bfff17 	ldw	r2,-4(fp)
 8006858:	1885883a 	add	r2,r3,r2
 800685c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8006860:	e0bffe17 	ldw	r2,-8(fp)
 8006864:	e0bffc15 	stw	r2,-16(fp)
 8006868:	00000506 	br	8006880 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800686c:	e0bffc17 	ldw	r2,-16(fp)
 8006870:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8006874:	e0bffc17 	ldw	r2,-16(fp)
 8006878:	10800804 	addi	r2,r2,32
 800687c:	e0bffc15 	stw	r2,-16(fp)
 8006880:	e0fffc17 	ldw	r3,-16(fp)
 8006884:	e0bffd17 	ldw	r2,-12(fp)
 8006888:	18bff836 	bltu	r3,r2,800686c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800688c:	e0bffe17 	ldw	r2,-8(fp)
 8006890:	108007cc 	andi	r2,r2,31
 8006894:	10000226 	beq	r2,zero,80068a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8006898:	e0bffc17 	ldw	r2,-16(fp)
 800689c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80068a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80068a4:	0001883a 	nop
 80068a8:	e037883a 	mov	sp,fp
 80068ac:	df000017 	ldw	fp,0(sp)
 80068b0:	dec00104 	addi	sp,sp,4
 80068b4:	f800283a 	ret

080068b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80068b8:	defffe04 	addi	sp,sp,-8
 80068bc:	df000115 	stw	fp,4(sp)
 80068c0:	df000104 	addi	fp,sp,4
 80068c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80068c8:	e0bfff17 	ldw	r2,-4(fp)
 80068cc:	10bffe84 	addi	r2,r2,-6
 80068d0:	10c00428 	cmpgeui	r3,r2,16
 80068d4:	18001a1e 	bne	r3,zero,8006940 <alt_exception_cause_generated_bad_addr+0x88>
 80068d8:	100690ba 	slli	r3,r2,2
 80068dc:	00820034 	movhi	r2,2048
 80068e0:	109a3c04 	addi	r2,r2,26864
 80068e4:	1885883a 	add	r2,r3,r2
 80068e8:	10800017 	ldw	r2,0(r2)
 80068ec:	1000683a 	jmp	r2
 80068f0:	08006930 	cmpltui	zero,at,420
 80068f4:	08006930 	cmpltui	zero,at,420
 80068f8:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 80068fc:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 8006900:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 8006904:	08006930 	cmpltui	zero,at,420
 8006908:	08006938 	rdprs	zero,at,420
 800690c:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 8006910:	08006930 	cmpltui	zero,at,420
 8006914:	08006930 	cmpltui	zero,at,420
 8006918:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 800691c:	08006930 	cmpltui	zero,at,420
 8006920:	08006938 	rdprs	zero,at,420
 8006924:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 8006928:	08006940 	call	800694 <__alt_mem_new_sdram_controller_0-0x77ff96c>
 800692c:	08006930 	cmpltui	zero,at,420
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8006930:	00800044 	movi	r2,1
 8006934:	00000306 	br	8006944 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8006938:	0005883a 	mov	r2,zero
 800693c:	00000106 	br	8006944 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8006940:	0005883a 	mov	r2,zero
  }
}
 8006944:	e037883a 	mov	sp,fp
 8006948:	df000017 	ldw	fp,0(sp)
 800694c:	dec00104 	addi	sp,sp,4
 8006950:	f800283a 	ret

08006954 <atexit>:
 8006954:	200b883a 	mov	r5,r4
 8006958:	000f883a 	mov	r7,zero
 800695c:	000d883a 	mov	r6,zero
 8006960:	0009883a 	mov	r4,zero
 8006964:	8006a1c1 	jmpi	8006a1c <__register_exitproc>

08006968 <exit>:
 8006968:	defffe04 	addi	sp,sp,-8
 800696c:	000b883a 	mov	r5,zero
 8006970:	dc000015 	stw	r16,0(sp)
 8006974:	dfc00115 	stw	ra,4(sp)
 8006978:	2021883a 	mov	r16,r4
 800697c:	8006b340 	call	8006b34 <__call_exitprocs>
 8006980:	00820074 	movhi	r2,2049
 8006984:	10a1ec04 	addi	r2,r2,-30800
 8006988:	11000017 	ldw	r4,0(r2)
 800698c:	20800f17 	ldw	r2,60(r4)
 8006990:	10000126 	beq	r2,zero,8006998 <exit+0x30>
 8006994:	103ee83a 	callr	r2
 8006998:	8009883a 	mov	r4,r16
 800699c:	8006cb40 	call	8006cb4 <_exit>

080069a0 <memcmp>:
 80069a0:	01c000c4 	movi	r7,3
 80069a4:	3980192e 	bgeu	r7,r6,8006a0c <memcmp+0x6c>
 80069a8:	2144b03a 	or	r2,r4,r5
 80069ac:	11c4703a 	and	r2,r2,r7
 80069b0:	10000f26 	beq	r2,zero,80069f0 <memcmp+0x50>
 80069b4:	20800003 	ldbu	r2,0(r4)
 80069b8:	28c00003 	ldbu	r3,0(r5)
 80069bc:	10c0151e 	bne	r2,r3,8006a14 <memcmp+0x74>
 80069c0:	31bfff84 	addi	r6,r6,-2
 80069c4:	01ffffc4 	movi	r7,-1
 80069c8:	00000406 	br	80069dc <memcmp+0x3c>
 80069cc:	20800003 	ldbu	r2,0(r4)
 80069d0:	28c00003 	ldbu	r3,0(r5)
 80069d4:	31bfffc4 	addi	r6,r6,-1
 80069d8:	10c00e1e 	bne	r2,r3,8006a14 <memcmp+0x74>
 80069dc:	21000044 	addi	r4,r4,1
 80069e0:	29400044 	addi	r5,r5,1
 80069e4:	31fff91e 	bne	r6,r7,80069cc <memcmp+0x2c>
 80069e8:	0005883a 	mov	r2,zero
 80069ec:	f800283a 	ret
 80069f0:	20c00017 	ldw	r3,0(r4)
 80069f4:	28800017 	ldw	r2,0(r5)
 80069f8:	18bfee1e 	bne	r3,r2,80069b4 <memcmp+0x14>
 80069fc:	31bfff04 	addi	r6,r6,-4
 8006a00:	21000104 	addi	r4,r4,4
 8006a04:	29400104 	addi	r5,r5,4
 8006a08:	39bff936 	bltu	r7,r6,80069f0 <memcmp+0x50>
 8006a0c:	303fe91e 	bne	r6,zero,80069b4 <memcmp+0x14>
 8006a10:	003ff506 	br	80069e8 <memcmp+0x48>
 8006a14:	10c5c83a 	sub	r2,r2,r3
 8006a18:	f800283a 	ret

08006a1c <__register_exitproc>:
 8006a1c:	defffa04 	addi	sp,sp,-24
 8006a20:	dc000315 	stw	r16,12(sp)
 8006a24:	04020074 	movhi	r16,2049
 8006a28:	8421ec04 	addi	r16,r16,-30800
 8006a2c:	80c00017 	ldw	r3,0(r16)
 8006a30:	dc400415 	stw	r17,16(sp)
 8006a34:	dfc00515 	stw	ra,20(sp)
 8006a38:	18805217 	ldw	r2,328(r3)
 8006a3c:	2023883a 	mov	r17,r4
 8006a40:	10003726 	beq	r2,zero,8006b20 <__register_exitproc+0x104>
 8006a44:	10c00117 	ldw	r3,4(r2)
 8006a48:	010007c4 	movi	r4,31
 8006a4c:	20c00e16 	blt	r4,r3,8006a88 <__register_exitproc+0x6c>
 8006a50:	1a000044 	addi	r8,r3,1
 8006a54:	8800221e 	bne	r17,zero,8006ae0 <__register_exitproc+0xc4>
 8006a58:	18c00084 	addi	r3,r3,2
 8006a5c:	18c7883a 	add	r3,r3,r3
 8006a60:	18c7883a 	add	r3,r3,r3
 8006a64:	12000115 	stw	r8,4(r2)
 8006a68:	10c7883a 	add	r3,r2,r3
 8006a6c:	19400015 	stw	r5,0(r3)
 8006a70:	0005883a 	mov	r2,zero
 8006a74:	dfc00517 	ldw	ra,20(sp)
 8006a78:	dc400417 	ldw	r17,16(sp)
 8006a7c:	dc000317 	ldw	r16,12(sp)
 8006a80:	dec00604 	addi	sp,sp,24
 8006a84:	f800283a 	ret
 8006a88:	00800034 	movhi	r2,0
 8006a8c:	10800004 	addi	r2,r2,0
 8006a90:	10002626 	beq	r2,zero,8006b2c <__register_exitproc+0x110>
 8006a94:	01006404 	movi	r4,400
 8006a98:	d9400015 	stw	r5,0(sp)
 8006a9c:	d9800115 	stw	r6,4(sp)
 8006aa0:	d9c00215 	stw	r7,8(sp)
 8006aa4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8006aa8:	d9400017 	ldw	r5,0(sp)
 8006aac:	d9800117 	ldw	r6,4(sp)
 8006ab0:	d9c00217 	ldw	r7,8(sp)
 8006ab4:	10001d26 	beq	r2,zero,8006b2c <__register_exitproc+0x110>
 8006ab8:	81000017 	ldw	r4,0(r16)
 8006abc:	10000115 	stw	zero,4(r2)
 8006ac0:	02000044 	movi	r8,1
 8006ac4:	22405217 	ldw	r9,328(r4)
 8006ac8:	0007883a 	mov	r3,zero
 8006acc:	12400015 	stw	r9,0(r2)
 8006ad0:	20805215 	stw	r2,328(r4)
 8006ad4:	10006215 	stw	zero,392(r2)
 8006ad8:	10006315 	stw	zero,396(r2)
 8006adc:	883fde26 	beq	r17,zero,8006a58 <__register_exitproc+0x3c>
 8006ae0:	18c9883a 	add	r4,r3,r3
 8006ae4:	2109883a 	add	r4,r4,r4
 8006ae8:	1109883a 	add	r4,r2,r4
 8006aec:	21802215 	stw	r6,136(r4)
 8006af0:	01800044 	movi	r6,1
 8006af4:	12406217 	ldw	r9,392(r2)
 8006af8:	30cc983a 	sll	r6,r6,r3
 8006afc:	4992b03a 	or	r9,r9,r6
 8006b00:	12406215 	stw	r9,392(r2)
 8006b04:	21c04215 	stw	r7,264(r4)
 8006b08:	01000084 	movi	r4,2
 8006b0c:	893fd21e 	bne	r17,r4,8006a58 <__register_exitproc+0x3c>
 8006b10:	11006317 	ldw	r4,396(r2)
 8006b14:	218cb03a 	or	r6,r4,r6
 8006b18:	11806315 	stw	r6,396(r2)
 8006b1c:	003fce06 	br	8006a58 <__register_exitproc+0x3c>
 8006b20:	18805304 	addi	r2,r3,332
 8006b24:	18805215 	stw	r2,328(r3)
 8006b28:	003fc606 	br	8006a44 <__register_exitproc+0x28>
 8006b2c:	00bfffc4 	movi	r2,-1
 8006b30:	003fd006 	br	8006a74 <__register_exitproc+0x58>

08006b34 <__call_exitprocs>:
 8006b34:	defff504 	addi	sp,sp,-44
 8006b38:	df000915 	stw	fp,36(sp)
 8006b3c:	dd400615 	stw	r21,24(sp)
 8006b40:	dc800315 	stw	r18,12(sp)
 8006b44:	dfc00a15 	stw	ra,40(sp)
 8006b48:	ddc00815 	stw	r23,32(sp)
 8006b4c:	dd800715 	stw	r22,28(sp)
 8006b50:	dd000515 	stw	r20,20(sp)
 8006b54:	dcc00415 	stw	r19,16(sp)
 8006b58:	dc400215 	stw	r17,8(sp)
 8006b5c:	dc000115 	stw	r16,4(sp)
 8006b60:	d9000015 	stw	r4,0(sp)
 8006b64:	2839883a 	mov	fp,r5
 8006b68:	04800044 	movi	r18,1
 8006b6c:	057fffc4 	movi	r21,-1
 8006b70:	00820074 	movhi	r2,2049
 8006b74:	10a1ec04 	addi	r2,r2,-30800
 8006b78:	12000017 	ldw	r8,0(r2)
 8006b7c:	45005217 	ldw	r20,328(r8)
 8006b80:	44c05204 	addi	r19,r8,328
 8006b84:	a0001c26 	beq	r20,zero,8006bf8 <__call_exitprocs+0xc4>
 8006b88:	a0800117 	ldw	r2,4(r20)
 8006b8c:	15ffffc4 	addi	r23,r2,-1
 8006b90:	b8000d16 	blt	r23,zero,8006bc8 <__call_exitprocs+0x94>
 8006b94:	14000044 	addi	r16,r2,1
 8006b98:	8421883a 	add	r16,r16,r16
 8006b9c:	8421883a 	add	r16,r16,r16
 8006ba0:	84402004 	addi	r17,r16,128
 8006ba4:	a463883a 	add	r17,r20,r17
 8006ba8:	a421883a 	add	r16,r20,r16
 8006bac:	e0001e26 	beq	fp,zero,8006c28 <__call_exitprocs+0xf4>
 8006bb0:	80804017 	ldw	r2,256(r16)
 8006bb4:	e0801c26 	beq	fp,r2,8006c28 <__call_exitprocs+0xf4>
 8006bb8:	bdffffc4 	addi	r23,r23,-1
 8006bbc:	843fff04 	addi	r16,r16,-4
 8006bc0:	8c7fff04 	addi	r17,r17,-4
 8006bc4:	bd7ff91e 	bne	r23,r21,8006bac <__call_exitprocs+0x78>
 8006bc8:	00800034 	movhi	r2,0
 8006bcc:	10800004 	addi	r2,r2,0
 8006bd0:	10000926 	beq	r2,zero,8006bf8 <__call_exitprocs+0xc4>
 8006bd4:	a0800117 	ldw	r2,4(r20)
 8006bd8:	1000301e 	bne	r2,zero,8006c9c <__call_exitprocs+0x168>
 8006bdc:	a0800017 	ldw	r2,0(r20)
 8006be0:	10003226 	beq	r2,zero,8006cac <__call_exitprocs+0x178>
 8006be4:	a009883a 	mov	r4,r20
 8006be8:	98800015 	stw	r2,0(r19)
 8006bec:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8006bf0:	9d000017 	ldw	r20,0(r19)
 8006bf4:	a03fe41e 	bne	r20,zero,8006b88 <__call_exitprocs+0x54>
 8006bf8:	dfc00a17 	ldw	ra,40(sp)
 8006bfc:	df000917 	ldw	fp,36(sp)
 8006c00:	ddc00817 	ldw	r23,32(sp)
 8006c04:	dd800717 	ldw	r22,28(sp)
 8006c08:	dd400617 	ldw	r21,24(sp)
 8006c0c:	dd000517 	ldw	r20,20(sp)
 8006c10:	dcc00417 	ldw	r19,16(sp)
 8006c14:	dc800317 	ldw	r18,12(sp)
 8006c18:	dc400217 	ldw	r17,8(sp)
 8006c1c:	dc000117 	ldw	r16,4(sp)
 8006c20:	dec00b04 	addi	sp,sp,44
 8006c24:	f800283a 	ret
 8006c28:	a0800117 	ldw	r2,4(r20)
 8006c2c:	80c00017 	ldw	r3,0(r16)
 8006c30:	10bfffc4 	addi	r2,r2,-1
 8006c34:	15c01426 	beq	r2,r23,8006c88 <__call_exitprocs+0x154>
 8006c38:	80000015 	stw	zero,0(r16)
 8006c3c:	183fde26 	beq	r3,zero,8006bb8 <__call_exitprocs+0x84>
 8006c40:	95c8983a 	sll	r4,r18,r23
 8006c44:	a0806217 	ldw	r2,392(r20)
 8006c48:	a5800117 	ldw	r22,4(r20)
 8006c4c:	2084703a 	and	r2,r4,r2
 8006c50:	10000b26 	beq	r2,zero,8006c80 <__call_exitprocs+0x14c>
 8006c54:	a0806317 	ldw	r2,396(r20)
 8006c58:	2088703a 	and	r4,r4,r2
 8006c5c:	20000c1e 	bne	r4,zero,8006c90 <__call_exitprocs+0x15c>
 8006c60:	89400017 	ldw	r5,0(r17)
 8006c64:	d9000017 	ldw	r4,0(sp)
 8006c68:	183ee83a 	callr	r3
 8006c6c:	a0800117 	ldw	r2,4(r20)
 8006c70:	15bfbf1e 	bne	r2,r22,8006b70 <__call_exitprocs+0x3c>
 8006c74:	98800017 	ldw	r2,0(r19)
 8006c78:	153fcf26 	beq	r2,r20,8006bb8 <__call_exitprocs+0x84>
 8006c7c:	003fbc06 	br	8006b70 <__call_exitprocs+0x3c>
 8006c80:	183ee83a 	callr	r3
 8006c84:	003ff906 	br	8006c6c <__call_exitprocs+0x138>
 8006c88:	a5c00115 	stw	r23,4(r20)
 8006c8c:	003feb06 	br	8006c3c <__call_exitprocs+0x108>
 8006c90:	89000017 	ldw	r4,0(r17)
 8006c94:	183ee83a 	callr	r3
 8006c98:	003ff406 	br	8006c6c <__call_exitprocs+0x138>
 8006c9c:	a0800017 	ldw	r2,0(r20)
 8006ca0:	a027883a 	mov	r19,r20
 8006ca4:	1029883a 	mov	r20,r2
 8006ca8:	003fb606 	br	8006b84 <__call_exitprocs+0x50>
 8006cac:	0005883a 	mov	r2,zero
 8006cb0:	003ffb06 	br	8006ca0 <__call_exitprocs+0x16c>

08006cb4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8006cb4:	defffd04 	addi	sp,sp,-12
 8006cb8:	df000215 	stw	fp,8(sp)
 8006cbc:	df000204 	addi	fp,sp,8
 8006cc0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8006cc4:	0001883a 	nop
 8006cc8:	e0bfff17 	ldw	r2,-4(fp)
 8006ccc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8006cd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8006cd4:	10000226 	beq	r2,zero,8006ce0 <_exit+0x2c>
    ALT_SIM_FAIL();
 8006cd8:	002af070 	cmpltui	zero,zero,43969
 8006cdc:	00000106 	br	8006ce4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8006ce0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8006ce4:	003fff06 	br	8006ce4 <_exit+0x30>
