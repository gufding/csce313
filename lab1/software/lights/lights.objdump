
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00006db8 memsz 0x00006db8 flags r-x
    LOAD off    0x00007dd8 vaddr 0x08006dd8 paddr 0x08008844 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x0000a2b0 vaddr 0x0800a2b0 paddr 0x0800a2b0 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006b00  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000094  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  08006dd8  08008844  00007dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  0800a2b0  0800a2b0  0000a2b0  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0800a440  0800a440  00009844  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009844  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a98  00000000  00000000  00009868  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017026  00000000  00000000  0000a300  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000063a0  00000000  00000000  00021326  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006efa  00000000  00000000  000276c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001698  00000000  00000000  0002e5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002824  00000000  00000000  0002fc58  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b8c  00000000  00000000  0003247c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00037008  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000006b0  00000000  00000000  00037068  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00039d1a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00039d1d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039d29  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00039d2a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00039d2b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00039d36  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00039d41  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00039d4c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000019  00000000  00000000  00039d57  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  00039d70  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006c48d  00000000  00000000  0003eee7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08006d44 l    d  .rodata	00000000 .rodata
08006dd8 l    d  .rwdata	00000000 .rwdata
0800a2b0 l    d  .bss	00000000 .bss
0800a440 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
0800a2dc l     O .bss	0000001c binarr.3185
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
08001a14 l     F .text	00000008 __fp_unlock
08001a28 l     F .text	0000019c __sinit.part.1
08001bc4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08006dd8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800451c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08004628 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08004654 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08004740 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08004820 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800490c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08004ae0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08008834 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08004d5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08004e90 l     F .text	00000034 alt_dev_reg
080077ac l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08005168 l     F .text	0000020c altera_avalon_jtag_uart_irq
08005374 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08005c78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080060ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800622c l     F .text	0000003c alt_get_errno
08006268 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800a2d8 g     O .bss	00000004 alt_instruction_exception_handler
08000290 g     F .text	000000a4 decToBinary
08004468 g     F .text	00000054 _isatty_r
08004a1c g     F .text	0000007c alt_main
0800182c g     F .text	000000c0 _puts_r
0800a340 g     O .bss	00000100 alt_irq
08004190 g     F .text	00000060 _lseek_r
08008844 g       *ABS*	00000000 __flash_rwdata_start
0800a440 g       *ABS*	00000000 __alt_heap_start
08003744 g     F .text	0000005c __sseek
08001d64 g     F .text	00000010 __sinit
08001bcc g     F .text	00000068 __sfmoreglue
08004abc g     F .text	00000024 __malloc_unlock
08002e30 g     F .text	0000015c memmove
08001d4c g     F .text	00000018 _cleanup
08006624 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800440c g     F .text	0000005c _fstat_r
0800a2bc g     O .bss	00000004 errno
080036c0 g     F .text	00000008 __seofread
0800a2c4 g     O .bss	00000004 alt_argv
0801080c g       *ABS*	00000000 _gp
08004d2c g     F .text	00000030 usleep
0800762c g     O .rwdata	00000180 alt_fd_list
08000eb0 g     F .text	000001e0 randLights
08006648 g     F .text	00000090 alt_find_dev
08002ce8 g     F .text	00000148 memcpy
08001a1c g     F .text	0000000c _cleanup_r
080061b0 g     F .text	0000007c alt_io_redirect
08006d44 g       *ABS*	00000000 __DTOR_END__
080018ec g     F .text	00000014 puts
08006914 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800556c g     F .text	0000021c altera_avalon_jtag_uart_read
08001770 g     F .text	00000064 .hidden __udivsi3
0800477c g     F .text	000000a4 isatty
08006884 g     F .text	00000090 alt_icache_flush
0800a2b8 g     O .bss	00000004 __malloc_top_pad
08001db4 g     F .text	000004bc __sfvwrite_r
08003618 g     F .text	00000054 _sbrk_r
080043ac g     F .text	00000060 _read_r
0800882c g     O .rwdata	00000004 alt_max_fd
080039b0 g     F .text	000000f0 _fclose_r
08003d2c g     F .text	00000030 fflush
0800a2b4 g     O .bss	00000004 __malloc_max_sbrked_mem
08004948 g     F .text	000000d4 lseek
0800880c g     O .rwdata	00000004 _global_impure_ptr
080030b4 g     F .text	00000564 _realloc_r
0800a440 g       *ABS*	00000000 __bss_end
08005ffc g     F .text	000000f0 alt_iic_isr_register
0800651c g     F .text	00000108 alt_tick
08001d84 g     F .text	00000018 __fp_lock_all
08005fb0 g     F .text	0000004c alt_ic_irq_enabled
0800a320 g     O .bss	00000020 hexCount
08006480 g     F .text	0000009c alt_alarm_stop
0800a2cc g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08007604 g     O .rwdata	00000028 alt_dev_null
08005c30 g     F .text	00000048 alt_dcache_flush_all
08008844 g       *ABS*	00000000 __ram_rwdata_end
08008824 g     O .rwdata	00000008 alt_dev_list
08004d98 g     F .text	000000f8 write
08006dd8 g       *ABS*	00000000 __ram_rodata_end
08004690 g     F .text	000000b0 fstat
080017d4 g     F .text	00000058 .hidden __umodsi3
0800a440 g       *ABS*	00000000 end
080050a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08006d44 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08005788 g     F .text	00000224 altera_avalon_jtag_uart_write
08001d74 g     F .text	00000004 __sfp_lock_acquire
08002c04 g     F .text	000000e4 memchr
08003e80 g     F .text	00000310 _free_r
08006b90 g     F .text	00000180 __call_exitprocs
08008814 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
0800a2d0 g     O .bss	00000004 _alt_tick_rate
08001918 g     F .text	00000064 rand
0800a2d4 g     O .bss	00000004 _alt_nticks
08004b1c g     F .text	000000fc read
08004efc g     F .text	00000048 alt_sys_init
08006a78 g     F .text	00000118 __register_exitproc
08005414 g     F .text	00000068 altera_avalon_jtag_uart_close
08006dd8 g       *ABS*	00000000 __ram_rwdata_start
08006d44 g       *ABS*	00000000 __ram_rodata_start
0800a2f8 g     O .bss	00000028 __malloc_current_mallinfo
08004f44 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080067e0 g     F .text	000000a4 alt_get_fd
08005ad8 g     F .text	00000158 alt_busy_sleep
0800395c g     F .text	00000054 _close_r
080069fc g     F .text	0000007c memcmp
08005004 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800a440 g       *ABS*	00000000 __alt_stack_base
08005054 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001090 g     F .text	000003ec patternLights
08003808 g     F .text	00000154 __swsetup_r
08001c34 g     F .text	00000118 __sfp
080071fc g     O .rwdata	00000408 __malloc_av_
08001d80 g     F .text	00000004 __sinit_lock_release
0800366c g     F .text	00000054 __sread
080066d8 g     F .text	00000108 alt_find_file
08005cb4 g     F .text	000000a4 alt_dev_llist_insert
08004a98 g     F .text	00000024 __malloc_lock
08004c7c g     F .text	000000b0 sbrk
08003cd0 g     F .text	0000005c _fflush_r
0800a2b0 g       *ABS*	00000000 __bss_start
08002f8c g     F .text	00000128 memset
0800147c g     F .text	000001fc main
0800a2c8 g     O .bss	00000004 alt_envp
0800a2b0 g     O .bss	00000004 __malloc_max_total_mem
08004fa4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001900 g     F .text	00000018 srand
080037a0 g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08003aa0 g     F .text	00000014 fclose
080023f8 g     F .text	0000080c _malloc_r
08008830 g     O .rwdata	00000004 alt_errno
08002270 g     F .text	000000c4 _fwalk
08001678 g     F .text	00000084 .hidden __divsi3
08003d5c g     F .text	00000124 _malloc_trim_r
08006d44 g       *ABS*	00000000 __CTOR_END__
08006d44 g       *ABS*	00000000 __flash_rodata_start
08006d44 g       *ABS*	00000000 __DTOR_LIST__
08000334 g     F .text	00000b7c count
08004ec4 g     F .text	00000038 alt_irq_init
08004c18 g     F .text	00000064 alt_release_fd
080069b0 g     F .text	00000014 atexit
080037a8 g     F .text	00000060 _write_r
08008810 g     O .rwdata	00000004 _impure_ptr
0800a2c0 g     O .bss	00000004 alt_argc
08003ab4 g     F .text	0000021c __sflush_r
08005db8 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08001d9c g     F .text	00000018 __fp_unlock_all
0800881c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08005e4c g     F .text	00000050 alt_ic_isr_register
08008844 g       *ABS*	00000000 _edata
0800a440 g       *ABS*	00000000 _end
08000244 g       *ABS*	00000000 __ram_exceptions_end
0800547c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08005f24 g     F .text	0000008c alt_ic_irq_disable
080036c8 g     F .text	0000007c __swrite
08008818 g     O .rwdata	00000004 __malloc_trim_threshold
080069c4 g     F .text	00000038 exit
08002334 g     F .text	000000c4 _fwalk_reent
080016fc g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08001d78 g     F .text	00000004 __sfp_lock_release
08006d10 g     F .text	00000034 _exit
080059ac g     F .text	0000012c alt_alarm_start
080044bc g     F .text	00000060 .hidden __muldi3
080041f0 g     F .text	000001bc __smakebuf_r
0800197c g     F .text	00000098 strlen
0800632c g     F .text	00000154 open
08005e18 g     F .text	00000034 alt_icache_flush_all
08008838 g     O .rwdata	00000004 alt_priority_mask
08005e9c g     F .text	00000088 alt_ic_irq_enable
0800883c g     O .rwdata	00000008 alt_alarm_list
08005d58 g     F .text	00000060 _do_ctors
08004558 g     F .text	000000d0 close
08004888 g     F .text	00000084 alt_load
08001d7c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10a8d004 	addi	r2,r2,-23744
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10a8d004 	addi	r2,r2,-23744
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6b317 	ldw	r2,-25908(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6b317 	ldw	r2,-25908(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d6820314 	ori	gp,gp,2060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	10a8ac14 	ori	r2,r2,41648

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18e91014 	ori	r3,r3,42048

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	80048880 	call	8004888 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	8004a1c0 	call	8004a1c <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <decToBinary>:
#define SEVEN 0b1111000
#define EIGHT 0b0000000
#define NINE  0b0010000

// Function that converts a decimal to a binary
int* decToBinary (int n) {
 8000290:	defffc04 	addi	sp,sp,-16
 8000294:	df000315 	stw	fp,12(sp)
 8000298:	df000304 	addi	fp,sp,12
 800029c:	e13fff15 	stw	r4,-4(fp)
	static int binarr[7];
	for (int i = 7; i >= 0; i--) {
 80002a0:	008001c4 	movi	r2,7
 80002a4:	e0bffd15 	stw	r2,-12(fp)
 80002a8:	00001a06 	br	8000314 <decToBinary+0x84>
		int k = n >> i;
 80002ac:	e0ffff17 	ldw	r3,-4(fp)
 80002b0:	e0bffd17 	ldw	r2,-12(fp)
 80002b4:	1885d83a 	sra	r2,r3,r2
 80002b8:	e0bffe15 	stw	r2,-8(fp)
	if (k & 1) binarr[i] = 1;
 80002bc:	e0bffe17 	ldw	r2,-8(fp)
 80002c0:	1080004c 	andi	r2,r2,1
 80002c4:	10000926 	beq	r2,zero,80002ec <decToBinary+0x5c>
 80002c8:	00820074 	movhi	r2,2049
 80002cc:	10a8b704 	addi	r2,r2,-23844
 80002d0:	e0fffd17 	ldw	r3,-12(fp)
 80002d4:	18c7883a 	add	r3,r3,r3
 80002d8:	18c7883a 	add	r3,r3,r3
 80002dc:	10c5883a 	add	r2,r2,r3
 80002e0:	00c00044 	movi	r3,1
 80002e4:	10c00015 	stw	r3,0(r2)
 80002e8:	00000706 	br	8000308 <decToBinary+0x78>
	else binarr[i] = 0;
 80002ec:	00820074 	movhi	r2,2049
 80002f0:	10a8b704 	addi	r2,r2,-23844
 80002f4:	e0fffd17 	ldw	r3,-12(fp)
 80002f8:	18c7883a 	add	r3,r3,r3
 80002fc:	18c7883a 	add	r3,r3,r3
 8000300:	10c5883a 	add	r2,r2,r3
 8000304:	10000015 	stw	zero,0(r2)
#define NINE  0b0010000

// Function that converts a decimal to a binary
int* decToBinary (int n) {
	static int binarr[7];
	for (int i = 7; i >= 0; i--) {
 8000308:	e0bffd17 	ldw	r2,-12(fp)
 800030c:	10bfffc4 	addi	r2,r2,-1
 8000310:	e0bffd15 	stw	r2,-12(fp)
 8000314:	e0bffd17 	ldw	r2,-12(fp)
 8000318:	103fe40e 	bge	r2,zero,80002ac <decToBinary+0x1c>
		int k = n >> i;
	if (k & 1) binarr[i] = 1;
	else binarr[i] = 0;
	}
	return binarr;
 800031c:	00820074 	movhi	r2,2049
 8000320:	10a8b704 	addi	r2,r2,-23844
}
 8000324:	e037883a 	mov	sp,fp
 8000328:	df000017 	ldw	fp,0(sp)
 800032c:	dec00104 	addi	sp,sp,4
 8000330:	f800283a 	ret

08000334 <count>:

// storage for the present state in the hex display count
int hexCount[ 8 ];
// counting function for the hex disylays
void count( void )
{
 8000334:	deffff04 	addi	sp,sp,-4
 8000338:	df000015 	stw	fp,0(sp)
 800033c:	d839883a 	mov	fp,sp
	switch ( hexCount[ 0 ] )
 8000340:	00820074 	movhi	r2,2049
 8000344:	10a8c804 	addi	r2,r2,-23776
 8000348:	10800017 	ldw	r2,0(r2)
 800034c:	10c002e8 	cmpgeui	r3,r2,11
 8000350:	1800941e 	bne	r3,zero,80005a4 <count+0x270>
 8000354:	100690ba 	slli	r3,r2,2
 8000358:	00820034 	movhi	r2,2048
 800035c:	1080db04 	addi	r2,r2,876
 8000360:	1885883a 	add	r2,r3,r2
 8000364:	10800017 	ldw	r2,0(r2)
 8000368:	1000683a 	jmp	r2
 800036c:	08000398 	cmpnei	zero,at,14
 8000370:	080003c8 	cmpgei	zero,at,15
 8000374:	080003f8 	rdprs	zero,at,15
 8000378:	08000428 	cmpgeui	zero,at,16
 800037c:	08000458 	cmpnei	zero,at,17
 8000380:	08000488 	cmpgei	zero,at,18
 8000384:	080004b8 	rdprs	zero,at,18
 8000388:	080004e8 	cmpgeui	zero,at,19
 800038c:	08000518 	cmpnei	zero,at,20
 8000390:	08000548 	cmpgei	zero,at,21
 8000394:	08000578 	rdprs	zero,at,21
	{
		case 0:
			hexCount[ 0 ]++;
 8000398:	00820074 	movhi	r2,2049
 800039c:	10a8c804 	addi	r2,r2,-23776
 80003a0:	10800017 	ldw	r2,0(r2)
 80003a4:	10c00044 	addi	r3,r2,1
 80003a8:	00820074 	movhi	r2,2049
 80003ac:	10a8c804 	addi	r2,r2,-23776
 80003b0:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, ZERO );
 80003b4:	00c01004 	movi	r3,64
 80003b8:	00840034 	movhi	r2,4096
 80003bc:	10841c04 	addi	r2,r2,4208
 80003c0:	10c00035 	stwio	r3,0(r2)
            break;
 80003c4:	00007706 	br	80005a4 <count+0x270>
		case 1:
			hexCount[ 0 ]++;
 80003c8:	00820074 	movhi	r2,2049
 80003cc:	10a8c804 	addi	r2,r2,-23776
 80003d0:	10800017 	ldw	r2,0(r2)
 80003d4:	10c00044 	addi	r3,r2,1
 80003d8:	00820074 	movhi	r2,2049
 80003dc:	10a8c804 	addi	r2,r2,-23776
 80003e0:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, ONE );
 80003e4:	00c01e44 	movi	r3,121
 80003e8:	00840034 	movhi	r2,4096
 80003ec:	10841c04 	addi	r2,r2,4208
 80003f0:	10c00035 	stwio	r3,0(r2)
            break;
 80003f4:	00006b06 	br	80005a4 <count+0x270>
		case 2:
			hexCount[ 0 ]++;
 80003f8:	00820074 	movhi	r2,2049
 80003fc:	10a8c804 	addi	r2,r2,-23776
 8000400:	10800017 	ldw	r2,0(r2)
 8000404:	10c00044 	addi	r3,r2,1
 8000408:	00820074 	movhi	r2,2049
 800040c:	10a8c804 	addi	r2,r2,-23776
 8000410:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, TWO );
 8000414:	00c00904 	movi	r3,36
 8000418:	00840034 	movhi	r2,4096
 800041c:	10841c04 	addi	r2,r2,4208
 8000420:	10c00035 	stwio	r3,0(r2)
            break;
 8000424:	00005f06 	br	80005a4 <count+0x270>
		case 3:
			hexCount[ 0 ]++;
 8000428:	00820074 	movhi	r2,2049
 800042c:	10a8c804 	addi	r2,r2,-23776
 8000430:	10800017 	ldw	r2,0(r2)
 8000434:	10c00044 	addi	r3,r2,1
 8000438:	00820074 	movhi	r2,2049
 800043c:	10a8c804 	addi	r2,r2,-23776
 8000440:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, THREE );
 8000444:	00c00c04 	movi	r3,48
 8000448:	00840034 	movhi	r2,4096
 800044c:	10841c04 	addi	r2,r2,4208
 8000450:	10c00035 	stwio	r3,0(r2)
            break;
 8000454:	00005306 	br	80005a4 <count+0x270>
		case 4:
			hexCount[ 0 ]++;
 8000458:	00820074 	movhi	r2,2049
 800045c:	10a8c804 	addi	r2,r2,-23776
 8000460:	10800017 	ldw	r2,0(r2)
 8000464:	10c00044 	addi	r3,r2,1
 8000468:	00820074 	movhi	r2,2049
 800046c:	10a8c804 	addi	r2,r2,-23776
 8000470:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, FOUR );
 8000474:	00c00644 	movi	r3,25
 8000478:	00840034 	movhi	r2,4096
 800047c:	10841c04 	addi	r2,r2,4208
 8000480:	10c00035 	stwio	r3,0(r2)
            break;
 8000484:	00004706 	br	80005a4 <count+0x270>
		case 5:
			hexCount[ 0 ]++;
 8000488:	00820074 	movhi	r2,2049
 800048c:	10a8c804 	addi	r2,r2,-23776
 8000490:	10800017 	ldw	r2,0(r2)
 8000494:	10c00044 	addi	r3,r2,1
 8000498:	00820074 	movhi	r2,2049
 800049c:	10a8c804 	addi	r2,r2,-23776
 80004a0:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, FIVE );
 80004a4:	00c00484 	movi	r3,18
 80004a8:	00840034 	movhi	r2,4096
 80004ac:	10841c04 	addi	r2,r2,4208
 80004b0:	10c00035 	stwio	r3,0(r2)
            break;
 80004b4:	00003b06 	br	80005a4 <count+0x270>
		case 6:
			hexCount[ 0 ]++;
 80004b8:	00820074 	movhi	r2,2049
 80004bc:	10a8c804 	addi	r2,r2,-23776
 80004c0:	10800017 	ldw	r2,0(r2)
 80004c4:	10c00044 	addi	r3,r2,1
 80004c8:	00820074 	movhi	r2,2049
 80004cc:	10a8c804 	addi	r2,r2,-23776
 80004d0:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, SIX );
 80004d4:	00c00084 	movi	r3,2
 80004d8:	00840034 	movhi	r2,4096
 80004dc:	10841c04 	addi	r2,r2,4208
 80004e0:	10c00035 	stwio	r3,0(r2)
            break;
 80004e4:	00002f06 	br	80005a4 <count+0x270>
		case 7:
			hexCount[ 0 ]++;
 80004e8:	00820074 	movhi	r2,2049
 80004ec:	10a8c804 	addi	r2,r2,-23776
 80004f0:	10800017 	ldw	r2,0(r2)
 80004f4:	10c00044 	addi	r3,r2,1
 80004f8:	00820074 	movhi	r2,2049
 80004fc:	10a8c804 	addi	r2,r2,-23776
 8000500:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, SEVEN );
 8000504:	00c01e04 	movi	r3,120
 8000508:	00840034 	movhi	r2,4096
 800050c:	10841c04 	addi	r2,r2,4208
 8000510:	10c00035 	stwio	r3,0(r2)
            break;
 8000514:	00002306 	br	80005a4 <count+0x270>
		case 8:
			hexCount[ 0 ]++;
 8000518:	00820074 	movhi	r2,2049
 800051c:	10a8c804 	addi	r2,r2,-23776
 8000520:	10800017 	ldw	r2,0(r2)
 8000524:	10c00044 	addi	r3,r2,1
 8000528:	00820074 	movhi	r2,2049
 800052c:	10a8c804 	addi	r2,r2,-23776
 8000530:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, EIGHT );
 8000534:	0007883a 	mov	r3,zero
 8000538:	00840034 	movhi	r2,4096
 800053c:	10841c04 	addi	r2,r2,4208
 8000540:	10c00035 	stwio	r3,0(r2)
            break;
 8000544:	00001706 	br	80005a4 <count+0x270>
		case 9:
			hexCount[ 0 ]++;
 8000548:	00820074 	movhi	r2,2049
 800054c:	10a8c804 	addi	r2,r2,-23776
 8000550:	10800017 	ldw	r2,0(r2)
 8000554:	10c00044 	addi	r3,r2,1
 8000558:	00820074 	movhi	r2,2049
 800055c:	10a8c804 	addi	r2,r2,-23776
 8000560:	10c00015 	stw	r3,0(r2)
			IOWR_ALTERA_AVALON_PIO_DATA( HEX0_BASE, NINE );
 8000564:	00c00404 	movi	r3,16
 8000568:	00840034 	movhi	r2,4096
 800056c:	10841c04 	addi	r2,r2,4208
 8000570:	10c00035 	stwio	r3,0(r2)
            break;
 8000574:	00000b06 	br	80005a4 <count+0x270>
		case 10:
			hexCount[ 0 ] = 0;
 8000578:	00820074 	movhi	r2,2049
 800057c:	10a8c804 	addi	r2,r2,-23776
 8000580:	10000015 	stw	zero,0(r2)
			hexCount[ 1 ]++;
 8000584:	00820074 	movhi	r2,2049
 8000588:	10a8c804 	addi	r2,r2,-23776
 800058c:	10800117 	ldw	r2,4(r2)
 8000590:	10c00044 	addi	r3,r2,1
 8000594:	00820074 	movhi	r2,2049
 8000598:	10a8c804 	addi	r2,r2,-23776
 800059c:	10c00115 	stw	r3,4(r2)
			break;
 80005a0:	0001883a 	nop
	}
	
	switch ( hexCount[ 1 ] )
 80005a4:	00820074 	movhi	r2,2049
 80005a8:	10a8c804 	addi	r2,r2,-23776
 80005ac:	10800117 	ldw	r2,4(r2)
 80005b0:	10c002e8 	cmpgeui	r3,r2,11
 80005b4:	18004e1e 	bne	r3,zero,80006f0 <count+0x3bc>
 80005b8:	100690ba 	slli	r3,r2,2
 80005bc:	00820034 	movhi	r2,2048
 80005c0:	10817404 	addi	r2,r2,1488
 80005c4:	1885883a 	add	r2,r3,r2
 80005c8:	10800017 	ldw	r2,0(r2)
 80005cc:	1000683a 	jmp	r2
 80005d0:	080005fc 	xorhi	zero,at,23
 80005d4:	08000610 	cmplti	zero,at,24
 80005d8:	08000624 	muli	zero,at,24
 80005dc:	08000638 	rdprs	zero,at,24
 80005e0:	0800064c 	andi	zero,at,25
 80005e4:	08000660 	cmpeqi	zero,at,25
 80005e8:	08000674 	orhi	zero,at,25
 80005ec:	08000688 	cmpgei	zero,at,26
 80005f0:	0800069c 	xori	zero,at,26
 80005f4:	080006b0 	cmpltui	zero,at,26
 80005f8:	080006c4 	addi	zero,at,27
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, ZERO );
 80005fc:	00c01004 	movi	r3,64
 8000600:	00840034 	movhi	r2,4096
 8000604:	10841804 	addi	r2,r2,4192
 8000608:	10c00035 	stwio	r3,0(r2)
			break;
 800060c:	00003806 	br	80006f0 <count+0x3bc>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, ONE );
 8000610:	00c01e44 	movi	r3,121
 8000614:	00840034 	movhi	r2,4096
 8000618:	10841804 	addi	r2,r2,4192
 800061c:	10c00035 	stwio	r3,0(r2)
            break;
 8000620:	00003306 	br	80006f0 <count+0x3bc>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, TWO );
 8000624:	00c00904 	movi	r3,36
 8000628:	00840034 	movhi	r2,4096
 800062c:	10841804 	addi	r2,r2,4192
 8000630:	10c00035 	stwio	r3,0(r2)
            break;
 8000634:	00002e06 	br	80006f0 <count+0x3bc>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, THREE );
 8000638:	00c00c04 	movi	r3,48
 800063c:	00840034 	movhi	r2,4096
 8000640:	10841804 	addi	r2,r2,4192
 8000644:	10c00035 	stwio	r3,0(r2)
            break;
 8000648:	00002906 	br	80006f0 <count+0x3bc>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, FOUR );
 800064c:	00c00644 	movi	r3,25
 8000650:	00840034 	movhi	r2,4096
 8000654:	10841804 	addi	r2,r2,4192
 8000658:	10c00035 	stwio	r3,0(r2)
            break;
 800065c:	00002406 	br	80006f0 <count+0x3bc>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, FIVE );
 8000660:	00c00484 	movi	r3,18
 8000664:	00840034 	movhi	r2,4096
 8000668:	10841804 	addi	r2,r2,4192
 800066c:	10c00035 	stwio	r3,0(r2)
            break;
 8000670:	00001f06 	br	80006f0 <count+0x3bc>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, SIX );
 8000674:	00c00084 	movi	r3,2
 8000678:	00840034 	movhi	r2,4096
 800067c:	10841804 	addi	r2,r2,4192
 8000680:	10c00035 	stwio	r3,0(r2)
            break;
 8000684:	00001a06 	br	80006f0 <count+0x3bc>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, SEVEN );
 8000688:	00c01e04 	movi	r3,120
 800068c:	00840034 	movhi	r2,4096
 8000690:	10841804 	addi	r2,r2,4192
 8000694:	10c00035 	stwio	r3,0(r2)
            break;
 8000698:	00001506 	br	80006f0 <count+0x3bc>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, EIGHT );
 800069c:	0007883a 	mov	r3,zero
 80006a0:	00840034 	movhi	r2,4096
 80006a4:	10841804 	addi	r2,r2,4192
 80006a8:	10c00035 	stwio	r3,0(r2)
            break;
 80006ac:	00001006 	br	80006f0 <count+0x3bc>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX1_BASE, NINE );
 80006b0:	00c00404 	movi	r3,16
 80006b4:	00840034 	movhi	r2,4096
 80006b8:	10841804 	addi	r2,r2,4192
 80006bc:	10c00035 	stwio	r3,0(r2)
            break;
 80006c0:	00000b06 	br	80006f0 <count+0x3bc>
		case 10:
			hexCount[ 1 ] = 0;
 80006c4:	00820074 	movhi	r2,2049
 80006c8:	10a8c804 	addi	r2,r2,-23776
 80006cc:	10000115 	stw	zero,4(r2)
			hexCount[ 2 ]++;
 80006d0:	00820074 	movhi	r2,2049
 80006d4:	10a8c804 	addi	r2,r2,-23776
 80006d8:	10800217 	ldw	r2,8(r2)
 80006dc:	10c00044 	addi	r3,r2,1
 80006e0:	00820074 	movhi	r2,2049
 80006e4:	10a8c804 	addi	r2,r2,-23776
 80006e8:	10c00215 	stw	r3,8(r2)
			break;
 80006ec:	0001883a 	nop

	}
	
	switch ( hexCount[ 2 ] )
 80006f0:	00820074 	movhi	r2,2049
 80006f4:	10a8c804 	addi	r2,r2,-23776
 80006f8:	10800217 	ldw	r2,8(r2)
 80006fc:	10c002e8 	cmpgeui	r3,r2,11
 8000700:	18004e1e 	bne	r3,zero,800083c <count+0x508>
 8000704:	100690ba 	slli	r3,r2,2
 8000708:	00820034 	movhi	r2,2048
 800070c:	1081c704 	addi	r2,r2,1820
 8000710:	1885883a 	add	r2,r3,r2
 8000714:	10800017 	ldw	r2,0(r2)
 8000718:	1000683a 	jmp	r2
 800071c:	08000748 	cmpgei	zero,at,29
 8000720:	0800075c 	xori	zero,at,29
 8000724:	08000770 	cmpltui	zero,at,29
 8000728:	08000784 	addi	zero,at,30
 800072c:	08000798 	cmpnei	zero,at,30
 8000730:	080007ac 	andhi	zero,at,30
 8000734:	080007c0 	call	80007c <__alt_mem_new_sdram_controller_0-0x77fff84>
 8000738:	080007d4 	ori	zero,at,31
 800073c:	080007e8 	cmpgeui	zero,at,31
 8000740:	080007fc 	xorhi	zero,at,31
 8000744:	08000810 	cmplti	zero,at,32
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, ZERO );
 8000748:	00c01004 	movi	r3,64
 800074c:	00840034 	movhi	r2,4096
 8000750:	10841404 	addi	r2,r2,4176
 8000754:	10c00035 	stwio	r3,0(r2)
            break;
 8000758:	00003806 	br	800083c <count+0x508>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, ONE );
 800075c:	00c01e44 	movi	r3,121
 8000760:	00840034 	movhi	r2,4096
 8000764:	10841404 	addi	r2,r2,4176
 8000768:	10c00035 	stwio	r3,0(r2)
            break;
 800076c:	00003306 	br	800083c <count+0x508>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, TWO );
 8000770:	00c00904 	movi	r3,36
 8000774:	00840034 	movhi	r2,4096
 8000778:	10841404 	addi	r2,r2,4176
 800077c:	10c00035 	stwio	r3,0(r2)
            break;
 8000780:	00002e06 	br	800083c <count+0x508>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, THREE );
 8000784:	00c00c04 	movi	r3,48
 8000788:	00840034 	movhi	r2,4096
 800078c:	10841404 	addi	r2,r2,4176
 8000790:	10c00035 	stwio	r3,0(r2)
            break;
 8000794:	00002906 	br	800083c <count+0x508>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, FOUR );
 8000798:	00c00644 	movi	r3,25
 800079c:	00840034 	movhi	r2,4096
 80007a0:	10841404 	addi	r2,r2,4176
 80007a4:	10c00035 	stwio	r3,0(r2)
            break;
 80007a8:	00002406 	br	800083c <count+0x508>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, FIVE );
 80007ac:	00c00484 	movi	r3,18
 80007b0:	00840034 	movhi	r2,4096
 80007b4:	10841404 	addi	r2,r2,4176
 80007b8:	10c00035 	stwio	r3,0(r2)
            break;
 80007bc:	00001f06 	br	800083c <count+0x508>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, SIX );
 80007c0:	00c00084 	movi	r3,2
 80007c4:	00840034 	movhi	r2,4096
 80007c8:	10841404 	addi	r2,r2,4176
 80007cc:	10c00035 	stwio	r3,0(r2)
            break;
 80007d0:	00001a06 	br	800083c <count+0x508>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, SEVEN );
 80007d4:	00c01e04 	movi	r3,120
 80007d8:	00840034 	movhi	r2,4096
 80007dc:	10841404 	addi	r2,r2,4176
 80007e0:	10c00035 	stwio	r3,0(r2)
            break;
 80007e4:	00001506 	br	800083c <count+0x508>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, EIGHT );
 80007e8:	0007883a 	mov	r3,zero
 80007ec:	00840034 	movhi	r2,4096
 80007f0:	10841404 	addi	r2,r2,4176
 80007f4:	10c00035 	stwio	r3,0(r2)
   			break;
 80007f8:	00001006 	br	800083c <count+0x508>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX2_BASE, NINE );
 80007fc:	00c00404 	movi	r3,16
 8000800:	00840034 	movhi	r2,4096
 8000804:	10841404 	addi	r2,r2,4176
 8000808:	10c00035 	stwio	r3,0(r2)
			break;
 800080c:	00000b06 	br	800083c <count+0x508>
		case 10:
			hexCount[ 2 ] = 0;
 8000810:	00820074 	movhi	r2,2049
 8000814:	10a8c804 	addi	r2,r2,-23776
 8000818:	10000215 	stw	zero,8(r2)
			hexCount[ 3 ]++;
 800081c:	00820074 	movhi	r2,2049
 8000820:	10a8c804 	addi	r2,r2,-23776
 8000824:	10800317 	ldw	r2,12(r2)
 8000828:	10c00044 	addi	r3,r2,1
 800082c:	00820074 	movhi	r2,2049
 8000830:	10a8c804 	addi	r2,r2,-23776
 8000834:	10c00315 	stw	r3,12(r2)
            break;
 8000838:	0001883a 	nop
	}
	
	switch ( hexCount[ 3 ] )
 800083c:	00820074 	movhi	r2,2049
 8000840:	10a8c804 	addi	r2,r2,-23776
 8000844:	10800317 	ldw	r2,12(r2)
 8000848:	10c002e8 	cmpgeui	r3,r2,11
 800084c:	18004e1e 	bne	r3,zero,8000988 <count+0x654>
 8000850:	100690ba 	slli	r3,r2,2
 8000854:	00820034 	movhi	r2,2048
 8000858:	10821a04 	addi	r2,r2,2152
 800085c:	1885883a 	add	r2,r3,r2
 8000860:	10800017 	ldw	r2,0(r2)
 8000864:	1000683a 	jmp	r2
 8000868:	08000894 	ori	zero,at,34
 800086c:	080008a8 	cmpgeui	zero,at,34
 8000870:	080008bc 	xorhi	zero,at,34
 8000874:	080008d0 	cmplti	zero,at,35
 8000878:	080008e4 	muli	zero,at,35
 800087c:	080008f8 	rdprs	zero,at,35
 8000880:	0800090c 	andi	zero,at,36
 8000884:	08000920 	cmpeqi	zero,at,36
 8000888:	08000934 	orhi	zero,at,36
 800088c:	08000948 	cmpgei	zero,at,37
 8000890:	0800095c 	xori	zero,at,37
	{
		case 0:
			
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, ZERO );
 8000894:	00c01004 	movi	r3,64
 8000898:	00840034 	movhi	r2,4096
 800089c:	10841004 	addi	r2,r2,4160
 80008a0:	10c00035 	stwio	r3,0(r2)
            break;
 80008a4:	00003806 	br	8000988 <count+0x654>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, ONE );
 80008a8:	00c01e44 	movi	r3,121
 80008ac:	00840034 	movhi	r2,4096
 80008b0:	10841004 	addi	r2,r2,4160
 80008b4:	10c00035 	stwio	r3,0(r2)
            break;
 80008b8:	00003306 	br	8000988 <count+0x654>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, TWO );
 80008bc:	00c00904 	movi	r3,36
 80008c0:	00840034 	movhi	r2,4096
 80008c4:	10841004 	addi	r2,r2,4160
 80008c8:	10c00035 	stwio	r3,0(r2)
            break;
 80008cc:	00002e06 	br	8000988 <count+0x654>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, THREE );
 80008d0:	00c00c04 	movi	r3,48
 80008d4:	00840034 	movhi	r2,4096
 80008d8:	10841004 	addi	r2,r2,4160
 80008dc:	10c00035 	stwio	r3,0(r2)
            break;
 80008e0:	00002906 	br	8000988 <count+0x654>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, FOUR );
 80008e4:	00c00644 	movi	r3,25
 80008e8:	00840034 	movhi	r2,4096
 80008ec:	10841004 	addi	r2,r2,4160
 80008f0:	10c00035 	stwio	r3,0(r2)
            break;
 80008f4:	00002406 	br	8000988 <count+0x654>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, FIVE );
 80008f8:	00c00484 	movi	r3,18
 80008fc:	00840034 	movhi	r2,4096
 8000900:	10841004 	addi	r2,r2,4160
 8000904:	10c00035 	stwio	r3,0(r2)
            break;
 8000908:	00001f06 	br	8000988 <count+0x654>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, SIX );
 800090c:	00c00084 	movi	r3,2
 8000910:	00840034 	movhi	r2,4096
 8000914:	10841004 	addi	r2,r2,4160
 8000918:	10c00035 	stwio	r3,0(r2)
            break;
 800091c:	00001a06 	br	8000988 <count+0x654>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, SEVEN );
 8000920:	00c01e04 	movi	r3,120
 8000924:	00840034 	movhi	r2,4096
 8000928:	10841004 	addi	r2,r2,4160
 800092c:	10c00035 	stwio	r3,0(r2)
            break;
 8000930:	00001506 	br	8000988 <count+0x654>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, EIGHT );
 8000934:	0007883a 	mov	r3,zero
 8000938:	00840034 	movhi	r2,4096
 800093c:	10841004 	addi	r2,r2,4160
 8000940:	10c00035 	stwio	r3,0(r2)
            break;
 8000944:	00001006 	br	8000988 <count+0x654>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX3_BASE, NINE );
 8000948:	00c00404 	movi	r3,16
 800094c:	00840034 	movhi	r2,4096
 8000950:	10841004 	addi	r2,r2,4160
 8000954:	10c00035 	stwio	r3,0(r2)
			break;
 8000958:	00000b06 	br	8000988 <count+0x654>
		case 10:
			hexCount[ 3 ] = 0;
 800095c:	00820074 	movhi	r2,2049
 8000960:	10a8c804 	addi	r2,r2,-23776
 8000964:	10000315 	stw	zero,12(r2)
			hexCount[ 4 ]++;
 8000968:	00820074 	movhi	r2,2049
 800096c:	10a8c804 	addi	r2,r2,-23776
 8000970:	10800417 	ldw	r2,16(r2)
 8000974:	10c00044 	addi	r3,r2,1
 8000978:	00820074 	movhi	r2,2049
 800097c:	10a8c804 	addi	r2,r2,-23776
 8000980:	10c00415 	stw	r3,16(r2)
            break;
 8000984:	0001883a 	nop
	}
	
	switch ( hexCount[ 4 ] )
 8000988:	00820074 	movhi	r2,2049
 800098c:	10a8c804 	addi	r2,r2,-23776
 8000990:	10800417 	ldw	r2,16(r2)
 8000994:	10c002e8 	cmpgeui	r3,r2,11
 8000998:	18004e1e 	bne	r3,zero,8000ad4 <count+0x7a0>
 800099c:	100690ba 	slli	r3,r2,2
 80009a0:	00820034 	movhi	r2,2048
 80009a4:	10826d04 	addi	r2,r2,2484
 80009a8:	1885883a 	add	r2,r3,r2
 80009ac:	10800017 	ldw	r2,0(r2)
 80009b0:	1000683a 	jmp	r2
 80009b4:	080009e0 	cmpeqi	zero,at,39
 80009b8:	080009f4 	orhi	zero,at,39
 80009bc:	08000a08 	cmpgei	zero,at,40
 80009c0:	08000a1c 	xori	zero,at,40
 80009c4:	08000a30 	cmpltui	zero,at,40
 80009c8:	08000a44 	addi	zero,at,41
 80009cc:	08000a58 	cmpnei	zero,at,41
 80009d0:	08000a6c 	andhi	zero,at,41
 80009d4:	08000a80 	call	8000a8 <__alt_mem_new_sdram_controller_0-0x77fff58>
 80009d8:	08000a94 	ori	zero,at,42
 80009dc:	08000aa8 	cmpgeui	zero,at,42
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, ZERO );
 80009e0:	00c01004 	movi	r3,64
 80009e4:	00840034 	movhi	r2,4096
 80009e8:	10840c04 	addi	r2,r2,4144
 80009ec:	10c00035 	stwio	r3,0(r2)
            break;
 80009f0:	00003806 	br	8000ad4 <count+0x7a0>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, ONE );
 80009f4:	00c01e44 	movi	r3,121
 80009f8:	00840034 	movhi	r2,4096
 80009fc:	10840c04 	addi	r2,r2,4144
 8000a00:	10c00035 	stwio	r3,0(r2)
            break;
 8000a04:	00003306 	br	8000ad4 <count+0x7a0>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, TWO );
 8000a08:	00c00904 	movi	r3,36
 8000a0c:	00840034 	movhi	r2,4096
 8000a10:	10840c04 	addi	r2,r2,4144
 8000a14:	10c00035 	stwio	r3,0(r2)
            break;
 8000a18:	00002e06 	br	8000ad4 <count+0x7a0>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, THREE );
 8000a1c:	00c00c04 	movi	r3,48
 8000a20:	00840034 	movhi	r2,4096
 8000a24:	10840c04 	addi	r2,r2,4144
 8000a28:	10c00035 	stwio	r3,0(r2)
            break;
 8000a2c:	00002906 	br	8000ad4 <count+0x7a0>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, FOUR );
 8000a30:	00c00644 	movi	r3,25
 8000a34:	00840034 	movhi	r2,4096
 8000a38:	10840c04 	addi	r2,r2,4144
 8000a3c:	10c00035 	stwio	r3,0(r2)
            break;
 8000a40:	00002406 	br	8000ad4 <count+0x7a0>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, FIVE );
 8000a44:	00c00484 	movi	r3,18
 8000a48:	00840034 	movhi	r2,4096
 8000a4c:	10840c04 	addi	r2,r2,4144
 8000a50:	10c00035 	stwio	r3,0(r2)
            break;
 8000a54:	00001f06 	br	8000ad4 <count+0x7a0>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, SIX );
 8000a58:	00c00084 	movi	r3,2
 8000a5c:	00840034 	movhi	r2,4096
 8000a60:	10840c04 	addi	r2,r2,4144
 8000a64:	10c00035 	stwio	r3,0(r2)
            break;
 8000a68:	00001a06 	br	8000ad4 <count+0x7a0>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, SEVEN );
 8000a6c:	00c01e04 	movi	r3,120
 8000a70:	00840034 	movhi	r2,4096
 8000a74:	10840c04 	addi	r2,r2,4144
 8000a78:	10c00035 	stwio	r3,0(r2)
            break;
 8000a7c:	00001506 	br	8000ad4 <count+0x7a0>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, EIGHT );
 8000a80:	0007883a 	mov	r3,zero
 8000a84:	00840034 	movhi	r2,4096
 8000a88:	10840c04 	addi	r2,r2,4144
 8000a8c:	10c00035 	stwio	r3,0(r2)
            break;
 8000a90:	00001006 	br	8000ad4 <count+0x7a0>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX4_BASE, NINE );
 8000a94:	00c00404 	movi	r3,16
 8000a98:	00840034 	movhi	r2,4096
 8000a9c:	10840c04 	addi	r2,r2,4144
 8000aa0:	10c00035 	stwio	r3,0(r2)
			break;
 8000aa4:	00000b06 	br	8000ad4 <count+0x7a0>
		case 10:
			hexCount[ 4 ] = 0;
 8000aa8:	00820074 	movhi	r2,2049
 8000aac:	10a8c804 	addi	r2,r2,-23776
 8000ab0:	10000415 	stw	zero,16(r2)
			hexCount[ 5 ]++;
 8000ab4:	00820074 	movhi	r2,2049
 8000ab8:	10a8c804 	addi	r2,r2,-23776
 8000abc:	10800517 	ldw	r2,20(r2)
 8000ac0:	10c00044 	addi	r3,r2,1
 8000ac4:	00820074 	movhi	r2,2049
 8000ac8:	10a8c804 	addi	r2,r2,-23776
 8000acc:	10c00515 	stw	r3,20(r2)
            break;
 8000ad0:	0001883a 	nop
	}

	switch ( hexCount[ 5 ] )
 8000ad4:	00820074 	movhi	r2,2049
 8000ad8:	10a8c804 	addi	r2,r2,-23776
 8000adc:	10800517 	ldw	r2,20(r2)
 8000ae0:	10c002e8 	cmpgeui	r3,r2,11
 8000ae4:	18004e1e 	bne	r3,zero,8000c20 <count+0x8ec>
 8000ae8:	100690ba 	slli	r3,r2,2
 8000aec:	00820034 	movhi	r2,2048
 8000af0:	1082c004 	addi	r2,r2,2816
 8000af4:	1885883a 	add	r2,r3,r2
 8000af8:	10800017 	ldw	r2,0(r2)
 8000afc:	1000683a 	jmp	r2
 8000b00:	08000b2c 	andhi	zero,at,44
 8000b04:	08000b40 	call	8000b4 <__alt_mem_new_sdram_controller_0-0x77fff4c>
 8000b08:	08000b54 	ori	zero,at,45
 8000b0c:	08000b68 	cmpgeui	zero,at,45
 8000b10:	08000b7c 	xorhi	zero,at,45
 8000b14:	08000b90 	cmplti	zero,at,46
 8000b18:	08000ba4 	muli	zero,at,46
 8000b1c:	08000bb8 	rdprs	zero,at,46
 8000b20:	08000bcc 	andi	zero,at,47
 8000b24:	08000be0 	cmpeqi	zero,at,47
 8000b28:	08000bf4 	orhi	zero,at,47
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, ZERO );
 8000b2c:	00c01004 	movi	r3,64
 8000b30:	00840034 	movhi	r2,4096
 8000b34:	10840804 	addi	r2,r2,4128
 8000b38:	10c00035 	stwio	r3,0(r2)
            break;
 8000b3c:	00003806 	br	8000c20 <count+0x8ec>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, ONE );
 8000b40:	00c01e44 	movi	r3,121
 8000b44:	00840034 	movhi	r2,4096
 8000b48:	10840804 	addi	r2,r2,4128
 8000b4c:	10c00035 	stwio	r3,0(r2)
            break;
 8000b50:	00003306 	br	8000c20 <count+0x8ec>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, TWO );
 8000b54:	00c00904 	movi	r3,36
 8000b58:	00840034 	movhi	r2,4096
 8000b5c:	10840804 	addi	r2,r2,4128
 8000b60:	10c00035 	stwio	r3,0(r2)
            break;
 8000b64:	00002e06 	br	8000c20 <count+0x8ec>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, THREE );
 8000b68:	00c00c04 	movi	r3,48
 8000b6c:	00840034 	movhi	r2,4096
 8000b70:	10840804 	addi	r2,r2,4128
 8000b74:	10c00035 	stwio	r3,0(r2)
            break;
 8000b78:	00002906 	br	8000c20 <count+0x8ec>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, FOUR );
 8000b7c:	00c00644 	movi	r3,25
 8000b80:	00840034 	movhi	r2,4096
 8000b84:	10840804 	addi	r2,r2,4128
 8000b88:	10c00035 	stwio	r3,0(r2)
            break;
 8000b8c:	00002406 	br	8000c20 <count+0x8ec>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, FIVE );
 8000b90:	00c00484 	movi	r3,18
 8000b94:	00840034 	movhi	r2,4096
 8000b98:	10840804 	addi	r2,r2,4128
 8000b9c:	10c00035 	stwio	r3,0(r2)
            break;
 8000ba0:	00001f06 	br	8000c20 <count+0x8ec>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, SIX );
 8000ba4:	00c00084 	movi	r3,2
 8000ba8:	00840034 	movhi	r2,4096
 8000bac:	10840804 	addi	r2,r2,4128
 8000bb0:	10c00035 	stwio	r3,0(r2)
            break;
 8000bb4:	00001a06 	br	8000c20 <count+0x8ec>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, SEVEN );
 8000bb8:	00c01e04 	movi	r3,120
 8000bbc:	00840034 	movhi	r2,4096
 8000bc0:	10840804 	addi	r2,r2,4128
 8000bc4:	10c00035 	stwio	r3,0(r2)
            break;
 8000bc8:	00001506 	br	8000c20 <count+0x8ec>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, EIGHT );
 8000bcc:	0007883a 	mov	r3,zero
 8000bd0:	00840034 	movhi	r2,4096
 8000bd4:	10840804 	addi	r2,r2,4128
 8000bd8:	10c00035 	stwio	r3,0(r2)
            break;
 8000bdc:	00001006 	br	8000c20 <count+0x8ec>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX5_BASE, NINE );
 8000be0:	00c00404 	movi	r3,16
 8000be4:	00840034 	movhi	r2,4096
 8000be8:	10840804 	addi	r2,r2,4128
 8000bec:	10c00035 	stwio	r3,0(r2)
			break;
 8000bf0:	00000b06 	br	8000c20 <count+0x8ec>
		case 10:
			hexCount[ 5 ] = 0;
 8000bf4:	00820074 	movhi	r2,2049
 8000bf8:	10a8c804 	addi	r2,r2,-23776
 8000bfc:	10000515 	stw	zero,20(r2)
			hexCount[ 6 ]++;
 8000c00:	00820074 	movhi	r2,2049
 8000c04:	10a8c804 	addi	r2,r2,-23776
 8000c08:	10800617 	ldw	r2,24(r2)
 8000c0c:	10c00044 	addi	r3,r2,1
 8000c10:	00820074 	movhi	r2,2049
 8000c14:	10a8c804 	addi	r2,r2,-23776
 8000c18:	10c00615 	stw	r3,24(r2)
            break;
 8000c1c:	0001883a 	nop
	}

	switch ( hexCount[ 6 ] )
 8000c20:	00820074 	movhi	r2,2049
 8000c24:	10a8c804 	addi	r2,r2,-23776
 8000c28:	10800617 	ldw	r2,24(r2)
 8000c2c:	10c002e8 	cmpgeui	r3,r2,11
 8000c30:	18004e1e 	bne	r3,zero,8000d6c <count+0xa38>
 8000c34:	100690ba 	slli	r3,r2,2
 8000c38:	00820034 	movhi	r2,2048
 8000c3c:	10831304 	addi	r2,r2,3148
 8000c40:	1885883a 	add	r2,r3,r2
 8000c44:	10800017 	ldw	r2,0(r2)
 8000c48:	1000683a 	jmp	r2
 8000c4c:	08000c78 	rdprs	zero,at,49
 8000c50:	08000c8c 	andi	zero,at,50
 8000c54:	08000ca0 	cmpeqi	zero,at,50
 8000c58:	08000cb4 	orhi	zero,at,50
 8000c5c:	08000cc8 	cmpgei	zero,at,51
 8000c60:	08000cdc 	xori	zero,at,51
 8000c64:	08000cf0 	cmpltui	zero,at,51
 8000c68:	08000d04 	addi	zero,at,52
 8000c6c:	08000d18 	cmpnei	zero,at,52
 8000c70:	08000d2c 	andhi	zero,at,52
 8000c74:	08000d40 	call	8000d4 <__alt_mem_new_sdram_controller_0-0x77fff2c>
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, ZERO );
 8000c78:	00c01004 	movi	r3,64
 8000c7c:	00840034 	movhi	r2,4096
 8000c80:	10840404 	addi	r2,r2,4112
 8000c84:	10c00035 	stwio	r3,0(r2)
            break;
 8000c88:	00003806 	br	8000d6c <count+0xa38>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, ONE );
 8000c8c:	00c01e44 	movi	r3,121
 8000c90:	00840034 	movhi	r2,4096
 8000c94:	10840404 	addi	r2,r2,4112
 8000c98:	10c00035 	stwio	r3,0(r2)
            break;
 8000c9c:	00003306 	br	8000d6c <count+0xa38>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, TWO );
 8000ca0:	00c00904 	movi	r3,36
 8000ca4:	00840034 	movhi	r2,4096
 8000ca8:	10840404 	addi	r2,r2,4112
 8000cac:	10c00035 	stwio	r3,0(r2)
            break;
 8000cb0:	00002e06 	br	8000d6c <count+0xa38>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, THREE );
 8000cb4:	00c00c04 	movi	r3,48
 8000cb8:	00840034 	movhi	r2,4096
 8000cbc:	10840404 	addi	r2,r2,4112
 8000cc0:	10c00035 	stwio	r3,0(r2)
            break;
 8000cc4:	00002906 	br	8000d6c <count+0xa38>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, FOUR );
 8000cc8:	00c00644 	movi	r3,25
 8000ccc:	00840034 	movhi	r2,4096
 8000cd0:	10840404 	addi	r2,r2,4112
 8000cd4:	10c00035 	stwio	r3,0(r2)
            break;
 8000cd8:	00002406 	br	8000d6c <count+0xa38>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, FIVE );
 8000cdc:	00c00484 	movi	r3,18
 8000ce0:	00840034 	movhi	r2,4096
 8000ce4:	10840404 	addi	r2,r2,4112
 8000ce8:	10c00035 	stwio	r3,0(r2)
            break;
 8000cec:	00001f06 	br	8000d6c <count+0xa38>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, SIX );
 8000cf0:	00c00084 	movi	r3,2
 8000cf4:	00840034 	movhi	r2,4096
 8000cf8:	10840404 	addi	r2,r2,4112
 8000cfc:	10c00035 	stwio	r3,0(r2)
            break;
 8000d00:	00001a06 	br	8000d6c <count+0xa38>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, SEVEN );
 8000d04:	00c01e04 	movi	r3,120
 8000d08:	00840034 	movhi	r2,4096
 8000d0c:	10840404 	addi	r2,r2,4112
 8000d10:	10c00035 	stwio	r3,0(r2)
            break;
 8000d14:	00001506 	br	8000d6c <count+0xa38>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, EIGHT );
 8000d18:	0007883a 	mov	r3,zero
 8000d1c:	00840034 	movhi	r2,4096
 8000d20:	10840404 	addi	r2,r2,4112
 8000d24:	10c00035 	stwio	r3,0(r2)
            break;
 8000d28:	00001006 	br	8000d6c <count+0xa38>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX6_BASE, NINE );
 8000d2c:	00c00404 	movi	r3,16
 8000d30:	00840034 	movhi	r2,4096
 8000d34:	10840404 	addi	r2,r2,4112
 8000d38:	10c00035 	stwio	r3,0(r2)
			break;
 8000d3c:	00000b06 	br	8000d6c <count+0xa38>
		case 10:
			hexCount[ 6 ] = 0;
 8000d40:	00820074 	movhi	r2,2049
 8000d44:	10a8c804 	addi	r2,r2,-23776
 8000d48:	10000615 	stw	zero,24(r2)
			hexCount[ 7 ]++;
 8000d4c:	00820074 	movhi	r2,2049
 8000d50:	10a8c804 	addi	r2,r2,-23776
 8000d54:	10800717 	ldw	r2,28(r2)
 8000d58:	10c00044 	addi	r3,r2,1
 8000d5c:	00820074 	movhi	r2,2049
 8000d60:	10a8c804 	addi	r2,r2,-23776
 8000d64:	10c00715 	stw	r3,28(r2)
            break;
 8000d68:	0001883a 	nop
	}

	switch ( hexCount[ 7 ] )
 8000d6c:	00820074 	movhi	r2,2049
 8000d70:	10a8c804 	addi	r2,r2,-23776
 8000d74:	10800717 	ldw	r2,28(r2)
 8000d78:	10c002e8 	cmpgeui	r3,r2,11
 8000d7c:	1800471e 	bne	r3,zero,8000e9c <count+0xb68>
 8000d80:	100690ba 	slli	r3,r2,2
 8000d84:	00820034 	movhi	r2,2048
 8000d88:	10836604 	addi	r2,r2,3480
 8000d8c:	1885883a 	add	r2,r3,r2
 8000d90:	10800017 	ldw	r2,0(r2)
 8000d94:	1000683a 	jmp	r2
 8000d98:	08000dc4 	addi	zero,at,55
 8000d9c:	08000dd8 	cmpnei	zero,at,55
 8000da0:	08000dec 	andhi	zero,at,55
 8000da4:	08000e00 	call	8000e0 <__alt_mem_new_sdram_controller_0-0x77fff20>
 8000da8:	08000e14 	ori	zero,at,56
 8000dac:	08000e28 	cmpgeui	zero,at,56
 8000db0:	08000e3c 	xorhi	zero,at,56
 8000db4:	08000e50 	cmplti	zero,at,57
 8000db8:	08000e64 	muli	zero,at,57
 8000dbc:	08000e78 	rdprs	zero,at,57
 8000dc0:	08000e8c 	andi	zero,at,58
	{
		case 0:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, ZERO );
 8000dc4:	00c01004 	movi	r3,64
 8000dc8:	00840034 	movhi	r2,4096
 8000dcc:	10840004 	addi	r2,r2,4096
 8000dd0:	10c00035 	stwio	r3,0(r2)
            break;
 8000dd4:	00003106 	br	8000e9c <count+0xb68>
		case 1:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, ONE );
 8000dd8:	00c01e44 	movi	r3,121
 8000ddc:	00840034 	movhi	r2,4096
 8000de0:	10840004 	addi	r2,r2,4096
 8000de4:	10c00035 	stwio	r3,0(r2)
            break;
 8000de8:	00002c06 	br	8000e9c <count+0xb68>
		case 2:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, TWO );
 8000dec:	00c00904 	movi	r3,36
 8000df0:	00840034 	movhi	r2,4096
 8000df4:	10840004 	addi	r2,r2,4096
 8000df8:	10c00035 	stwio	r3,0(r2)
            break;
 8000dfc:	00002706 	br	8000e9c <count+0xb68>
		case 3:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, THREE );
 8000e00:	00c00c04 	movi	r3,48
 8000e04:	00840034 	movhi	r2,4096
 8000e08:	10840004 	addi	r2,r2,4096
 8000e0c:	10c00035 	stwio	r3,0(r2)
            break;
 8000e10:	00002206 	br	8000e9c <count+0xb68>
		case 4:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, FOUR );
 8000e14:	00c00644 	movi	r3,25
 8000e18:	00840034 	movhi	r2,4096
 8000e1c:	10840004 	addi	r2,r2,4096
 8000e20:	10c00035 	stwio	r3,0(r2)
            break;
 8000e24:	00001d06 	br	8000e9c <count+0xb68>
		case 5:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, FIVE );
 8000e28:	00c00484 	movi	r3,18
 8000e2c:	00840034 	movhi	r2,4096
 8000e30:	10840004 	addi	r2,r2,4096
 8000e34:	10c00035 	stwio	r3,0(r2)
            break;
 8000e38:	00001806 	br	8000e9c <count+0xb68>
		case 6:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, SIX );
 8000e3c:	00c00084 	movi	r3,2
 8000e40:	00840034 	movhi	r2,4096
 8000e44:	10840004 	addi	r2,r2,4096
 8000e48:	10c00035 	stwio	r3,0(r2)
            break;
 8000e4c:	00001306 	br	8000e9c <count+0xb68>
		case 7:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, SEVEN );
 8000e50:	00c01e04 	movi	r3,120
 8000e54:	00840034 	movhi	r2,4096
 8000e58:	10840004 	addi	r2,r2,4096
 8000e5c:	10c00035 	stwio	r3,0(r2)
            break;
 8000e60:	00000e06 	br	8000e9c <count+0xb68>
		case 8:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, EIGHT );
 8000e64:	0007883a 	mov	r3,zero
 8000e68:	00840034 	movhi	r2,4096
 8000e6c:	10840004 	addi	r2,r2,4096
 8000e70:	10c00035 	stwio	r3,0(r2)
            break;
 8000e74:	00000906 	br	8000e9c <count+0xb68>
		case 9:
			IOWR_ALTERA_AVALON_PIO_DATA( HEX7_BASE, NINE );
 8000e78:	00c00404 	movi	r3,16
 8000e7c:	00840034 	movhi	r2,4096
 8000e80:	10840004 	addi	r2,r2,4096
 8000e84:	10c00035 	stwio	r3,0(r2)
			break;
 8000e88:	00000406 	br	8000e9c <count+0xb68>
		case 10:
			hexCount[ 7 ] = 0;
 8000e8c:	00820074 	movhi	r2,2049
 8000e90:	10a8c804 	addi	r2,r2,-23776
 8000e94:	10000715 	stw	zero,28(r2)
			break;
 8000e98:	0001883a 	nop
	}
}
 8000e9c:	0001883a 	nop
 8000ea0:	e037883a 	mov	sp,fp
 8000ea4:	df000017 	ldw	fp,0(sp)
 8000ea8:	dec00104 	addi	sp,sp,4
 8000eac:	f800283a 	ret

08000eb0 <randLights>:

// Randomly light up the 7-seg displays
void randLights () {
 8000eb0:	defffd04 	addi	sp,sp,-12
 8000eb4:	dfc00215 	stw	ra,8(sp)
 8000eb8:	df000115 	stw	fp,4(sp)
 8000ebc:	df000104 	addi	fp,sp,4
	// Generate a random 7 bit number to correspond to each 7-seg display
	int* rand_config = decToBinary(rand() % 255);
 8000ec0:	80019180 	call	8001918 <rand>
 8000ec4:	01403fc4 	movi	r5,255
 8000ec8:	1009883a 	mov	r4,r2
 8000ecc:	80016fc0 	call	80016fc <__modsi3>
 8000ed0:	1009883a 	mov	r4,r2
 8000ed4:	80002900 	call	8000290 <decToBinary>
 8000ed8:	e0bfff15 	stw	r2,-4(fp)

  // Read each bit and light up positive bits
	if (rand_config[0] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
 8000edc:	e0bfff17 	ldw	r2,-4(fp)
 8000ee0:	10800017 	ldw	r2,0(r2)
 8000ee4:	1000051e 	bne	r2,zero,8000efc <randLights+0x4c>
 8000ee8:	00c01fc4 	movi	r3,127
 8000eec:	00840034 	movhi	r2,4096
 8000ef0:	10841c04 	addi	r2,r2,4208
 8000ef4:	10c00035 	stwio	r3,0(r2)
 8000ef8:	00000406 	br	8000f0c <randLights+0x5c>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 0);
 8000efc:	0007883a 	mov	r3,zero
 8000f00:	00840034 	movhi	r2,4096
 8000f04:	10841c04 	addi	r2,r2,4208
 8000f08:	10c00035 	stwio	r3,0(r2)
	if (rand_config[1] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 8000f0c:	e0bfff17 	ldw	r2,-4(fp)
 8000f10:	10800104 	addi	r2,r2,4
 8000f14:	10800017 	ldw	r2,0(r2)
 8000f18:	1000051e 	bne	r2,zero,8000f30 <randLights+0x80>
 8000f1c:	00c01fc4 	movi	r3,127
 8000f20:	00840034 	movhi	r2,4096
 8000f24:	10841804 	addi	r2,r2,4192
 8000f28:	10c00035 	stwio	r3,0(r2)
 8000f2c:	00000406 	br	8000f40 <randLights+0x90>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 0);
 8000f30:	0007883a 	mov	r3,zero
 8000f34:	00840034 	movhi	r2,4096
 8000f38:	10841804 	addi	r2,r2,4192
 8000f3c:	10c00035 	stwio	r3,0(r2)
	if (rand_config[2] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 8000f40:	e0bfff17 	ldw	r2,-4(fp)
 8000f44:	10800204 	addi	r2,r2,8
 8000f48:	10800017 	ldw	r2,0(r2)
 8000f4c:	1000051e 	bne	r2,zero,8000f64 <randLights+0xb4>
 8000f50:	00c01fc4 	movi	r3,127
 8000f54:	00840034 	movhi	r2,4096
 8000f58:	10841404 	addi	r2,r2,4176
 8000f5c:	10c00035 	stwio	r3,0(r2)
 8000f60:	00000406 	br	8000f74 <randLights+0xc4>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 0);
 8000f64:	0007883a 	mov	r3,zero
 8000f68:	00840034 	movhi	r2,4096
 8000f6c:	10841404 	addi	r2,r2,4176
 8000f70:	10c00035 	stwio	r3,0(r2)
	if (rand_config[3] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 8000f74:	e0bfff17 	ldw	r2,-4(fp)
 8000f78:	10800304 	addi	r2,r2,12
 8000f7c:	10800017 	ldw	r2,0(r2)
 8000f80:	1000051e 	bne	r2,zero,8000f98 <randLights+0xe8>
 8000f84:	00c01fc4 	movi	r3,127
 8000f88:	00840034 	movhi	r2,4096
 8000f8c:	10841004 	addi	r2,r2,4160
 8000f90:	10c00035 	stwio	r3,0(r2)
 8000f94:	00000406 	br	8000fa8 <randLights+0xf8>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 0);
 8000f98:	0007883a 	mov	r3,zero
 8000f9c:	00840034 	movhi	r2,4096
 8000fa0:	10841004 	addi	r2,r2,4160
 8000fa4:	10c00035 	stwio	r3,0(r2)
	if (rand_config[4] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 8000fa8:	e0bfff17 	ldw	r2,-4(fp)
 8000fac:	10800404 	addi	r2,r2,16
 8000fb0:	10800017 	ldw	r2,0(r2)
 8000fb4:	1000051e 	bne	r2,zero,8000fcc <randLights+0x11c>
 8000fb8:	00c01fc4 	movi	r3,127
 8000fbc:	00840034 	movhi	r2,4096
 8000fc0:	10840c04 	addi	r2,r2,4144
 8000fc4:	10c00035 	stwio	r3,0(r2)
 8000fc8:	00000406 	br	8000fdc <randLights+0x12c>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 0);
 8000fcc:	0007883a 	mov	r3,zero
 8000fd0:	00840034 	movhi	r2,4096
 8000fd4:	10840c04 	addi	r2,r2,4144
 8000fd8:	10c00035 	stwio	r3,0(r2)
	if (rand_config[5] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 8000fdc:	e0bfff17 	ldw	r2,-4(fp)
 8000fe0:	10800504 	addi	r2,r2,20
 8000fe4:	10800017 	ldw	r2,0(r2)
 8000fe8:	1000051e 	bne	r2,zero,8001000 <randLights+0x150>
 8000fec:	00c01fc4 	movi	r3,127
 8000ff0:	00840034 	movhi	r2,4096
 8000ff4:	10840804 	addi	r2,r2,4128
 8000ff8:	10c00035 	stwio	r3,0(r2)
 8000ffc:	00000406 	br	8001010 <randLights+0x160>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
 8001000:	0007883a 	mov	r3,zero
 8001004:	00840034 	movhi	r2,4096
 8001008:	10840804 	addi	r2,r2,4128
 800100c:	10c00035 	stwio	r3,0(r2)
	if (rand_config[6] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 8001010:	e0bfff17 	ldw	r2,-4(fp)
 8001014:	10800604 	addi	r2,r2,24
 8001018:	10800017 	ldw	r2,0(r2)
 800101c:	1000051e 	bne	r2,zero,8001034 <randLights+0x184>
 8001020:	00c01fc4 	movi	r3,127
 8001024:	00840034 	movhi	r2,4096
 8001028:	10840404 	addi	r2,r2,4112
 800102c:	10c00035 	stwio	r3,0(r2)
 8001030:	00000406 	br	8001044 <randLights+0x194>
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 0);
 8001034:	0007883a 	mov	r3,zero
 8001038:	00840034 	movhi	r2,4096
 800103c:	10840404 	addi	r2,r2,4112
 8001040:	10c00035 	stwio	r3,0(r2)
	if (rand_config[7] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
 8001044:	e0bfff17 	ldw	r2,-4(fp)
 8001048:	10800704 	addi	r2,r2,28
 800104c:	10800017 	ldw	r2,0(r2)
 8001050:	1000051e 	bne	r2,zero,8001068 <randLights+0x1b8>
 8001054:	00c01fc4 	movi	r3,127
 8001058:	00840034 	movhi	r2,4096
 800105c:	10840004 	addi	r2,r2,4096
 8001060:	10c00035 	stwio	r3,0(r2)
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 0);
}
 8001064:	00000406 	br	8001078 <randLights+0x1c8>
	if (rand_config[5] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 0);
	if (rand_config[6] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 0);
	if (rand_config[7] == 0) IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
	else IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 0);
 8001068:	0007883a 	mov	r3,zero
 800106c:	00840034 	movhi	r2,4096
 8001070:	10840004 	addi	r2,r2,4096
 8001074:	10c00035 	stwio	r3,0(r2)
}
 8001078:	0001883a 	nop
 800107c:	e037883a 	mov	sp,fp
 8001080:	dfc00117 	ldw	ra,4(sp)
 8001084:	df000017 	ldw	fp,0(sp)
 8001088:	dec00204 	addi	sp,sp,8
 800108c:	f800283a 	ret

08001090 <patternLights>:

// Light up
void patternLights (int pos) {
 8001090:	defffe04 	addi	sp,sp,-8
 8001094:	df000115 	stw	fp,4(sp)
 8001098:	df000104 	addi	fp,sp,4
 800109c:	e13fff15 	stw	r4,-4(fp)
	if (pos == 0) {
 80010a0:	e0bfff17 	ldw	r2,-4(fp)
 80010a4:	1000211e 	bne	r2,zero,800112c <patternLights+0x9c>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 126);
 80010a8:	00c01f84 	movi	r3,126
 80010ac:	00840034 	movhi	r2,4096
 80010b0:	10841c04 	addi	r2,r2,4208
 80010b4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 80010b8:	00c01fc4 	movi	r3,127
 80010bc:	00840034 	movhi	r2,4096
 80010c0:	10841804 	addi	r2,r2,4192
 80010c4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 80010c8:	00c01fc4 	movi	r3,127
 80010cc:	00840034 	movhi	r2,4096
 80010d0:	10841404 	addi	r2,r2,4176
 80010d4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 80010d8:	00c01fc4 	movi	r3,127
 80010dc:	00840034 	movhi	r2,4096
 80010e0:	10841004 	addi	r2,r2,4160
 80010e4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 80010e8:	00c01fc4 	movi	r3,127
 80010ec:	00840034 	movhi	r2,4096
 80010f0:	10840c04 	addi	r2,r2,4144
 80010f4:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 80010f8:	00c01fc4 	movi	r3,127
 80010fc:	00840034 	movhi	r2,4096
 8001100:	10840804 	addi	r2,r2,4128
 8001104:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 8001108:	00c01fc4 	movi	r3,127
 800110c:	00840034 	movhi	r2,4096
 8001110:	10840404 	addi	r2,r2,4112
 8001114:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
 8001118:	00c01fc4 	movi	r3,127
 800111c:	00840034 	movhi	r2,4096
 8001120:	10840004 	addi	r2,r2,4096
 8001124:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001128:	0000cf06 	br	8001468 <patternLights+0x3d8>
	IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
	IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
	}
	else if (pos == 1) {
 800112c:	e0bfff17 	ldw	r2,-4(fp)
 8001130:	10800058 	cmpnei	r2,r2,1
 8001134:	1000091e 	bne	r2,zero,800115c <patternLights+0xcc>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
 8001138:	00c01fc4 	movi	r3,127
 800113c:	00840034 	movhi	r2,4096
 8001140:	10841c04 	addi	r2,r2,4208
 8001144:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 126);
 8001148:	00c01f84 	movi	r3,126
 800114c:	00840034 	movhi	r2,4096
 8001150:	10841804 	addi	r2,r2,4192
 8001154:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001158:	0000c306 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 1) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 126);
	}
	else if (pos == 2) {
 800115c:	e0bfff17 	ldw	r2,-4(fp)
 8001160:	10800098 	cmpnei	r2,r2,2
 8001164:	1000091e 	bne	r2,zero,800118c <patternLights+0xfc>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 8001168:	00c01fc4 	movi	r3,127
 800116c:	00840034 	movhi	r2,4096
 8001170:	10841804 	addi	r2,r2,4192
 8001174:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 126);
 8001178:	00c01f84 	movi	r3,126
 800117c:	00840034 	movhi	r2,4096
 8001180:	10841404 	addi	r2,r2,4176
 8001184:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001188:	0000b706 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 2) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 126);
	}
	else if (pos == 4) {
 800118c:	e0bfff17 	ldw	r2,-4(fp)
 8001190:	10800118 	cmpnei	r2,r2,4
 8001194:	1000091e 	bne	r2,zero,80011bc <patternLights+0x12c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 8001198:	00c01fc4 	movi	r3,127
 800119c:	00840034 	movhi	r2,4096
 80011a0:	10841404 	addi	r2,r2,4176
 80011a4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 126);
 80011a8:	00c01f84 	movi	r3,126
 80011ac:	00840034 	movhi	r2,4096
 80011b0:	10841004 	addi	r2,r2,4160
 80011b4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 80011b8:	0000ab06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 4) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 126);
	}
	else if (pos == 5) {
 80011bc:	e0bfff17 	ldw	r2,-4(fp)
 80011c0:	10800158 	cmpnei	r2,r2,5
 80011c4:	1000091e 	bne	r2,zero,80011ec <patternLights+0x15c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 80011c8:	00c01fc4 	movi	r3,127
 80011cc:	00840034 	movhi	r2,4096
 80011d0:	10841004 	addi	r2,r2,4160
 80011d4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 126);
 80011d8:	00c01f84 	movi	r3,126
 80011dc:	00840034 	movhi	r2,4096
 80011e0:	10840c04 	addi	r2,r2,4144
 80011e4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 80011e8:	00009f06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 5) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 126);
	}
	else if (pos == 6) {
 80011ec:	e0bfff17 	ldw	r2,-4(fp)
 80011f0:	10800198 	cmpnei	r2,r2,6
 80011f4:	1000091e 	bne	r2,zero,800121c <patternLights+0x18c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 80011f8:	00c01fc4 	movi	r3,127
 80011fc:	00840034 	movhi	r2,4096
 8001200:	10840c04 	addi	r2,r2,4144
 8001204:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 126);
 8001208:	00c01f84 	movi	r3,126
 800120c:	00840034 	movhi	r2,4096
 8001210:	10840804 	addi	r2,r2,4128
 8001214:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001218:	00009306 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 6) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 126);
	}
	else if (pos == 7) {
 800121c:	e0bfff17 	ldw	r2,-4(fp)
 8001220:	108001d8 	cmpnei	r2,r2,7
 8001224:	1000091e 	bne	r2,zero,800124c <patternLights+0x1bc>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 8001228:	00c01fc4 	movi	r3,127
 800122c:	00840034 	movhi	r2,4096
 8001230:	10840804 	addi	r2,r2,4128
 8001234:	10c00035 	stwio	r3,0(r2)
	    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 126);
 8001238:	00c01f84 	movi	r3,126
 800123c:	00840034 	movhi	r2,4096
 8001240:	10840404 	addi	r2,r2,4112
 8001244:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001248:	00008706 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 7) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
	    IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 126);
	}
	else if (pos == 8) {
 800124c:	e0bfff17 	ldw	r2,-4(fp)
 8001250:	10800218 	cmpnei	r2,r2,8
 8001254:	1000091e 	bne	r2,zero,800127c <patternLights+0x1ec>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 8001258:	00c01fc4 	movi	r3,127
 800125c:	00840034 	movhi	r2,4096
 8001260:	10840404 	addi	r2,r2,4112
 8001264:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 126);
 8001268:	00c01f84 	movi	r3,126
 800126c:	00840034 	movhi	r2,4096
 8001270:	10840004 	addi	r2,r2,4096
 8001274:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001278:	00007b06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 8) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 126);
	}
	else if (pos == 9) {
 800127c:	e0bfff17 	ldw	r2,-4(fp)
 8001280:	10800258 	cmpnei	r2,r2,9
 8001284:	1000051e 	bne	r2,zero,800129c <patternLights+0x20c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 95);
 8001288:	00c017c4 	movi	r3,95
 800128c:	00840034 	movhi	r2,4096
 8001290:	10840004 	addi	r2,r2,4096
 8001294:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001298:	00007306 	br	8001468 <patternLights+0x3d8>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 126);
	}
	else if (pos == 9) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 95);
	}
	else if (pos == 10) {
 800129c:	e0bfff17 	ldw	r2,-4(fp)
 80012a0:	10800298 	cmpnei	r2,r2,10
 80012a4:	1000051e 	bne	r2,zero,80012bc <patternLights+0x22c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 111);
 80012a8:	00c01bc4 	movi	r3,111
 80012ac:	00840034 	movhi	r2,4096
 80012b0:	10840004 	addi	r2,r2,4096
 80012b4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 80012b8:	00006b06 	br	8001468 <patternLights+0x3d8>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 95);
	}
	else if (pos == 10) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 111);
	}
	else if (pos == 11) {
 80012bc:	e0bfff17 	ldw	r2,-4(fp)
 80012c0:	108002d8 	cmpnei	r2,r2,11
 80012c4:	1000051e 	bne	r2,zero,80012dc <patternLights+0x24c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 119);
 80012c8:	00c01dc4 	movi	r3,119
 80012cc:	00840034 	movhi	r2,4096
 80012d0:	10840004 	addi	r2,r2,4096
 80012d4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 80012d8:	00006306 	br	8001468 <patternLights+0x3d8>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 111);
	}
	else if (pos == 11) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 119);
	}
	else if (pos == 12) {
 80012dc:	e0bfff17 	ldw	r2,-4(fp)
 80012e0:	10800318 	cmpnei	r2,r2,12
 80012e4:	1000091e 	bne	r2,zero,800130c <patternLights+0x27c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
 80012e8:	00c01fc4 	movi	r3,127
 80012ec:	00840034 	movhi	r2,4096
 80012f0:	10840004 	addi	r2,r2,4096
 80012f4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 119);
 80012f8:	00c01dc4 	movi	r3,119
 80012fc:	00840034 	movhi	r2,4096
 8001300:	10840404 	addi	r2,r2,4112
 8001304:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001308:	00005706 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 12) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX7_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 119);
	}
	else if (pos == 13) {
 800130c:	e0bfff17 	ldw	r2,-4(fp)
 8001310:	10800358 	cmpnei	r2,r2,13
 8001314:	1000091e 	bne	r2,zero,800133c <patternLights+0x2ac>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
 8001318:	00c01fc4 	movi	r3,127
 800131c:	00840034 	movhi	r2,4096
 8001320:	10840404 	addi	r2,r2,4112
 8001324:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 119);
 8001328:	00c01dc4 	movi	r3,119
 800132c:	00840034 	movhi	r2,4096
 8001330:	10840804 	addi	r2,r2,4128
 8001334:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001338:	00004b06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 13) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX6_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 119);
	}
	else if (pos == 14) {
 800133c:	e0bfff17 	ldw	r2,-4(fp)
 8001340:	10800398 	cmpnei	r2,r2,14
 8001344:	1000091e 	bne	r2,zero,800136c <patternLights+0x2dc>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
 8001348:	00c01fc4 	movi	r3,127
 800134c:	00840034 	movhi	r2,4096
 8001350:	10840804 	addi	r2,r2,4128
 8001354:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 119);
 8001358:	00c01dc4 	movi	r3,119
 800135c:	00840034 	movhi	r2,4096
 8001360:	10840c04 	addi	r2,r2,4144
 8001364:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001368:	00003f06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 14) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX5_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 119);
	}
	else if (pos == 15) {
 800136c:	e0bfff17 	ldw	r2,-4(fp)
 8001370:	108003d8 	cmpnei	r2,r2,15
 8001374:	1000091e 	bne	r2,zero,800139c <patternLights+0x30c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
 8001378:	00c01fc4 	movi	r3,127
 800137c:	00840034 	movhi	r2,4096
 8001380:	10840c04 	addi	r2,r2,4144
 8001384:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 119);
 8001388:	00c01dc4 	movi	r3,119
 800138c:	00840034 	movhi	r2,4096
 8001390:	10841004 	addi	r2,r2,4160
 8001394:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001398:	00003306 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 15) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX4_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 119);
	}
	else if (pos == 16) {
 800139c:	e0bfff17 	ldw	r2,-4(fp)
 80013a0:	10800418 	cmpnei	r2,r2,16
 80013a4:	1000091e 	bne	r2,zero,80013cc <patternLights+0x33c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
 80013a8:	00c01fc4 	movi	r3,127
 80013ac:	00840034 	movhi	r2,4096
 80013b0:	10841004 	addi	r2,r2,4160
 80013b4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 119);
 80013b8:	00c01dc4 	movi	r3,119
 80013bc:	00840034 	movhi	r2,4096
 80013c0:	10841404 	addi	r2,r2,4176
 80013c4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 80013c8:	00002706 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 16) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX3_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 119);
	}
	else if (pos == 17) {
 80013cc:	e0bfff17 	ldw	r2,-4(fp)
 80013d0:	10800458 	cmpnei	r2,r2,17
 80013d4:	1000091e 	bne	r2,zero,80013fc <patternLights+0x36c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
 80013d8:	00c01fc4 	movi	r3,127
 80013dc:	00840034 	movhi	r2,4096
 80013e0:	10841404 	addi	r2,r2,4176
 80013e4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 119);
 80013e8:	00c01dc4 	movi	r3,119
 80013ec:	00840034 	movhi	r2,4096
 80013f0:	10841804 	addi	r2,r2,4192
 80013f4:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 80013f8:	00001b06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 17) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX2_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 119);
	}
	else if (pos == 18) {
 80013fc:	e0bfff17 	ldw	r2,-4(fp)
 8001400:	10800498 	cmpnei	r2,r2,18
 8001404:	1000091e 	bne	r2,zero,800142c <patternLights+0x39c>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
 8001408:	00c01fc4 	movi	r3,127
 800140c:	00840034 	movhi	r2,4096
 8001410:	10841804 	addi	r2,r2,4192
 8001414:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 119);
 8001418:	00c01dc4 	movi	r3,119
 800141c:	00840034 	movhi	r2,4096
 8001420:	10841c04 	addi	r2,r2,4208
 8001424:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001428:	00000f06 	br	8001468 <patternLights+0x3d8>
	}
	else if (pos == 18) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX1_BASE, 127);
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 119);
	}
	else if (pos == 19) {
 800142c:	e0bfff17 	ldw	r2,-4(fp)
 8001430:	108004d8 	cmpnei	r2,r2,19
 8001434:	1000051e 	bne	r2,zero,800144c <patternLights+0x3bc>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
 8001438:	00c01ec4 	movi	r3,123
 800143c:	00840034 	movhi	r2,4096
 8001440:	10841c04 	addi	r2,r2,4208
 8001444:	10c00035 	stwio	r3,0(r2)
	}
	else if (pos == 20) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
	}
}
 8001448:	00000706 	br	8001468 <patternLights+0x3d8>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 119);
	}
	else if (pos == 19) {
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 123);
	}
	else if (pos == 20) {
 800144c:	e0bfff17 	ldw	r2,-4(fp)
 8001450:	10800518 	cmpnei	r2,r2,20
 8001454:	1000041e 	bne	r2,zero,8001468 <patternLights+0x3d8>
		IOWR_ALTERA_AVALON_PIO_DATA(HEX0_BASE, 125);
 8001458:	00c01f44 	movi	r3,125
 800145c:	00840034 	movhi	r2,4096
 8001460:	10841c04 	addi	r2,r2,4208
 8001464:	10c00035 	stwio	r3,0(r2)
	}
}
 8001468:	0001883a 	nop
 800146c:	e037883a 	mov	sp,fp
 8001470:	df000017 	ldw	fp,0(sp)
 8001474:	dec00104 	addi	sp,sp,4
 8001478:	f800283a 	ret

0800147c <main>:

int main()
{
 800147c:	defff804 	addi	sp,sp,-32
 8001480:	dfc00715 	stw	ra,28(sp)
 8001484:	df000615 	stw	fp,24(sp)
 8001488:	df000604 	addi	fp,sp,24
	alt_u32 current_value;
	alt_u32 current_state;
	alt_u8 current_direction;
	alt_u32 keys;

	current_state=3;
 800148c:	008000c4 	movi	r2,3
 8001490:	e0bffb15 	stw	r2,-20(fp)
	current_value=1;
 8001494:	00800044 	movi	r2,1
 8001498:	e0bffa15 	stw	r2,-24(fp)
	current_direction=0;
 800149c:	e03ffc05 	stb	zero,-16(fp)

	int pos = 0;
 80014a0:	e03ffd15 	stw	zero,-12(fp)

	printf ("Program running (UART)...\n");
 80014a4:	01020034 	movhi	r4,2048
 80014a8:	211b5104 	addi	r4,r4,27972
 80014ac:	80018ec0 	call	80018ec <puts>

	while (1) {
		// read the current state of the keys
		keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
 80014b0:	00840034 	movhi	r2,4096
 80014b4:	10842004 	addi	r2,r2,4224
 80014b8:	10800037 	ldwio	r2,0(r2)
 80014bc:	e0bfff15 	stw	r2,-4(fp)

		// switch speed if necessary
		if ((keys != 7) && (keys != current_state)) {
 80014c0:	e0bfff17 	ldw	r2,-4(fp)
 80014c4:	108001e0 	cmpeqi	r2,r2,7
 80014c8:	1000281e 	bne	r2,zero,800156c <main+0xf0>
 80014cc:	e0ffff17 	ldw	r3,-4(fp)
 80014d0:	e0bffb17 	ldw	r2,-20(fp)
 80014d4:	18802526 	beq	r3,r2,800156c <main+0xf0>
		if (keys == 3) {  // key 3, 250 ms, rand 7-seg config
 80014d8:	e0bfff17 	ldw	r2,-4(fp)
 80014dc:	108000d8 	cmpnei	r2,r2,3
 80014e0:	1000041e 	bne	r2,zero,80014f4 <main+0x78>
			printf ("speed set to 250 ms\n");
 80014e4:	01020034 	movhi	r4,2048
 80014e8:	211b5804 	addi	r4,r4,28000
 80014ec:	80018ec0 	call	80018ec <puts>
 80014f0:	00001c06 	br	8001564 <main+0xe8>
		}
		else if (keys == 5) {  // key 2
 80014f4:	e0bfff17 	ldw	r2,-4(fp)
 80014f8:	10800158 	cmpnei	r2,r2,5
 80014fc:	1000041e 	bne	r2,zero,8001510 <main+0x94>
			printf ("speed set to 150 ms\n");
 8001500:	01020034 	movhi	r4,2048
 8001504:	211b5d04 	addi	r4,r4,28020
 8001508:	80018ec0 	call	80018ec <puts>
 800150c:	00001506 	br	8001564 <main+0xe8>
		}
		else if (keys == 6) {  // key 1
 8001510:	e0bfff17 	ldw	r2,-4(fp)
 8001514:	10800198 	cmpnei	r2,r2,6
 8001518:	1000121e 	bne	r2,zero,8001564 <main+0xe8>
			printf ("speed set to 50 ms\n");
 800151c:	01020034 	movhi	r4,2048
 8001520:	211b6204 	addi	r4,r4,28040
 8001524:	80018ec0 	call	80018ec <puts>
			for ( int i = 0; i < 9; i++ ) hexCount[ i ] = 0;
 8001528:	e03ffe15 	stw	zero,-8(fp)
 800152c:	00000a06 	br	8001558 <main+0xdc>
 8001530:	00820074 	movhi	r2,2049
 8001534:	10a8c804 	addi	r2,r2,-23776
 8001538:	e0fffe17 	ldw	r3,-8(fp)
 800153c:	18c7883a 	add	r3,r3,r3
 8001540:	18c7883a 	add	r3,r3,r3
 8001544:	10c5883a 	add	r2,r2,r3
 8001548:	10000015 	stw	zero,0(r2)
 800154c:	e0bffe17 	ldw	r2,-8(fp)
 8001550:	10800044 	addi	r2,r2,1
 8001554:	e0bffe15 	stw	r2,-8(fp)
 8001558:	e0bffe17 	ldw	r2,-8(fp)
 800155c:	10800250 	cmplti	r2,r2,9
 8001560:	103ff31e 	bne	r2,zero,8001530 <main+0xb4>
		}
		current_state=keys;
 8001564:	e0bfff17 	ldw	r2,-4(fp)
 8001568:	e0bffb15 	stw	r2,-20(fp)
		}

		// manage LEDS
		if ((current_direction==0) && (current_value==(1 << 25))) {  // switch direction if necessary
 800156c:	e0bffc03 	ldbu	r2,-16(fp)
 8001570:	1000061e 	bne	r2,zero,800158c <main+0x110>
 8001574:	e0fffa17 	ldw	r3,-24(fp)
 8001578:	00808034 	movhi	r2,512
 800157c:	1880031e 	bne	r3,r2,800158c <main+0x110>
			current_direction=1;
 8001580:	00800044 	movi	r2,1
 8001584:	e0bffc05 	stb	r2,-16(fp)
 8001588:	00001106 	br	80015d0 <main+0x154>
		}
		else if ((current_direction==1) && (current_value==1)) {
 800158c:	e0bffc03 	ldbu	r2,-16(fp)
 8001590:	10800058 	cmpnei	r2,r2,1
 8001594:	1000051e 	bne	r2,zero,80015ac <main+0x130>
 8001598:	e0bffa17 	ldw	r2,-24(fp)
 800159c:	10800058 	cmpnei	r2,r2,1
 80015a0:	1000021e 	bne	r2,zero,80015ac <main+0x130>
			current_direction=0;
 80015a4:	e03ffc05 	stb	zero,-16(fp)
 80015a8:	00000906 	br	80015d0 <main+0x154>
		}
		else if (current_direction==0) {  // move light
 80015ac:	e0bffc03 	ldbu	r2,-16(fp)
 80015b0:	1000041e 	bne	r2,zero,80015c4 <main+0x148>
			current_value = current_value << 1;
 80015b4:	e0bffa17 	ldw	r2,-24(fp)
 80015b8:	1085883a 	add	r2,r2,r2
 80015bc:	e0bffa15 	stw	r2,-24(fp)
 80015c0:	00000306 	br	80015d0 <main+0x154>
		}
		else {
			current_value = current_value >> 1;
 80015c4:	e0bffa17 	ldw	r2,-24(fp)
 80015c8:	1004d07a 	srli	r2,r2,1
 80015cc:	e0bffa15 	stw	r2,-24(fp)
		}

		// update lights
		if (current_state == 3) randLights();
 80015d0:	e0bffb17 	ldw	r2,-20(fp)
 80015d4:	108000d8 	cmpnei	r2,r2,3
 80015d8:	1000011e 	bne	r2,zero,80015e0 <main+0x164>
 80015dc:	8000eb00 	call	8000eb0 <randLights>
		if (current_state == 5) {
 80015e0:	e0bffb17 	ldw	r2,-20(fp)
 80015e4:	10800158 	cmpnei	r2,r2,5
 80015e8:	10000a1e 	bne	r2,zero,8001614 <main+0x198>
			patternLights(pos);
 80015ec:	e13ffd17 	ldw	r4,-12(fp)
 80015f0:	80010900 	call	8001090 <patternLights>
			if (pos == 20) pos = 0;
 80015f4:	e0bffd17 	ldw	r2,-12(fp)
 80015f8:	10800518 	cmpnei	r2,r2,20
 80015fc:	1000021e 	bne	r2,zero,8001608 <main+0x18c>
 8001600:	e03ffd15 	stw	zero,-12(fp)
 8001604:	00000306 	br	8001614 <main+0x198>
			else pos++;
 8001608:	e0bffd17 	ldw	r2,-12(fp)
 800160c:	10800044 	addi	r2,r2,1
 8001610:	e0bffd15 	stw	r2,-12(fp)
		}
		if (current_state == 6) count( );
 8001614:	e0bffb17 	ldw	r2,-20(fp)
 8001618:	10800198 	cmpnei	r2,r2,6
 800161c:	1000011e 	bne	r2,zero,8001624 <main+0x1a8>
 8001620:	80003340 	call	8000334 <count>

		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE,current_value);
 8001624:	e0fffa17 	ldw	r3,-24(fp)
 8001628:	00840034 	movhi	r2,4096
 800162c:	10842404 	addi	r2,r2,4240
 8001630:	10c00035 	stwio	r3,0(r2)

		// wait
		if (current_state==3) usleep (250000);
 8001634:	e0bffb17 	ldw	r2,-20(fp)
 8001638:	108000d8 	cmpnei	r2,r2,3
 800163c:	1000041e 	bne	r2,zero,8001650 <main+0x1d4>
 8001640:	01000134 	movhi	r4,4
 8001644:	21342404 	addi	r4,r4,-12144
 8001648:	8004d2c0 	call	8004d2c <usleep>
 800164c:	003f9806 	br	80014b0 <main+0x34>
		else if (current_state==5) usleep (125000);
 8001650:	e0bffb17 	ldw	r2,-20(fp)
 8001654:	10800158 	cmpnei	r2,r2,5
 8001658:	1000041e 	bne	r2,zero,800166c <main+0x1f0>
 800165c:	010000b4 	movhi	r4,2
 8001660:	213a1204 	addi	r4,r4,-6072
 8001664:	8004d2c0 	call	8004d2c <usleep>
 8001668:	003f9106 	br	80014b0 <main+0x34>
		else usleep (50000);
 800166c:	0130d414 	movui	r4,50000
 8001670:	8004d2c0 	call	8004d2c <usleep>
	}
 8001674:	003f8e06 	br	80014b0 <main+0x34>

08001678 <__divsi3>:
 8001678:	20001b16 	blt	r4,zero,80016e8 <__divsi3+0x70>
 800167c:	000f883a 	mov	r7,zero
 8001680:	28001616 	blt	r5,zero,80016dc <__divsi3+0x64>
 8001684:	200d883a 	mov	r6,r4
 8001688:	29001a2e 	bgeu	r5,r4,80016f4 <__divsi3+0x7c>
 800168c:	00800804 	movi	r2,32
 8001690:	00c00044 	movi	r3,1
 8001694:	00000106 	br	800169c <__divsi3+0x24>
 8001698:	10000d26 	beq	r2,zero,80016d0 <__divsi3+0x58>
 800169c:	294b883a 	add	r5,r5,r5
 80016a0:	10bfffc4 	addi	r2,r2,-1
 80016a4:	18c7883a 	add	r3,r3,r3
 80016a8:	293ffb36 	bltu	r5,r4,8001698 <__divsi3+0x20>
 80016ac:	0005883a 	mov	r2,zero
 80016b0:	18000726 	beq	r3,zero,80016d0 <__divsi3+0x58>
 80016b4:	0005883a 	mov	r2,zero
 80016b8:	31400236 	bltu	r6,r5,80016c4 <__divsi3+0x4c>
 80016bc:	314dc83a 	sub	r6,r6,r5
 80016c0:	10c4b03a 	or	r2,r2,r3
 80016c4:	1806d07a 	srli	r3,r3,1
 80016c8:	280ad07a 	srli	r5,r5,1
 80016cc:	183ffa1e 	bne	r3,zero,80016b8 <__divsi3+0x40>
 80016d0:	38000126 	beq	r7,zero,80016d8 <__divsi3+0x60>
 80016d4:	0085c83a 	sub	r2,zero,r2
 80016d8:	f800283a 	ret
 80016dc:	014bc83a 	sub	r5,zero,r5
 80016e0:	39c0005c 	xori	r7,r7,1
 80016e4:	003fe706 	br	8001684 <__divsi3+0xc>
 80016e8:	0109c83a 	sub	r4,zero,r4
 80016ec:	01c00044 	movi	r7,1
 80016f0:	003fe306 	br	8001680 <__divsi3+0x8>
 80016f4:	00c00044 	movi	r3,1
 80016f8:	003fee06 	br	80016b4 <__divsi3+0x3c>

080016fc <__modsi3>:
 80016fc:	20001716 	blt	r4,zero,800175c <__modsi3+0x60>
 8001700:	000f883a 	mov	r7,zero
 8001704:	2005883a 	mov	r2,r4
 8001708:	28001216 	blt	r5,zero,8001754 <__modsi3+0x58>
 800170c:	2900162e 	bgeu	r5,r4,8001768 <__modsi3+0x6c>
 8001710:	01800804 	movi	r6,32
 8001714:	00c00044 	movi	r3,1
 8001718:	00000106 	br	8001720 <__modsi3+0x24>
 800171c:	30000a26 	beq	r6,zero,8001748 <__modsi3+0x4c>
 8001720:	294b883a 	add	r5,r5,r5
 8001724:	31bfffc4 	addi	r6,r6,-1
 8001728:	18c7883a 	add	r3,r3,r3
 800172c:	293ffb36 	bltu	r5,r4,800171c <__modsi3+0x20>
 8001730:	18000526 	beq	r3,zero,8001748 <__modsi3+0x4c>
 8001734:	1806d07a 	srli	r3,r3,1
 8001738:	11400136 	bltu	r2,r5,8001740 <__modsi3+0x44>
 800173c:	1145c83a 	sub	r2,r2,r5
 8001740:	280ad07a 	srli	r5,r5,1
 8001744:	183ffb1e 	bne	r3,zero,8001734 <__modsi3+0x38>
 8001748:	38000126 	beq	r7,zero,8001750 <__modsi3+0x54>
 800174c:	0085c83a 	sub	r2,zero,r2
 8001750:	f800283a 	ret
 8001754:	014bc83a 	sub	r5,zero,r5
 8001758:	003fec06 	br	800170c <__modsi3+0x10>
 800175c:	0109c83a 	sub	r4,zero,r4
 8001760:	01c00044 	movi	r7,1
 8001764:	003fe706 	br	8001704 <__modsi3+0x8>
 8001768:	00c00044 	movi	r3,1
 800176c:	003ff106 	br	8001734 <__modsi3+0x38>

08001770 <__udivsi3>:
 8001770:	200d883a 	mov	r6,r4
 8001774:	2900152e 	bgeu	r5,r4,80017cc <__udivsi3+0x5c>
 8001778:	28001416 	blt	r5,zero,80017cc <__udivsi3+0x5c>
 800177c:	00800804 	movi	r2,32
 8001780:	00c00044 	movi	r3,1
 8001784:	00000206 	br	8001790 <__udivsi3+0x20>
 8001788:	10000e26 	beq	r2,zero,80017c4 <__udivsi3+0x54>
 800178c:	28000516 	blt	r5,zero,80017a4 <__udivsi3+0x34>
 8001790:	294b883a 	add	r5,r5,r5
 8001794:	10bfffc4 	addi	r2,r2,-1
 8001798:	18c7883a 	add	r3,r3,r3
 800179c:	293ffa36 	bltu	r5,r4,8001788 <__udivsi3+0x18>
 80017a0:	18000826 	beq	r3,zero,80017c4 <__udivsi3+0x54>
 80017a4:	0005883a 	mov	r2,zero
 80017a8:	31400236 	bltu	r6,r5,80017b4 <__udivsi3+0x44>
 80017ac:	314dc83a 	sub	r6,r6,r5
 80017b0:	10c4b03a 	or	r2,r2,r3
 80017b4:	1806d07a 	srli	r3,r3,1
 80017b8:	280ad07a 	srli	r5,r5,1
 80017bc:	183ffa1e 	bne	r3,zero,80017a8 <__udivsi3+0x38>
 80017c0:	f800283a 	ret
 80017c4:	0005883a 	mov	r2,zero
 80017c8:	f800283a 	ret
 80017cc:	00c00044 	movi	r3,1
 80017d0:	003ff406 	br	80017a4 <__udivsi3+0x34>

080017d4 <__umodsi3>:
 80017d4:	2005883a 	mov	r2,r4
 80017d8:	2900122e 	bgeu	r5,r4,8001824 <__umodsi3+0x50>
 80017dc:	28001116 	blt	r5,zero,8001824 <__umodsi3+0x50>
 80017e0:	01800804 	movi	r6,32
 80017e4:	00c00044 	movi	r3,1
 80017e8:	00000206 	br	80017f4 <__umodsi3+0x20>
 80017ec:	30000c26 	beq	r6,zero,8001820 <__umodsi3+0x4c>
 80017f0:	28000516 	blt	r5,zero,8001808 <__umodsi3+0x34>
 80017f4:	294b883a 	add	r5,r5,r5
 80017f8:	31bfffc4 	addi	r6,r6,-1
 80017fc:	18c7883a 	add	r3,r3,r3
 8001800:	293ffa36 	bltu	r5,r4,80017ec <__umodsi3+0x18>
 8001804:	18000626 	beq	r3,zero,8001820 <__umodsi3+0x4c>
 8001808:	1806d07a 	srli	r3,r3,1
 800180c:	11400136 	bltu	r2,r5,8001814 <__umodsi3+0x40>
 8001810:	1145c83a 	sub	r2,r2,r5
 8001814:	280ad07a 	srli	r5,r5,1
 8001818:	183ffb1e 	bne	r3,zero,8001808 <__umodsi3+0x34>
 800181c:	f800283a 	ret
 8001820:	f800283a 	ret
 8001824:	00c00044 	movi	r3,1
 8001828:	003ff706 	br	8001808 <__umodsi3+0x34>

0800182c <_puts_r>:
 800182c:	defff604 	addi	sp,sp,-40
 8001830:	dc000715 	stw	r16,28(sp)
 8001834:	2021883a 	mov	r16,r4
 8001838:	2809883a 	mov	r4,r5
 800183c:	dc400815 	stw	r17,32(sp)
 8001840:	dfc00915 	stw	ra,36(sp)
 8001844:	2823883a 	mov	r17,r5
 8001848:	800197c0 	call	800197c <strlen>
 800184c:	10c00044 	addi	r3,r2,1
 8001850:	d8800115 	stw	r2,4(sp)
 8001854:	00820034 	movhi	r2,2048
 8001858:	109b6704 	addi	r2,r2,28060
 800185c:	d8800215 	stw	r2,8(sp)
 8001860:	00800044 	movi	r2,1
 8001864:	d8800315 	stw	r2,12(sp)
 8001868:	00800084 	movi	r2,2
 800186c:	dc400015 	stw	r17,0(sp)
 8001870:	d8c00615 	stw	r3,24(sp)
 8001874:	dec00415 	stw	sp,16(sp)
 8001878:	d8800515 	stw	r2,20(sp)
 800187c:	80000226 	beq	r16,zero,8001888 <_puts_r+0x5c>
 8001880:	80800e17 	ldw	r2,56(r16)
 8001884:	10001426 	beq	r2,zero,80018d8 <_puts_r+0xac>
 8001888:	81400217 	ldw	r5,8(r16)
 800188c:	2880030b 	ldhu	r2,12(r5)
 8001890:	10c8000c 	andi	r3,r2,8192
 8001894:	1800061e 	bne	r3,zero,80018b0 <_puts_r+0x84>
 8001898:	29001917 	ldw	r4,100(r5)
 800189c:	00f7ffc4 	movi	r3,-8193
 80018a0:	10880014 	ori	r2,r2,8192
 80018a4:	20c6703a 	and	r3,r4,r3
 80018a8:	2880030d 	sth	r2,12(r5)
 80018ac:	28c01915 	stw	r3,100(r5)
 80018b0:	d9800404 	addi	r6,sp,16
 80018b4:	8009883a 	mov	r4,r16
 80018b8:	8001db40 	call	8001db4 <__sfvwrite_r>
 80018bc:	1000091e 	bne	r2,zero,80018e4 <_puts_r+0xb8>
 80018c0:	00800284 	movi	r2,10
 80018c4:	dfc00917 	ldw	ra,36(sp)
 80018c8:	dc400817 	ldw	r17,32(sp)
 80018cc:	dc000717 	ldw	r16,28(sp)
 80018d0:	dec00a04 	addi	sp,sp,40
 80018d4:	f800283a 	ret
 80018d8:	8009883a 	mov	r4,r16
 80018dc:	8001d640 	call	8001d64 <__sinit>
 80018e0:	003fe906 	br	8001888 <_puts_r+0x5c>
 80018e4:	00bfffc4 	movi	r2,-1
 80018e8:	003ff606 	br	80018c4 <_puts_r+0x98>

080018ec <puts>:
 80018ec:	00820074 	movhi	r2,2049
 80018f0:	10a20404 	addi	r2,r2,-30704
 80018f4:	200b883a 	mov	r5,r4
 80018f8:	11000017 	ldw	r4,0(r2)
 80018fc:	800182c1 	jmpi	800182c <_puts_r>

08001900 <srand>:
 8001900:	00820074 	movhi	r2,2049
 8001904:	10a20404 	addi	r2,r2,-30704
 8001908:	10800017 	ldw	r2,0(r2)
 800190c:	11002915 	stw	r4,164(r2)
 8001910:	10002a15 	stw	zero,168(r2)
 8001914:	f800283a 	ret

08001918 <rand>:
 8001918:	00820074 	movhi	r2,2049
 800191c:	defffe04 	addi	sp,sp,-8
 8001920:	10a20404 	addi	r2,r2,-30704
 8001924:	dc000015 	stw	r16,0(sp)
 8001928:	14000017 	ldw	r16,0(r2)
 800192c:	dfc00115 	stw	ra,4(sp)
 8001930:	01932574 	movhi	r6,19605
 8001934:	81002917 	ldw	r4,164(r16)
 8001938:	81402a17 	ldw	r5,168(r16)
 800193c:	01d614b4 	movhi	r7,22610
 8001940:	319fcb44 	addi	r6,r6,32557
 8001944:	39fd0b44 	addi	r7,r7,-3027
 8001948:	80044bc0 	call	80044bc <__muldi3>
 800194c:	11000044 	addi	r4,r2,1
 8001950:	2085803a 	cmpltu	r2,r4,r2
 8001954:	10c7883a 	add	r3,r2,r3
 8001958:	00a00034 	movhi	r2,32768
 800195c:	10bfffc4 	addi	r2,r2,-1
 8001960:	1884703a 	and	r2,r3,r2
 8001964:	81002915 	stw	r4,164(r16)
 8001968:	80c02a15 	stw	r3,168(r16)
 800196c:	dfc00117 	ldw	ra,4(sp)
 8001970:	dc000017 	ldw	r16,0(sp)
 8001974:	dec00204 	addi	sp,sp,8
 8001978:	f800283a 	ret

0800197c <strlen>:
 800197c:	208000cc 	andi	r2,r4,3
 8001980:	10002026 	beq	r2,zero,8001a04 <strlen+0x88>
 8001984:	20800007 	ldb	r2,0(r4)
 8001988:	10002026 	beq	r2,zero,8001a0c <strlen+0x90>
 800198c:	2005883a 	mov	r2,r4
 8001990:	00000206 	br	800199c <strlen+0x20>
 8001994:	10c00007 	ldb	r3,0(r2)
 8001998:	18001826 	beq	r3,zero,80019fc <strlen+0x80>
 800199c:	10800044 	addi	r2,r2,1
 80019a0:	10c000cc 	andi	r3,r2,3
 80019a4:	183ffb1e 	bne	r3,zero,8001994 <strlen+0x18>
 80019a8:	10c00017 	ldw	r3,0(r2)
 80019ac:	01ffbff4 	movhi	r7,65279
 80019b0:	39ffbfc4 	addi	r7,r7,-257
 80019b4:	00ca303a 	nor	r5,zero,r3
 80019b8:	01a02074 	movhi	r6,32897
 80019bc:	19c7883a 	add	r3,r3,r7
 80019c0:	31a02004 	addi	r6,r6,-32640
 80019c4:	1946703a 	and	r3,r3,r5
 80019c8:	1986703a 	and	r3,r3,r6
 80019cc:	1800091e 	bne	r3,zero,80019f4 <strlen+0x78>
 80019d0:	10800104 	addi	r2,r2,4
 80019d4:	10c00017 	ldw	r3,0(r2)
 80019d8:	19cb883a 	add	r5,r3,r7
 80019dc:	00c6303a 	nor	r3,zero,r3
 80019e0:	28c6703a 	and	r3,r5,r3
 80019e4:	1986703a 	and	r3,r3,r6
 80019e8:	183ff926 	beq	r3,zero,80019d0 <strlen+0x54>
 80019ec:	00000106 	br	80019f4 <strlen+0x78>
 80019f0:	10800044 	addi	r2,r2,1
 80019f4:	10c00007 	ldb	r3,0(r2)
 80019f8:	183ffd1e 	bne	r3,zero,80019f0 <strlen+0x74>
 80019fc:	1105c83a 	sub	r2,r2,r4
 8001a00:	f800283a 	ret
 8001a04:	2005883a 	mov	r2,r4
 8001a08:	003fe706 	br	80019a8 <strlen+0x2c>
 8001a0c:	0005883a 	mov	r2,zero
 8001a10:	f800283a 	ret

08001a14 <__fp_unlock>:
 8001a14:	0005883a 	mov	r2,zero
 8001a18:	f800283a 	ret

08001a1c <_cleanup_r>:
 8001a1c:	01420034 	movhi	r5,2048
 8001a20:	294e6c04 	addi	r5,r5,14768
 8001a24:	80023341 	jmpi	8002334 <_fwalk_reent>

08001a28 <__sinit.part.1>:
 8001a28:	defff704 	addi	sp,sp,-36
 8001a2c:	00c20034 	movhi	r3,2048
 8001a30:	dfc00815 	stw	ra,32(sp)
 8001a34:	ddc00715 	stw	r23,28(sp)
 8001a38:	dd800615 	stw	r22,24(sp)
 8001a3c:	dd400515 	stw	r21,20(sp)
 8001a40:	dd000415 	stw	r20,16(sp)
 8001a44:	dcc00315 	stw	r19,12(sp)
 8001a48:	dc800215 	stw	r18,8(sp)
 8001a4c:	dc400115 	stw	r17,4(sp)
 8001a50:	dc000015 	stw	r16,0(sp)
 8001a54:	18c68704 	addi	r3,r3,6684
 8001a58:	24000117 	ldw	r16,4(r4)
 8001a5c:	20c00f15 	stw	r3,60(r4)
 8001a60:	2080bb04 	addi	r2,r4,748
 8001a64:	00c000c4 	movi	r3,3
 8001a68:	20c0b915 	stw	r3,740(r4)
 8001a6c:	2080ba15 	stw	r2,744(r4)
 8001a70:	2000b815 	stw	zero,736(r4)
 8001a74:	05c00204 	movi	r23,8
 8001a78:	00800104 	movi	r2,4
 8001a7c:	2025883a 	mov	r18,r4
 8001a80:	b80d883a 	mov	r6,r23
 8001a84:	81001704 	addi	r4,r16,92
 8001a88:	000b883a 	mov	r5,zero
 8001a8c:	80000015 	stw	zero,0(r16)
 8001a90:	80000115 	stw	zero,4(r16)
 8001a94:	80000215 	stw	zero,8(r16)
 8001a98:	8080030d 	sth	r2,12(r16)
 8001a9c:	80001915 	stw	zero,100(r16)
 8001aa0:	8000038d 	sth	zero,14(r16)
 8001aa4:	80000415 	stw	zero,16(r16)
 8001aa8:	80000515 	stw	zero,20(r16)
 8001aac:	80000615 	stw	zero,24(r16)
 8001ab0:	8002f8c0 	call	8002f8c <memset>
 8001ab4:	05820034 	movhi	r22,2048
 8001ab8:	94400217 	ldw	r17,8(r18)
 8001abc:	05420034 	movhi	r21,2048
 8001ac0:	05020034 	movhi	r20,2048
 8001ac4:	04c20034 	movhi	r19,2048
 8001ac8:	b58d9b04 	addi	r22,r22,13932
 8001acc:	ad4db204 	addi	r21,r21,14024
 8001ad0:	a50dd104 	addi	r20,r20,14148
 8001ad4:	9ccde804 	addi	r19,r19,14240
 8001ad8:	85800815 	stw	r22,32(r16)
 8001adc:	85400915 	stw	r21,36(r16)
 8001ae0:	85000a15 	stw	r20,40(r16)
 8001ae4:	84c00b15 	stw	r19,44(r16)
 8001ae8:	84000715 	stw	r16,28(r16)
 8001aec:	00800284 	movi	r2,10
 8001af0:	8880030d 	sth	r2,12(r17)
 8001af4:	00800044 	movi	r2,1
 8001af8:	b80d883a 	mov	r6,r23
 8001afc:	89001704 	addi	r4,r17,92
 8001b00:	000b883a 	mov	r5,zero
 8001b04:	88000015 	stw	zero,0(r17)
 8001b08:	88000115 	stw	zero,4(r17)
 8001b0c:	88000215 	stw	zero,8(r17)
 8001b10:	88001915 	stw	zero,100(r17)
 8001b14:	8880038d 	sth	r2,14(r17)
 8001b18:	88000415 	stw	zero,16(r17)
 8001b1c:	88000515 	stw	zero,20(r17)
 8001b20:	88000615 	stw	zero,24(r17)
 8001b24:	8002f8c0 	call	8002f8c <memset>
 8001b28:	94000317 	ldw	r16,12(r18)
 8001b2c:	00800484 	movi	r2,18
 8001b30:	8c400715 	stw	r17,28(r17)
 8001b34:	8d800815 	stw	r22,32(r17)
 8001b38:	8d400915 	stw	r21,36(r17)
 8001b3c:	8d000a15 	stw	r20,40(r17)
 8001b40:	8cc00b15 	stw	r19,44(r17)
 8001b44:	8080030d 	sth	r2,12(r16)
 8001b48:	00800084 	movi	r2,2
 8001b4c:	80000015 	stw	zero,0(r16)
 8001b50:	80000115 	stw	zero,4(r16)
 8001b54:	80000215 	stw	zero,8(r16)
 8001b58:	80001915 	stw	zero,100(r16)
 8001b5c:	8080038d 	sth	r2,14(r16)
 8001b60:	80000415 	stw	zero,16(r16)
 8001b64:	80000515 	stw	zero,20(r16)
 8001b68:	80000615 	stw	zero,24(r16)
 8001b6c:	b80d883a 	mov	r6,r23
 8001b70:	000b883a 	mov	r5,zero
 8001b74:	81001704 	addi	r4,r16,92
 8001b78:	8002f8c0 	call	8002f8c <memset>
 8001b7c:	00800044 	movi	r2,1
 8001b80:	84000715 	stw	r16,28(r16)
 8001b84:	85800815 	stw	r22,32(r16)
 8001b88:	85400915 	stw	r21,36(r16)
 8001b8c:	85000a15 	stw	r20,40(r16)
 8001b90:	84c00b15 	stw	r19,44(r16)
 8001b94:	90800e15 	stw	r2,56(r18)
 8001b98:	dfc00817 	ldw	ra,32(sp)
 8001b9c:	ddc00717 	ldw	r23,28(sp)
 8001ba0:	dd800617 	ldw	r22,24(sp)
 8001ba4:	dd400517 	ldw	r21,20(sp)
 8001ba8:	dd000417 	ldw	r20,16(sp)
 8001bac:	dcc00317 	ldw	r19,12(sp)
 8001bb0:	dc800217 	ldw	r18,8(sp)
 8001bb4:	dc400117 	ldw	r17,4(sp)
 8001bb8:	dc000017 	ldw	r16,0(sp)
 8001bbc:	dec00904 	addi	sp,sp,36
 8001bc0:	f800283a 	ret

08001bc4 <__fp_lock>:
 8001bc4:	0005883a 	mov	r2,zero
 8001bc8:	f800283a 	ret

08001bcc <__sfmoreglue>:
 8001bcc:	defffc04 	addi	sp,sp,-16
 8001bd0:	dc400115 	stw	r17,4(sp)
 8001bd4:	2c7fffc4 	addi	r17,r5,-1
 8001bd8:	8c401a24 	muli	r17,r17,104
 8001bdc:	dc800215 	stw	r18,8(sp)
 8001be0:	2825883a 	mov	r18,r5
 8001be4:	89401d04 	addi	r5,r17,116
 8001be8:	dc000015 	stw	r16,0(sp)
 8001bec:	dfc00315 	stw	ra,12(sp)
 8001bf0:	80023f80 	call	80023f8 <_malloc_r>
 8001bf4:	1021883a 	mov	r16,r2
 8001bf8:	10000726 	beq	r2,zero,8001c18 <__sfmoreglue+0x4c>
 8001bfc:	11000304 	addi	r4,r2,12
 8001c00:	10000015 	stw	zero,0(r2)
 8001c04:	14800115 	stw	r18,4(r2)
 8001c08:	11000215 	stw	r4,8(r2)
 8001c0c:	89801a04 	addi	r6,r17,104
 8001c10:	000b883a 	mov	r5,zero
 8001c14:	8002f8c0 	call	8002f8c <memset>
 8001c18:	8005883a 	mov	r2,r16
 8001c1c:	dfc00317 	ldw	ra,12(sp)
 8001c20:	dc800217 	ldw	r18,8(sp)
 8001c24:	dc400117 	ldw	r17,4(sp)
 8001c28:	dc000017 	ldw	r16,0(sp)
 8001c2c:	dec00404 	addi	sp,sp,16
 8001c30:	f800283a 	ret

08001c34 <__sfp>:
 8001c34:	defffb04 	addi	sp,sp,-20
 8001c38:	dc000015 	stw	r16,0(sp)
 8001c3c:	04020074 	movhi	r16,2049
 8001c40:	84220304 	addi	r16,r16,-30708
 8001c44:	dcc00315 	stw	r19,12(sp)
 8001c48:	2027883a 	mov	r19,r4
 8001c4c:	81000017 	ldw	r4,0(r16)
 8001c50:	dfc00415 	stw	ra,16(sp)
 8001c54:	dc800215 	stw	r18,8(sp)
 8001c58:	20800e17 	ldw	r2,56(r4)
 8001c5c:	dc400115 	stw	r17,4(sp)
 8001c60:	1000021e 	bne	r2,zero,8001c6c <__sfp+0x38>
 8001c64:	8001a280 	call	8001a28 <__sinit.part.1>
 8001c68:	81000017 	ldw	r4,0(r16)
 8001c6c:	2480b804 	addi	r18,r4,736
 8001c70:	047fffc4 	movi	r17,-1
 8001c74:	91000117 	ldw	r4,4(r18)
 8001c78:	94000217 	ldw	r16,8(r18)
 8001c7c:	213fffc4 	addi	r4,r4,-1
 8001c80:	20000a16 	blt	r4,zero,8001cac <__sfp+0x78>
 8001c84:	8080030f 	ldh	r2,12(r16)
 8001c88:	10000c26 	beq	r2,zero,8001cbc <__sfp+0x88>
 8001c8c:	80c01d04 	addi	r3,r16,116
 8001c90:	00000206 	br	8001c9c <__sfp+0x68>
 8001c94:	18bfe60f 	ldh	r2,-104(r3)
 8001c98:	10000826 	beq	r2,zero,8001cbc <__sfp+0x88>
 8001c9c:	213fffc4 	addi	r4,r4,-1
 8001ca0:	1c3ffd04 	addi	r16,r3,-12
 8001ca4:	18c01a04 	addi	r3,r3,104
 8001ca8:	247ffa1e 	bne	r4,r17,8001c94 <__sfp+0x60>
 8001cac:	90800017 	ldw	r2,0(r18)
 8001cb0:	10001d26 	beq	r2,zero,8001d28 <__sfp+0xf4>
 8001cb4:	1025883a 	mov	r18,r2
 8001cb8:	003fee06 	br	8001c74 <__sfp+0x40>
 8001cbc:	00bfffc4 	movi	r2,-1
 8001cc0:	8080038d 	sth	r2,14(r16)
 8001cc4:	00800044 	movi	r2,1
 8001cc8:	8080030d 	sth	r2,12(r16)
 8001ccc:	80001915 	stw	zero,100(r16)
 8001cd0:	80000015 	stw	zero,0(r16)
 8001cd4:	80000215 	stw	zero,8(r16)
 8001cd8:	80000115 	stw	zero,4(r16)
 8001cdc:	80000415 	stw	zero,16(r16)
 8001ce0:	80000515 	stw	zero,20(r16)
 8001ce4:	80000615 	stw	zero,24(r16)
 8001ce8:	01800204 	movi	r6,8
 8001cec:	000b883a 	mov	r5,zero
 8001cf0:	81001704 	addi	r4,r16,92
 8001cf4:	8002f8c0 	call	8002f8c <memset>
 8001cf8:	8005883a 	mov	r2,r16
 8001cfc:	80000c15 	stw	zero,48(r16)
 8001d00:	80000d15 	stw	zero,52(r16)
 8001d04:	80001115 	stw	zero,68(r16)
 8001d08:	80001215 	stw	zero,72(r16)
 8001d0c:	dfc00417 	ldw	ra,16(sp)
 8001d10:	dcc00317 	ldw	r19,12(sp)
 8001d14:	dc800217 	ldw	r18,8(sp)
 8001d18:	dc400117 	ldw	r17,4(sp)
 8001d1c:	dc000017 	ldw	r16,0(sp)
 8001d20:	dec00504 	addi	sp,sp,20
 8001d24:	f800283a 	ret
 8001d28:	01400104 	movi	r5,4
 8001d2c:	9809883a 	mov	r4,r19
 8001d30:	8001bcc0 	call	8001bcc <__sfmoreglue>
 8001d34:	90800015 	stw	r2,0(r18)
 8001d38:	103fde1e 	bne	r2,zero,8001cb4 <__sfp+0x80>
 8001d3c:	00800304 	movi	r2,12
 8001d40:	98800015 	stw	r2,0(r19)
 8001d44:	0005883a 	mov	r2,zero
 8001d48:	003ff006 	br	8001d0c <__sfp+0xd8>

08001d4c <_cleanup>:
 8001d4c:	00820074 	movhi	r2,2049
 8001d50:	10a20304 	addi	r2,r2,-30708
 8001d54:	11000017 	ldw	r4,0(r2)
 8001d58:	01420034 	movhi	r5,2048
 8001d5c:	294e6c04 	addi	r5,r5,14768
 8001d60:	80023341 	jmpi	8002334 <_fwalk_reent>

08001d64 <__sinit>:
 8001d64:	20800e17 	ldw	r2,56(r4)
 8001d68:	10000126 	beq	r2,zero,8001d70 <__sinit+0xc>
 8001d6c:	f800283a 	ret
 8001d70:	8001a281 	jmpi	8001a28 <__sinit.part.1>

08001d74 <__sfp_lock_acquire>:
 8001d74:	f800283a 	ret

08001d78 <__sfp_lock_release>:
 8001d78:	f800283a 	ret

08001d7c <__sinit_lock_acquire>:
 8001d7c:	f800283a 	ret

08001d80 <__sinit_lock_release>:
 8001d80:	f800283a 	ret

08001d84 <__fp_lock_all>:
 8001d84:	00820074 	movhi	r2,2049
 8001d88:	10a20404 	addi	r2,r2,-30704
 8001d8c:	11000017 	ldw	r4,0(r2)
 8001d90:	01420034 	movhi	r5,2048
 8001d94:	2946f104 	addi	r5,r5,7108
 8001d98:	80022701 	jmpi	8002270 <_fwalk>

08001d9c <__fp_unlock_all>:
 8001d9c:	00820074 	movhi	r2,2049
 8001da0:	10a20404 	addi	r2,r2,-30704
 8001da4:	11000017 	ldw	r4,0(r2)
 8001da8:	01420034 	movhi	r5,2048
 8001dac:	29468504 	addi	r5,r5,6676
 8001db0:	80022701 	jmpi	8002270 <_fwalk>

08001db4 <__sfvwrite_r>:
 8001db4:	30800217 	ldw	r2,8(r6)
 8001db8:	10006726 	beq	r2,zero,8001f58 <__sfvwrite_r+0x1a4>
 8001dbc:	28c0030b 	ldhu	r3,12(r5)
 8001dc0:	defff404 	addi	sp,sp,-48
 8001dc4:	dd400715 	stw	r21,28(sp)
 8001dc8:	dd000615 	stw	r20,24(sp)
 8001dcc:	dc000215 	stw	r16,8(sp)
 8001dd0:	dfc00b15 	stw	ra,44(sp)
 8001dd4:	df000a15 	stw	fp,40(sp)
 8001dd8:	ddc00915 	stw	r23,36(sp)
 8001ddc:	dd800815 	stw	r22,32(sp)
 8001de0:	dcc00515 	stw	r19,20(sp)
 8001de4:	dc800415 	stw	r18,16(sp)
 8001de8:	dc400315 	stw	r17,12(sp)
 8001dec:	1880020c 	andi	r2,r3,8
 8001df0:	2821883a 	mov	r16,r5
 8001df4:	202b883a 	mov	r21,r4
 8001df8:	3029883a 	mov	r20,r6
 8001dfc:	10002726 	beq	r2,zero,8001e9c <__sfvwrite_r+0xe8>
 8001e00:	28800417 	ldw	r2,16(r5)
 8001e04:	10002526 	beq	r2,zero,8001e9c <__sfvwrite_r+0xe8>
 8001e08:	1880008c 	andi	r2,r3,2
 8001e0c:	a4400017 	ldw	r17,0(r20)
 8001e10:	10002a26 	beq	r2,zero,8001ebc <__sfvwrite_r+0x108>
 8001e14:	05a00034 	movhi	r22,32768
 8001e18:	0027883a 	mov	r19,zero
 8001e1c:	0025883a 	mov	r18,zero
 8001e20:	b5bf0004 	addi	r22,r22,-1024
 8001e24:	980d883a 	mov	r6,r19
 8001e28:	a809883a 	mov	r4,r21
 8001e2c:	90004626 	beq	r18,zero,8001f48 <__sfvwrite_r+0x194>
 8001e30:	900f883a 	mov	r7,r18
 8001e34:	b480022e 	bgeu	r22,r18,8001e40 <__sfvwrite_r+0x8c>
 8001e38:	01e00034 	movhi	r7,32768
 8001e3c:	39ff0004 	addi	r7,r7,-1024
 8001e40:	80800917 	ldw	r2,36(r16)
 8001e44:	81400717 	ldw	r5,28(r16)
 8001e48:	103ee83a 	callr	r2
 8001e4c:	0080570e 	bge	zero,r2,8001fac <__sfvwrite_r+0x1f8>
 8001e50:	a0c00217 	ldw	r3,8(r20)
 8001e54:	98a7883a 	add	r19,r19,r2
 8001e58:	90a5c83a 	sub	r18,r18,r2
 8001e5c:	1885c83a 	sub	r2,r3,r2
 8001e60:	a0800215 	stw	r2,8(r20)
 8001e64:	103fef1e 	bne	r2,zero,8001e24 <__sfvwrite_r+0x70>
 8001e68:	0005883a 	mov	r2,zero
 8001e6c:	dfc00b17 	ldw	ra,44(sp)
 8001e70:	df000a17 	ldw	fp,40(sp)
 8001e74:	ddc00917 	ldw	r23,36(sp)
 8001e78:	dd800817 	ldw	r22,32(sp)
 8001e7c:	dd400717 	ldw	r21,28(sp)
 8001e80:	dd000617 	ldw	r20,24(sp)
 8001e84:	dcc00517 	ldw	r19,20(sp)
 8001e88:	dc800417 	ldw	r18,16(sp)
 8001e8c:	dc400317 	ldw	r17,12(sp)
 8001e90:	dc000217 	ldw	r16,8(sp)
 8001e94:	dec00c04 	addi	sp,sp,48
 8001e98:	f800283a 	ret
 8001e9c:	800b883a 	mov	r5,r16
 8001ea0:	a809883a 	mov	r4,r21
 8001ea4:	80038080 	call	8003808 <__swsetup_r>
 8001ea8:	1000eb1e 	bne	r2,zero,8002258 <__sfvwrite_r+0x4a4>
 8001eac:	80c0030b 	ldhu	r3,12(r16)
 8001eb0:	a4400017 	ldw	r17,0(r20)
 8001eb4:	1880008c 	andi	r2,r3,2
 8001eb8:	103fd61e 	bne	r2,zero,8001e14 <__sfvwrite_r+0x60>
 8001ebc:	1880004c 	andi	r2,r3,1
 8001ec0:	10003f1e 	bne	r2,zero,8001fc0 <__sfvwrite_r+0x20c>
 8001ec4:	0039883a 	mov	fp,zero
 8001ec8:	0025883a 	mov	r18,zero
 8001ecc:	90001a26 	beq	r18,zero,8001f38 <__sfvwrite_r+0x184>
 8001ed0:	1880800c 	andi	r2,r3,512
 8001ed4:	84c00217 	ldw	r19,8(r16)
 8001ed8:	10002126 	beq	r2,zero,8001f60 <__sfvwrite_r+0x1ac>
 8001edc:	982f883a 	mov	r23,r19
 8001ee0:	94c09336 	bltu	r18,r19,8002130 <__sfvwrite_r+0x37c>
 8001ee4:	1881200c 	andi	r2,r3,1152
 8001ee8:	10009e1e 	bne	r2,zero,8002164 <__sfvwrite_r+0x3b0>
 8001eec:	81000017 	ldw	r4,0(r16)
 8001ef0:	b80d883a 	mov	r6,r23
 8001ef4:	e00b883a 	mov	r5,fp
 8001ef8:	8002e300 	call	8002e30 <memmove>
 8001efc:	80c00217 	ldw	r3,8(r16)
 8001f00:	81000017 	ldw	r4,0(r16)
 8001f04:	9005883a 	mov	r2,r18
 8001f08:	1ce7c83a 	sub	r19,r3,r19
 8001f0c:	25cf883a 	add	r7,r4,r23
 8001f10:	84c00215 	stw	r19,8(r16)
 8001f14:	81c00015 	stw	r7,0(r16)
 8001f18:	a0c00217 	ldw	r3,8(r20)
 8001f1c:	e0b9883a 	add	fp,fp,r2
 8001f20:	90a5c83a 	sub	r18,r18,r2
 8001f24:	18a7c83a 	sub	r19,r3,r2
 8001f28:	a4c00215 	stw	r19,8(r20)
 8001f2c:	983fce26 	beq	r19,zero,8001e68 <__sfvwrite_r+0xb4>
 8001f30:	80c0030b 	ldhu	r3,12(r16)
 8001f34:	903fe61e 	bne	r18,zero,8001ed0 <__sfvwrite_r+0x11c>
 8001f38:	8f000017 	ldw	fp,0(r17)
 8001f3c:	8c800117 	ldw	r18,4(r17)
 8001f40:	8c400204 	addi	r17,r17,8
 8001f44:	003fe106 	br	8001ecc <__sfvwrite_r+0x118>
 8001f48:	8cc00017 	ldw	r19,0(r17)
 8001f4c:	8c800117 	ldw	r18,4(r17)
 8001f50:	8c400204 	addi	r17,r17,8
 8001f54:	003fb306 	br	8001e24 <__sfvwrite_r+0x70>
 8001f58:	0005883a 	mov	r2,zero
 8001f5c:	f800283a 	ret
 8001f60:	81000017 	ldw	r4,0(r16)
 8001f64:	80800417 	ldw	r2,16(r16)
 8001f68:	11005736 	bltu	r2,r4,80020c8 <__sfvwrite_r+0x314>
 8001f6c:	85c00517 	ldw	r23,20(r16)
 8001f70:	95c05536 	bltu	r18,r23,80020c8 <__sfvwrite_r+0x314>
 8001f74:	00a00034 	movhi	r2,32768
 8001f78:	10bfffc4 	addi	r2,r2,-1
 8001f7c:	9009883a 	mov	r4,r18
 8001f80:	1480012e 	bgeu	r2,r18,8001f88 <__sfvwrite_r+0x1d4>
 8001f84:	1009883a 	mov	r4,r2
 8001f88:	b80b883a 	mov	r5,r23
 8001f8c:	80016780 	call	8001678 <__divsi3>
 8001f90:	15cf383a 	mul	r7,r2,r23
 8001f94:	81400717 	ldw	r5,28(r16)
 8001f98:	80800917 	ldw	r2,36(r16)
 8001f9c:	e00d883a 	mov	r6,fp
 8001fa0:	a809883a 	mov	r4,r21
 8001fa4:	103ee83a 	callr	r2
 8001fa8:	00bfdb16 	blt	zero,r2,8001f18 <__sfvwrite_r+0x164>
 8001fac:	8080030b 	ldhu	r2,12(r16)
 8001fb0:	10801014 	ori	r2,r2,64
 8001fb4:	8080030d 	sth	r2,12(r16)
 8001fb8:	00bfffc4 	movi	r2,-1
 8001fbc:	003fab06 	br	8001e6c <__sfvwrite_r+0xb8>
 8001fc0:	0027883a 	mov	r19,zero
 8001fc4:	0011883a 	mov	r8,zero
 8001fc8:	0039883a 	mov	fp,zero
 8001fcc:	0025883a 	mov	r18,zero
 8001fd0:	90001f26 	beq	r18,zero,8002050 <__sfvwrite_r+0x29c>
 8001fd4:	40005a26 	beq	r8,zero,8002140 <__sfvwrite_r+0x38c>
 8001fd8:	982d883a 	mov	r22,r19
 8001fdc:	94c0012e 	bgeu	r18,r19,8001fe4 <__sfvwrite_r+0x230>
 8001fe0:	902d883a 	mov	r22,r18
 8001fe4:	81000017 	ldw	r4,0(r16)
 8001fe8:	80800417 	ldw	r2,16(r16)
 8001fec:	b02f883a 	mov	r23,r22
 8001ff0:	81c00517 	ldw	r7,20(r16)
 8001ff4:	1100032e 	bgeu	r2,r4,8002004 <__sfvwrite_r+0x250>
 8001ff8:	80c00217 	ldw	r3,8(r16)
 8001ffc:	38c7883a 	add	r3,r7,r3
 8002000:	1d801816 	blt	r3,r22,8002064 <__sfvwrite_r+0x2b0>
 8002004:	b1c03e16 	blt	r22,r7,8002100 <__sfvwrite_r+0x34c>
 8002008:	80800917 	ldw	r2,36(r16)
 800200c:	81400717 	ldw	r5,28(r16)
 8002010:	e00d883a 	mov	r6,fp
 8002014:	da000115 	stw	r8,4(sp)
 8002018:	a809883a 	mov	r4,r21
 800201c:	103ee83a 	callr	r2
 8002020:	102f883a 	mov	r23,r2
 8002024:	da000117 	ldw	r8,4(sp)
 8002028:	00bfe00e 	bge	zero,r2,8001fac <__sfvwrite_r+0x1f8>
 800202c:	9de7c83a 	sub	r19,r19,r23
 8002030:	98001f26 	beq	r19,zero,80020b0 <__sfvwrite_r+0x2fc>
 8002034:	a0800217 	ldw	r2,8(r20)
 8002038:	e5f9883a 	add	fp,fp,r23
 800203c:	95e5c83a 	sub	r18,r18,r23
 8002040:	15efc83a 	sub	r23,r2,r23
 8002044:	a5c00215 	stw	r23,8(r20)
 8002048:	b83f8726 	beq	r23,zero,8001e68 <__sfvwrite_r+0xb4>
 800204c:	903fe11e 	bne	r18,zero,8001fd4 <__sfvwrite_r+0x220>
 8002050:	8f000017 	ldw	fp,0(r17)
 8002054:	8c800117 	ldw	r18,4(r17)
 8002058:	0011883a 	mov	r8,zero
 800205c:	8c400204 	addi	r17,r17,8
 8002060:	003fdb06 	br	8001fd0 <__sfvwrite_r+0x21c>
 8002064:	180d883a 	mov	r6,r3
 8002068:	e00b883a 	mov	r5,fp
 800206c:	da000115 	stw	r8,4(sp)
 8002070:	d8c00015 	stw	r3,0(sp)
 8002074:	8002e300 	call	8002e30 <memmove>
 8002078:	d8c00017 	ldw	r3,0(sp)
 800207c:	80800017 	ldw	r2,0(r16)
 8002080:	800b883a 	mov	r5,r16
 8002084:	a809883a 	mov	r4,r21
 8002088:	10c5883a 	add	r2,r2,r3
 800208c:	80800015 	stw	r2,0(r16)
 8002090:	d8c00015 	stw	r3,0(sp)
 8002094:	8003cd00 	call	8003cd0 <_fflush_r>
 8002098:	d8c00017 	ldw	r3,0(sp)
 800209c:	da000117 	ldw	r8,4(sp)
 80020a0:	103fc21e 	bne	r2,zero,8001fac <__sfvwrite_r+0x1f8>
 80020a4:	182f883a 	mov	r23,r3
 80020a8:	9de7c83a 	sub	r19,r19,r23
 80020ac:	983fe11e 	bne	r19,zero,8002034 <__sfvwrite_r+0x280>
 80020b0:	800b883a 	mov	r5,r16
 80020b4:	a809883a 	mov	r4,r21
 80020b8:	8003cd00 	call	8003cd0 <_fflush_r>
 80020bc:	103fbb1e 	bne	r2,zero,8001fac <__sfvwrite_r+0x1f8>
 80020c0:	0011883a 	mov	r8,zero
 80020c4:	003fdb06 	br	8002034 <__sfvwrite_r+0x280>
 80020c8:	94c0012e 	bgeu	r18,r19,80020d0 <__sfvwrite_r+0x31c>
 80020cc:	9027883a 	mov	r19,r18
 80020d0:	980d883a 	mov	r6,r19
 80020d4:	e00b883a 	mov	r5,fp
 80020d8:	8002e300 	call	8002e30 <memmove>
 80020dc:	80800217 	ldw	r2,8(r16)
 80020e0:	80c00017 	ldw	r3,0(r16)
 80020e4:	14c5c83a 	sub	r2,r2,r19
 80020e8:	1cc7883a 	add	r3,r3,r19
 80020ec:	80800215 	stw	r2,8(r16)
 80020f0:	80c00015 	stw	r3,0(r16)
 80020f4:	10004326 	beq	r2,zero,8002204 <__sfvwrite_r+0x450>
 80020f8:	9805883a 	mov	r2,r19
 80020fc:	003f8606 	br	8001f18 <__sfvwrite_r+0x164>
 8002100:	b00d883a 	mov	r6,r22
 8002104:	e00b883a 	mov	r5,fp
 8002108:	da000115 	stw	r8,4(sp)
 800210c:	8002e300 	call	8002e30 <memmove>
 8002110:	80800217 	ldw	r2,8(r16)
 8002114:	80c00017 	ldw	r3,0(r16)
 8002118:	da000117 	ldw	r8,4(sp)
 800211c:	1585c83a 	sub	r2,r2,r22
 8002120:	1dad883a 	add	r22,r3,r22
 8002124:	80800215 	stw	r2,8(r16)
 8002128:	85800015 	stw	r22,0(r16)
 800212c:	003fbf06 	br	800202c <__sfvwrite_r+0x278>
 8002130:	81000017 	ldw	r4,0(r16)
 8002134:	9027883a 	mov	r19,r18
 8002138:	902f883a 	mov	r23,r18
 800213c:	003f6c06 	br	8001ef0 <__sfvwrite_r+0x13c>
 8002140:	900d883a 	mov	r6,r18
 8002144:	01400284 	movi	r5,10
 8002148:	e009883a 	mov	r4,fp
 800214c:	8002c040 	call	8002c04 <memchr>
 8002150:	10003e26 	beq	r2,zero,800224c <__sfvwrite_r+0x498>
 8002154:	10800044 	addi	r2,r2,1
 8002158:	1727c83a 	sub	r19,r2,fp
 800215c:	02000044 	movi	r8,1
 8002160:	003f9d06 	br	8001fd8 <__sfvwrite_r+0x224>
 8002164:	80800517 	ldw	r2,20(r16)
 8002168:	81400417 	ldw	r5,16(r16)
 800216c:	81c00017 	ldw	r7,0(r16)
 8002170:	10a7883a 	add	r19,r2,r2
 8002174:	9885883a 	add	r2,r19,r2
 8002178:	1026d7fa 	srli	r19,r2,31
 800217c:	396dc83a 	sub	r22,r7,r5
 8002180:	b1000044 	addi	r4,r22,1
 8002184:	9885883a 	add	r2,r19,r2
 8002188:	1027d07a 	srai	r19,r2,1
 800218c:	2485883a 	add	r2,r4,r18
 8002190:	980d883a 	mov	r6,r19
 8002194:	9880022e 	bgeu	r19,r2,80021a0 <__sfvwrite_r+0x3ec>
 8002198:	1027883a 	mov	r19,r2
 800219c:	100d883a 	mov	r6,r2
 80021a0:	18c1000c 	andi	r3,r3,1024
 80021a4:	18001c26 	beq	r3,zero,8002218 <__sfvwrite_r+0x464>
 80021a8:	300b883a 	mov	r5,r6
 80021ac:	a809883a 	mov	r4,r21
 80021b0:	80023f80 	call	80023f8 <_malloc_r>
 80021b4:	102f883a 	mov	r23,r2
 80021b8:	10002926 	beq	r2,zero,8002260 <__sfvwrite_r+0x4ac>
 80021bc:	81400417 	ldw	r5,16(r16)
 80021c0:	b00d883a 	mov	r6,r22
 80021c4:	1009883a 	mov	r4,r2
 80021c8:	8002ce80 	call	8002ce8 <memcpy>
 80021cc:	8080030b 	ldhu	r2,12(r16)
 80021d0:	00fedfc4 	movi	r3,-1153
 80021d4:	10c4703a 	and	r2,r2,r3
 80021d8:	10802014 	ori	r2,r2,128
 80021dc:	8080030d 	sth	r2,12(r16)
 80021e0:	bd89883a 	add	r4,r23,r22
 80021e4:	9d8fc83a 	sub	r7,r19,r22
 80021e8:	85c00415 	stw	r23,16(r16)
 80021ec:	84c00515 	stw	r19,20(r16)
 80021f0:	81000015 	stw	r4,0(r16)
 80021f4:	9027883a 	mov	r19,r18
 80021f8:	81c00215 	stw	r7,8(r16)
 80021fc:	902f883a 	mov	r23,r18
 8002200:	003f3b06 	br	8001ef0 <__sfvwrite_r+0x13c>
 8002204:	800b883a 	mov	r5,r16
 8002208:	a809883a 	mov	r4,r21
 800220c:	8003cd00 	call	8003cd0 <_fflush_r>
 8002210:	103fb926 	beq	r2,zero,80020f8 <__sfvwrite_r+0x344>
 8002214:	003f6506 	br	8001fac <__sfvwrite_r+0x1f8>
 8002218:	a809883a 	mov	r4,r21
 800221c:	80030b40 	call	80030b4 <_realloc_r>
 8002220:	102f883a 	mov	r23,r2
 8002224:	103fee1e 	bne	r2,zero,80021e0 <__sfvwrite_r+0x42c>
 8002228:	81400417 	ldw	r5,16(r16)
 800222c:	a809883a 	mov	r4,r21
 8002230:	8003e800 	call	8003e80 <_free_r>
 8002234:	8080030b 	ldhu	r2,12(r16)
 8002238:	00ffdfc4 	movi	r3,-129
 800223c:	1884703a 	and	r2,r3,r2
 8002240:	00c00304 	movi	r3,12
 8002244:	a8c00015 	stw	r3,0(r21)
 8002248:	003f5906 	br	8001fb0 <__sfvwrite_r+0x1fc>
 800224c:	94c00044 	addi	r19,r18,1
 8002250:	02000044 	movi	r8,1
 8002254:	003f6006 	br	8001fd8 <__sfvwrite_r+0x224>
 8002258:	00bfffc4 	movi	r2,-1
 800225c:	003f0306 	br	8001e6c <__sfvwrite_r+0xb8>
 8002260:	00800304 	movi	r2,12
 8002264:	a8800015 	stw	r2,0(r21)
 8002268:	8080030b 	ldhu	r2,12(r16)
 800226c:	003f5006 	br	8001fb0 <__sfvwrite_r+0x1fc>

08002270 <_fwalk>:
 8002270:	defff704 	addi	sp,sp,-36
 8002274:	dd000415 	stw	r20,16(sp)
 8002278:	dfc00815 	stw	ra,32(sp)
 800227c:	ddc00715 	stw	r23,28(sp)
 8002280:	dd800615 	stw	r22,24(sp)
 8002284:	dd400515 	stw	r21,20(sp)
 8002288:	dcc00315 	stw	r19,12(sp)
 800228c:	dc800215 	stw	r18,8(sp)
 8002290:	dc400115 	stw	r17,4(sp)
 8002294:	dc000015 	stw	r16,0(sp)
 8002298:	2500b804 	addi	r20,r4,736
 800229c:	a0002326 	beq	r20,zero,800232c <_fwalk+0xbc>
 80022a0:	282b883a 	mov	r21,r5
 80022a4:	002f883a 	mov	r23,zero
 80022a8:	05800044 	movi	r22,1
 80022ac:	04ffffc4 	movi	r19,-1
 80022b0:	a4400117 	ldw	r17,4(r20)
 80022b4:	a4800217 	ldw	r18,8(r20)
 80022b8:	8c7fffc4 	addi	r17,r17,-1
 80022bc:	88000d16 	blt	r17,zero,80022f4 <_fwalk+0x84>
 80022c0:	94000304 	addi	r16,r18,12
 80022c4:	94800384 	addi	r18,r18,14
 80022c8:	8080000b 	ldhu	r2,0(r16)
 80022cc:	8c7fffc4 	addi	r17,r17,-1
 80022d0:	813ffd04 	addi	r4,r16,-12
 80022d4:	b080042e 	bgeu	r22,r2,80022e8 <_fwalk+0x78>
 80022d8:	9080000f 	ldh	r2,0(r18)
 80022dc:	14c00226 	beq	r2,r19,80022e8 <_fwalk+0x78>
 80022e0:	a83ee83a 	callr	r21
 80022e4:	b8aeb03a 	or	r23,r23,r2
 80022e8:	84001a04 	addi	r16,r16,104
 80022ec:	94801a04 	addi	r18,r18,104
 80022f0:	8cfff51e 	bne	r17,r19,80022c8 <_fwalk+0x58>
 80022f4:	a5000017 	ldw	r20,0(r20)
 80022f8:	a03fed1e 	bne	r20,zero,80022b0 <_fwalk+0x40>
 80022fc:	b805883a 	mov	r2,r23
 8002300:	dfc00817 	ldw	ra,32(sp)
 8002304:	ddc00717 	ldw	r23,28(sp)
 8002308:	dd800617 	ldw	r22,24(sp)
 800230c:	dd400517 	ldw	r21,20(sp)
 8002310:	dd000417 	ldw	r20,16(sp)
 8002314:	dcc00317 	ldw	r19,12(sp)
 8002318:	dc800217 	ldw	r18,8(sp)
 800231c:	dc400117 	ldw	r17,4(sp)
 8002320:	dc000017 	ldw	r16,0(sp)
 8002324:	dec00904 	addi	sp,sp,36
 8002328:	f800283a 	ret
 800232c:	002f883a 	mov	r23,zero
 8002330:	003ff206 	br	80022fc <_fwalk+0x8c>

08002334 <_fwalk_reent>:
 8002334:	defff704 	addi	sp,sp,-36
 8002338:	dd000415 	stw	r20,16(sp)
 800233c:	dfc00815 	stw	ra,32(sp)
 8002340:	ddc00715 	stw	r23,28(sp)
 8002344:	dd800615 	stw	r22,24(sp)
 8002348:	dd400515 	stw	r21,20(sp)
 800234c:	dcc00315 	stw	r19,12(sp)
 8002350:	dc800215 	stw	r18,8(sp)
 8002354:	dc400115 	stw	r17,4(sp)
 8002358:	dc000015 	stw	r16,0(sp)
 800235c:	2500b804 	addi	r20,r4,736
 8002360:	a0002326 	beq	r20,zero,80023f0 <_fwalk_reent+0xbc>
 8002364:	282b883a 	mov	r21,r5
 8002368:	2027883a 	mov	r19,r4
 800236c:	002f883a 	mov	r23,zero
 8002370:	05800044 	movi	r22,1
 8002374:	04bfffc4 	movi	r18,-1
 8002378:	a4400117 	ldw	r17,4(r20)
 800237c:	a4000217 	ldw	r16,8(r20)
 8002380:	8c7fffc4 	addi	r17,r17,-1
 8002384:	88000c16 	blt	r17,zero,80023b8 <_fwalk_reent+0x84>
 8002388:	84000304 	addi	r16,r16,12
 800238c:	8080000b 	ldhu	r2,0(r16)
 8002390:	8c7fffc4 	addi	r17,r17,-1
 8002394:	817ffd04 	addi	r5,r16,-12
 8002398:	b080052e 	bgeu	r22,r2,80023b0 <_fwalk_reent+0x7c>
 800239c:	8080008f 	ldh	r2,2(r16)
 80023a0:	9809883a 	mov	r4,r19
 80023a4:	14800226 	beq	r2,r18,80023b0 <_fwalk_reent+0x7c>
 80023a8:	a83ee83a 	callr	r21
 80023ac:	b8aeb03a 	or	r23,r23,r2
 80023b0:	84001a04 	addi	r16,r16,104
 80023b4:	8cbff51e 	bne	r17,r18,800238c <_fwalk_reent+0x58>
 80023b8:	a5000017 	ldw	r20,0(r20)
 80023bc:	a03fee1e 	bne	r20,zero,8002378 <_fwalk_reent+0x44>
 80023c0:	b805883a 	mov	r2,r23
 80023c4:	dfc00817 	ldw	ra,32(sp)
 80023c8:	ddc00717 	ldw	r23,28(sp)
 80023cc:	dd800617 	ldw	r22,24(sp)
 80023d0:	dd400517 	ldw	r21,20(sp)
 80023d4:	dd000417 	ldw	r20,16(sp)
 80023d8:	dcc00317 	ldw	r19,12(sp)
 80023dc:	dc800217 	ldw	r18,8(sp)
 80023e0:	dc400117 	ldw	r17,4(sp)
 80023e4:	dc000017 	ldw	r16,0(sp)
 80023e8:	dec00904 	addi	sp,sp,36
 80023ec:	f800283a 	ret
 80023f0:	002f883a 	mov	r23,zero
 80023f4:	003ff206 	br	80023c0 <_fwalk_reent+0x8c>

080023f8 <_malloc_r>:
 80023f8:	defff504 	addi	sp,sp,-44
 80023fc:	dc800315 	stw	r18,12(sp)
 8002400:	dfc00a15 	stw	ra,40(sp)
 8002404:	df000915 	stw	fp,36(sp)
 8002408:	ddc00815 	stw	r23,32(sp)
 800240c:	dd800715 	stw	r22,28(sp)
 8002410:	dd400615 	stw	r21,24(sp)
 8002414:	dd000515 	stw	r20,20(sp)
 8002418:	dcc00415 	stw	r19,16(sp)
 800241c:	dc400215 	stw	r17,8(sp)
 8002420:	dc000115 	stw	r16,4(sp)
 8002424:	288002c4 	addi	r2,r5,11
 8002428:	00c00584 	movi	r3,22
 800242c:	2025883a 	mov	r18,r4
 8002430:	18807f2e 	bgeu	r3,r2,8002630 <_malloc_r+0x238>
 8002434:	047ffe04 	movi	r17,-8
 8002438:	1462703a 	and	r17,r2,r17
 800243c:	8800a316 	blt	r17,zero,80026cc <_malloc_r+0x2d4>
 8002440:	8940a236 	bltu	r17,r5,80026cc <_malloc_r+0x2d4>
 8002444:	8004a980 	call	8004a98 <__malloc_lock>
 8002448:	00807dc4 	movi	r2,503
 800244c:	1441e92e 	bgeu	r2,r17,8002bf4 <_malloc_r+0x7fc>
 8002450:	8804d27a 	srli	r2,r17,9
 8002454:	1000a126 	beq	r2,zero,80026dc <_malloc_r+0x2e4>
 8002458:	00c00104 	movi	r3,4
 800245c:	18811e36 	bltu	r3,r2,80028d8 <_malloc_r+0x4e0>
 8002460:	8804d1ba 	srli	r2,r17,6
 8002464:	12000e44 	addi	r8,r2,57
 8002468:	11c00e04 	addi	r7,r2,56
 800246c:	4209883a 	add	r4,r8,r8
 8002470:	04c20034 	movhi	r19,2048
 8002474:	2109883a 	add	r4,r4,r4
 8002478:	9cdc7f04 	addi	r19,r19,29180
 800247c:	2109883a 	add	r4,r4,r4
 8002480:	9909883a 	add	r4,r19,r4
 8002484:	24000117 	ldw	r16,4(r4)
 8002488:	213ffe04 	addi	r4,r4,-8
 800248c:	24009726 	beq	r4,r16,80026ec <_malloc_r+0x2f4>
 8002490:	80800117 	ldw	r2,4(r16)
 8002494:	01bfff04 	movi	r6,-4
 8002498:	014003c4 	movi	r5,15
 800249c:	1184703a 	and	r2,r2,r6
 80024a0:	1447c83a 	sub	r3,r2,r17
 80024a4:	28c00716 	blt	r5,r3,80024c4 <_malloc_r+0xcc>
 80024a8:	1800920e 	bge	r3,zero,80026f4 <_malloc_r+0x2fc>
 80024ac:	84000317 	ldw	r16,12(r16)
 80024b0:	24008e26 	beq	r4,r16,80026ec <_malloc_r+0x2f4>
 80024b4:	80800117 	ldw	r2,4(r16)
 80024b8:	1184703a 	and	r2,r2,r6
 80024bc:	1447c83a 	sub	r3,r2,r17
 80024c0:	28fff90e 	bge	r5,r3,80024a8 <_malloc_r+0xb0>
 80024c4:	3809883a 	mov	r4,r7
 80024c8:	01820034 	movhi	r6,2048
 80024cc:	9c000417 	ldw	r16,16(r19)
 80024d0:	319c7f04 	addi	r6,r6,29180
 80024d4:	32000204 	addi	r8,r6,8
 80024d8:	82013426 	beq	r16,r8,80029ac <_malloc_r+0x5b4>
 80024dc:	80c00117 	ldw	r3,4(r16)
 80024e0:	00bfff04 	movi	r2,-4
 80024e4:	188e703a 	and	r7,r3,r2
 80024e8:	3c45c83a 	sub	r2,r7,r17
 80024ec:	00c003c4 	movi	r3,15
 80024f0:	18811f16 	blt	r3,r2,8002970 <_malloc_r+0x578>
 80024f4:	32000515 	stw	r8,20(r6)
 80024f8:	32000415 	stw	r8,16(r6)
 80024fc:	10007f0e 	bge	r2,zero,80026fc <_malloc_r+0x304>
 8002500:	00807fc4 	movi	r2,511
 8002504:	11c0fd36 	bltu	r2,r7,80028fc <_malloc_r+0x504>
 8002508:	3806d0fa 	srli	r3,r7,3
 800250c:	01c00044 	movi	r7,1
 8002510:	30800117 	ldw	r2,4(r6)
 8002514:	19400044 	addi	r5,r3,1
 8002518:	294b883a 	add	r5,r5,r5
 800251c:	1807d0ba 	srai	r3,r3,2
 8002520:	294b883a 	add	r5,r5,r5
 8002524:	294b883a 	add	r5,r5,r5
 8002528:	298b883a 	add	r5,r5,r6
 800252c:	38c6983a 	sll	r3,r7,r3
 8002530:	29c00017 	ldw	r7,0(r5)
 8002534:	2a7ffe04 	addi	r9,r5,-8
 8002538:	1886b03a 	or	r3,r3,r2
 800253c:	82400315 	stw	r9,12(r16)
 8002540:	81c00215 	stw	r7,8(r16)
 8002544:	30c00115 	stw	r3,4(r6)
 8002548:	2c000015 	stw	r16,0(r5)
 800254c:	3c000315 	stw	r16,12(r7)
 8002550:	2005d0ba 	srai	r2,r4,2
 8002554:	01400044 	movi	r5,1
 8002558:	288a983a 	sll	r5,r5,r2
 800255c:	19406f36 	bltu	r3,r5,800271c <_malloc_r+0x324>
 8002560:	28c4703a 	and	r2,r5,r3
 8002564:	10000a1e 	bne	r2,zero,8002590 <_malloc_r+0x198>
 8002568:	00bfff04 	movi	r2,-4
 800256c:	294b883a 	add	r5,r5,r5
 8002570:	2088703a 	and	r4,r4,r2
 8002574:	28c4703a 	and	r2,r5,r3
 8002578:	21000104 	addi	r4,r4,4
 800257c:	1000041e 	bne	r2,zero,8002590 <_malloc_r+0x198>
 8002580:	294b883a 	add	r5,r5,r5
 8002584:	28c4703a 	and	r2,r5,r3
 8002588:	21000104 	addi	r4,r4,4
 800258c:	103ffc26 	beq	r2,zero,8002580 <_malloc_r+0x188>
 8002590:	02bfff04 	movi	r10,-4
 8002594:	024003c4 	movi	r9,15
 8002598:	21800044 	addi	r6,r4,1
 800259c:	318d883a 	add	r6,r6,r6
 80025a0:	318d883a 	add	r6,r6,r6
 80025a4:	318d883a 	add	r6,r6,r6
 80025a8:	998d883a 	add	r6,r19,r6
 80025ac:	333ffe04 	addi	r12,r6,-8
 80025b0:	2017883a 	mov	r11,r4
 80025b4:	31800104 	addi	r6,r6,4
 80025b8:	34000017 	ldw	r16,0(r6)
 80025bc:	31fffd04 	addi	r7,r6,-12
 80025c0:	81c0041e 	bne	r16,r7,80025d4 <_malloc_r+0x1dc>
 80025c4:	0000fb06 	br	80029b4 <_malloc_r+0x5bc>
 80025c8:	1801030e 	bge	r3,zero,80029d8 <_malloc_r+0x5e0>
 80025cc:	84000317 	ldw	r16,12(r16)
 80025d0:	81c0f826 	beq	r16,r7,80029b4 <_malloc_r+0x5bc>
 80025d4:	80800117 	ldw	r2,4(r16)
 80025d8:	1284703a 	and	r2,r2,r10
 80025dc:	1447c83a 	sub	r3,r2,r17
 80025e0:	48fff90e 	bge	r9,r3,80025c8 <_malloc_r+0x1d0>
 80025e4:	80800317 	ldw	r2,12(r16)
 80025e8:	81000217 	ldw	r4,8(r16)
 80025ec:	89400054 	ori	r5,r17,1
 80025f0:	81400115 	stw	r5,4(r16)
 80025f4:	20800315 	stw	r2,12(r4)
 80025f8:	11000215 	stw	r4,8(r2)
 80025fc:	8463883a 	add	r17,r16,r17
 8002600:	9c400515 	stw	r17,20(r19)
 8002604:	9c400415 	stw	r17,16(r19)
 8002608:	18800054 	ori	r2,r3,1
 800260c:	88800115 	stw	r2,4(r17)
 8002610:	8a000315 	stw	r8,12(r17)
 8002614:	8a000215 	stw	r8,8(r17)
 8002618:	88e3883a 	add	r17,r17,r3
 800261c:	88c00015 	stw	r3,0(r17)
 8002620:	9009883a 	mov	r4,r18
 8002624:	8004abc0 	call	8004abc <__malloc_unlock>
 8002628:	80800204 	addi	r2,r16,8
 800262c:	00001b06 	br	800269c <_malloc_r+0x2a4>
 8002630:	04400404 	movi	r17,16
 8002634:	89402536 	bltu	r17,r5,80026cc <_malloc_r+0x2d4>
 8002638:	8004a980 	call	8004a98 <__malloc_lock>
 800263c:	00800184 	movi	r2,6
 8002640:	01000084 	movi	r4,2
 8002644:	04c20034 	movhi	r19,2048
 8002648:	1085883a 	add	r2,r2,r2
 800264c:	9cdc7f04 	addi	r19,r19,29180
 8002650:	1085883a 	add	r2,r2,r2
 8002654:	9885883a 	add	r2,r19,r2
 8002658:	14000117 	ldw	r16,4(r2)
 800265c:	10fffe04 	addi	r3,r2,-8
 8002660:	80c0d926 	beq	r16,r3,80029c8 <_malloc_r+0x5d0>
 8002664:	80c00117 	ldw	r3,4(r16)
 8002668:	81000317 	ldw	r4,12(r16)
 800266c:	00bfff04 	movi	r2,-4
 8002670:	1884703a 	and	r2,r3,r2
 8002674:	81400217 	ldw	r5,8(r16)
 8002678:	8085883a 	add	r2,r16,r2
 800267c:	10c00117 	ldw	r3,4(r2)
 8002680:	29000315 	stw	r4,12(r5)
 8002684:	21400215 	stw	r5,8(r4)
 8002688:	18c00054 	ori	r3,r3,1
 800268c:	10c00115 	stw	r3,4(r2)
 8002690:	9009883a 	mov	r4,r18
 8002694:	8004abc0 	call	8004abc <__malloc_unlock>
 8002698:	80800204 	addi	r2,r16,8
 800269c:	dfc00a17 	ldw	ra,40(sp)
 80026a0:	df000917 	ldw	fp,36(sp)
 80026a4:	ddc00817 	ldw	r23,32(sp)
 80026a8:	dd800717 	ldw	r22,28(sp)
 80026ac:	dd400617 	ldw	r21,24(sp)
 80026b0:	dd000517 	ldw	r20,20(sp)
 80026b4:	dcc00417 	ldw	r19,16(sp)
 80026b8:	dc800317 	ldw	r18,12(sp)
 80026bc:	dc400217 	ldw	r17,8(sp)
 80026c0:	dc000117 	ldw	r16,4(sp)
 80026c4:	dec00b04 	addi	sp,sp,44
 80026c8:	f800283a 	ret
 80026cc:	00800304 	movi	r2,12
 80026d0:	90800015 	stw	r2,0(r18)
 80026d4:	0005883a 	mov	r2,zero
 80026d8:	003ff006 	br	800269c <_malloc_r+0x2a4>
 80026dc:	01002004 	movi	r4,128
 80026e0:	02001004 	movi	r8,64
 80026e4:	01c00fc4 	movi	r7,63
 80026e8:	003f6106 	br	8002470 <_malloc_r+0x78>
 80026ec:	4009883a 	mov	r4,r8
 80026f0:	003f7506 	br	80024c8 <_malloc_r+0xd0>
 80026f4:	81000317 	ldw	r4,12(r16)
 80026f8:	003fde06 	br	8002674 <_malloc_r+0x27c>
 80026fc:	81c5883a 	add	r2,r16,r7
 8002700:	11400117 	ldw	r5,4(r2)
 8002704:	9009883a 	mov	r4,r18
 8002708:	29400054 	ori	r5,r5,1
 800270c:	11400115 	stw	r5,4(r2)
 8002710:	8004abc0 	call	8004abc <__malloc_unlock>
 8002714:	80800204 	addi	r2,r16,8
 8002718:	003fe006 	br	800269c <_malloc_r+0x2a4>
 800271c:	9c000217 	ldw	r16,8(r19)
 8002720:	00bfff04 	movi	r2,-4
 8002724:	85800117 	ldw	r22,4(r16)
 8002728:	b0ac703a 	and	r22,r22,r2
 800272c:	b4400336 	bltu	r22,r17,800273c <_malloc_r+0x344>
 8002730:	b445c83a 	sub	r2,r22,r17
 8002734:	00c003c4 	movi	r3,15
 8002738:	18805d16 	blt	r3,r2,80028b0 <_malloc_r+0x4b8>
 800273c:	05c20074 	movhi	r23,2049
 8002740:	00820074 	movhi	r2,2049
 8002744:	10a8ae04 	addi	r2,r2,-23880
 8002748:	bde20504 	addi	r23,r23,-30700
 800274c:	15400017 	ldw	r21,0(r2)
 8002750:	b8c00017 	ldw	r3,0(r23)
 8002754:	00bfffc4 	movi	r2,-1
 8002758:	858d883a 	add	r6,r16,r22
 800275c:	8d6b883a 	add	r21,r17,r21
 8002760:	1880ea26 	beq	r3,r2,8002b0c <_malloc_r+0x714>
 8002764:	ad4403c4 	addi	r21,r21,4111
 8002768:	00bc0004 	movi	r2,-4096
 800276c:	a8aa703a 	and	r21,r21,r2
 8002770:	a80b883a 	mov	r5,r21
 8002774:	9009883a 	mov	r4,r18
 8002778:	d9800015 	stw	r6,0(sp)
 800277c:	80036180 	call	8003618 <_sbrk_r>
 8002780:	1029883a 	mov	r20,r2
 8002784:	00bfffc4 	movi	r2,-1
 8002788:	d9800017 	ldw	r6,0(sp)
 800278c:	a080e826 	beq	r20,r2,8002b30 <_malloc_r+0x738>
 8002790:	a180a636 	bltu	r20,r6,8002a2c <_malloc_r+0x634>
 8002794:	07020074 	movhi	fp,2049
 8002798:	e728be04 	addi	fp,fp,-23816
 800279c:	e0800017 	ldw	r2,0(fp)
 80027a0:	a887883a 	add	r3,r21,r2
 80027a4:	e0c00015 	stw	r3,0(fp)
 80027a8:	3500e626 	beq	r6,r20,8002b44 <_malloc_r+0x74c>
 80027ac:	b9000017 	ldw	r4,0(r23)
 80027b0:	00bfffc4 	movi	r2,-1
 80027b4:	2080ee26 	beq	r4,r2,8002b70 <_malloc_r+0x778>
 80027b8:	a185c83a 	sub	r2,r20,r6
 80027bc:	10c5883a 	add	r2,r2,r3
 80027c0:	e0800015 	stw	r2,0(fp)
 80027c4:	a0c001cc 	andi	r3,r20,7
 80027c8:	1800bc26 	beq	r3,zero,8002abc <_malloc_r+0x6c4>
 80027cc:	a0e9c83a 	sub	r20,r20,r3
 80027d0:	00840204 	movi	r2,4104
 80027d4:	a5000204 	addi	r20,r20,8
 80027d8:	10c7c83a 	sub	r3,r2,r3
 80027dc:	a545883a 	add	r2,r20,r21
 80027e0:	1083ffcc 	andi	r2,r2,4095
 80027e4:	18abc83a 	sub	r21,r3,r2
 80027e8:	a80b883a 	mov	r5,r21
 80027ec:	9009883a 	mov	r4,r18
 80027f0:	80036180 	call	8003618 <_sbrk_r>
 80027f4:	00ffffc4 	movi	r3,-1
 80027f8:	10c0e126 	beq	r2,r3,8002b80 <_malloc_r+0x788>
 80027fc:	1505c83a 	sub	r2,r2,r20
 8002800:	1545883a 	add	r2,r2,r21
 8002804:	10800054 	ori	r2,r2,1
 8002808:	e0c00017 	ldw	r3,0(fp)
 800280c:	9d000215 	stw	r20,8(r19)
 8002810:	a0800115 	stw	r2,4(r20)
 8002814:	a8c7883a 	add	r3,r21,r3
 8002818:	e0c00015 	stw	r3,0(fp)
 800281c:	84c00e26 	beq	r16,r19,8002858 <_malloc_r+0x460>
 8002820:	018003c4 	movi	r6,15
 8002824:	3580a72e 	bgeu	r6,r22,8002ac4 <_malloc_r+0x6cc>
 8002828:	81400117 	ldw	r5,4(r16)
 800282c:	013ffe04 	movi	r4,-8
 8002830:	b0bffd04 	addi	r2,r22,-12
 8002834:	1104703a 	and	r2,r2,r4
 8002838:	2900004c 	andi	r4,r5,1
 800283c:	2088b03a 	or	r4,r4,r2
 8002840:	81000115 	stw	r4,4(r16)
 8002844:	01400144 	movi	r5,5
 8002848:	8089883a 	add	r4,r16,r2
 800284c:	21400115 	stw	r5,4(r4)
 8002850:	21400215 	stw	r5,8(r4)
 8002854:	3080cd36 	bltu	r6,r2,8002b8c <_malloc_r+0x794>
 8002858:	00820074 	movhi	r2,2049
 800285c:	10a8ad04 	addi	r2,r2,-23884
 8002860:	11000017 	ldw	r4,0(r2)
 8002864:	20c0012e 	bgeu	r4,r3,800286c <_malloc_r+0x474>
 8002868:	10c00015 	stw	r3,0(r2)
 800286c:	00820074 	movhi	r2,2049
 8002870:	10a8ac04 	addi	r2,r2,-23888
 8002874:	11000017 	ldw	r4,0(r2)
 8002878:	9c000217 	ldw	r16,8(r19)
 800287c:	20c0012e 	bgeu	r4,r3,8002884 <_malloc_r+0x48c>
 8002880:	10c00015 	stw	r3,0(r2)
 8002884:	80c00117 	ldw	r3,4(r16)
 8002888:	00bfff04 	movi	r2,-4
 800288c:	1886703a 	and	r3,r3,r2
 8002890:	1c45c83a 	sub	r2,r3,r17
 8002894:	1c400236 	bltu	r3,r17,80028a0 <_malloc_r+0x4a8>
 8002898:	00c003c4 	movi	r3,15
 800289c:	18800416 	blt	r3,r2,80028b0 <_malloc_r+0x4b8>
 80028a0:	9009883a 	mov	r4,r18
 80028a4:	8004abc0 	call	8004abc <__malloc_unlock>
 80028a8:	0005883a 	mov	r2,zero
 80028ac:	003f7b06 	br	800269c <_malloc_r+0x2a4>
 80028b0:	88c00054 	ori	r3,r17,1
 80028b4:	80c00115 	stw	r3,4(r16)
 80028b8:	8463883a 	add	r17,r16,r17
 80028bc:	10800054 	ori	r2,r2,1
 80028c0:	9c400215 	stw	r17,8(r19)
 80028c4:	88800115 	stw	r2,4(r17)
 80028c8:	9009883a 	mov	r4,r18
 80028cc:	8004abc0 	call	8004abc <__malloc_unlock>
 80028d0:	80800204 	addi	r2,r16,8
 80028d4:	003f7106 	br	800269c <_malloc_r+0x2a4>
 80028d8:	00c00504 	movi	r3,20
 80028dc:	18804a2e 	bgeu	r3,r2,8002a08 <_malloc_r+0x610>
 80028e0:	00c01504 	movi	r3,84
 80028e4:	18806e36 	bltu	r3,r2,8002aa0 <_malloc_r+0x6a8>
 80028e8:	8804d33a 	srli	r2,r17,12
 80028ec:	12001bc4 	addi	r8,r2,111
 80028f0:	11c01b84 	addi	r7,r2,110
 80028f4:	4209883a 	add	r4,r8,r8
 80028f8:	003edd06 	br	8002470 <_malloc_r+0x78>
 80028fc:	3804d27a 	srli	r2,r7,9
 8002900:	00c00104 	movi	r3,4
 8002904:	1880442e 	bgeu	r3,r2,8002a18 <_malloc_r+0x620>
 8002908:	00c00504 	movi	r3,20
 800290c:	18808136 	bltu	r3,r2,8002b14 <_malloc_r+0x71c>
 8002910:	11401704 	addi	r5,r2,92
 8002914:	10c016c4 	addi	r3,r2,91
 8002918:	294b883a 	add	r5,r5,r5
 800291c:	294b883a 	add	r5,r5,r5
 8002920:	294b883a 	add	r5,r5,r5
 8002924:	994b883a 	add	r5,r19,r5
 8002928:	28800017 	ldw	r2,0(r5)
 800292c:	01820034 	movhi	r6,2048
 8002930:	297ffe04 	addi	r5,r5,-8
 8002934:	319c7f04 	addi	r6,r6,29180
 8002938:	28806526 	beq	r5,r2,8002ad0 <_malloc_r+0x6d8>
 800293c:	01bfff04 	movi	r6,-4
 8002940:	10c00117 	ldw	r3,4(r2)
 8002944:	1986703a 	and	r3,r3,r6
 8002948:	38c0022e 	bgeu	r7,r3,8002954 <_malloc_r+0x55c>
 800294c:	10800217 	ldw	r2,8(r2)
 8002950:	28bffb1e 	bne	r5,r2,8002940 <_malloc_r+0x548>
 8002954:	11400317 	ldw	r5,12(r2)
 8002958:	98c00117 	ldw	r3,4(r19)
 800295c:	81400315 	stw	r5,12(r16)
 8002960:	80800215 	stw	r2,8(r16)
 8002964:	2c000215 	stw	r16,8(r5)
 8002968:	14000315 	stw	r16,12(r2)
 800296c:	003ef806 	br	8002550 <_malloc_r+0x158>
 8002970:	88c00054 	ori	r3,r17,1
 8002974:	80c00115 	stw	r3,4(r16)
 8002978:	8463883a 	add	r17,r16,r17
 800297c:	34400515 	stw	r17,20(r6)
 8002980:	34400415 	stw	r17,16(r6)
 8002984:	10c00054 	ori	r3,r2,1
 8002988:	8a000315 	stw	r8,12(r17)
 800298c:	8a000215 	stw	r8,8(r17)
 8002990:	88c00115 	stw	r3,4(r17)
 8002994:	88a3883a 	add	r17,r17,r2
 8002998:	88800015 	stw	r2,0(r17)
 800299c:	9009883a 	mov	r4,r18
 80029a0:	8004abc0 	call	8004abc <__malloc_unlock>
 80029a4:	80800204 	addi	r2,r16,8
 80029a8:	003f3c06 	br	800269c <_malloc_r+0x2a4>
 80029ac:	30c00117 	ldw	r3,4(r6)
 80029b0:	003ee706 	br	8002550 <_malloc_r+0x158>
 80029b4:	5ac00044 	addi	r11,r11,1
 80029b8:	588000cc 	andi	r2,r11,3
 80029bc:	31800204 	addi	r6,r6,8
 80029c0:	103efd1e 	bne	r2,zero,80025b8 <_malloc_r+0x1c0>
 80029c4:	00002406 	br	8002a58 <_malloc_r+0x660>
 80029c8:	14000317 	ldw	r16,12(r2)
 80029cc:	143f251e 	bne	r2,r16,8002664 <_malloc_r+0x26c>
 80029d0:	21000084 	addi	r4,r4,2
 80029d4:	003ebc06 	br	80024c8 <_malloc_r+0xd0>
 80029d8:	8085883a 	add	r2,r16,r2
 80029dc:	10c00117 	ldw	r3,4(r2)
 80029e0:	81000317 	ldw	r4,12(r16)
 80029e4:	81400217 	ldw	r5,8(r16)
 80029e8:	18c00054 	ori	r3,r3,1
 80029ec:	10c00115 	stw	r3,4(r2)
 80029f0:	29000315 	stw	r4,12(r5)
 80029f4:	21400215 	stw	r5,8(r4)
 80029f8:	9009883a 	mov	r4,r18
 80029fc:	8004abc0 	call	8004abc <__malloc_unlock>
 8002a00:	80800204 	addi	r2,r16,8
 8002a04:	003f2506 	br	800269c <_malloc_r+0x2a4>
 8002a08:	12001704 	addi	r8,r2,92
 8002a0c:	11c016c4 	addi	r7,r2,91
 8002a10:	4209883a 	add	r4,r8,r8
 8002a14:	003e9606 	br	8002470 <_malloc_r+0x78>
 8002a18:	3804d1ba 	srli	r2,r7,6
 8002a1c:	11400e44 	addi	r5,r2,57
 8002a20:	10c00e04 	addi	r3,r2,56
 8002a24:	294b883a 	add	r5,r5,r5
 8002a28:	003fbc06 	br	800291c <_malloc_r+0x524>
 8002a2c:	84ff5926 	beq	r16,r19,8002794 <_malloc_r+0x39c>
 8002a30:	00820034 	movhi	r2,2048
 8002a34:	109c7f04 	addi	r2,r2,29180
 8002a38:	14000217 	ldw	r16,8(r2)
 8002a3c:	00bfff04 	movi	r2,-4
 8002a40:	80c00117 	ldw	r3,4(r16)
 8002a44:	1886703a 	and	r3,r3,r2
 8002a48:	003f9106 	br	8002890 <_malloc_r+0x498>
 8002a4c:	60800217 	ldw	r2,8(r12)
 8002a50:	213fffc4 	addi	r4,r4,-1
 8002a54:	1300651e 	bne	r2,r12,8002bec <_malloc_r+0x7f4>
 8002a58:	208000cc 	andi	r2,r4,3
 8002a5c:	633ffe04 	addi	r12,r12,-8
 8002a60:	103ffa1e 	bne	r2,zero,8002a4c <_malloc_r+0x654>
 8002a64:	98800117 	ldw	r2,4(r19)
 8002a68:	0146303a 	nor	r3,zero,r5
 8002a6c:	1884703a 	and	r2,r3,r2
 8002a70:	98800115 	stw	r2,4(r19)
 8002a74:	294b883a 	add	r5,r5,r5
 8002a78:	117f2836 	bltu	r2,r5,800271c <_malloc_r+0x324>
 8002a7c:	283f2726 	beq	r5,zero,800271c <_malloc_r+0x324>
 8002a80:	2886703a 	and	r3,r5,r2
 8002a84:	5809883a 	mov	r4,r11
 8002a88:	183ec31e 	bne	r3,zero,8002598 <_malloc_r+0x1a0>
 8002a8c:	294b883a 	add	r5,r5,r5
 8002a90:	2886703a 	and	r3,r5,r2
 8002a94:	21000104 	addi	r4,r4,4
 8002a98:	183ffc26 	beq	r3,zero,8002a8c <_malloc_r+0x694>
 8002a9c:	003ebe06 	br	8002598 <_malloc_r+0x1a0>
 8002aa0:	00c05504 	movi	r3,340
 8002aa4:	18801236 	bltu	r3,r2,8002af0 <_malloc_r+0x6f8>
 8002aa8:	8804d3fa 	srli	r2,r17,15
 8002aac:	12001e04 	addi	r8,r2,120
 8002ab0:	11c01dc4 	addi	r7,r2,119
 8002ab4:	4209883a 	add	r4,r8,r8
 8002ab8:	003e6d06 	br	8002470 <_malloc_r+0x78>
 8002abc:	00c40004 	movi	r3,4096
 8002ac0:	003f4606 	br	80027dc <_malloc_r+0x3e4>
 8002ac4:	00800044 	movi	r2,1
 8002ac8:	a0800115 	stw	r2,4(r20)
 8002acc:	003f7406 	br	80028a0 <_malloc_r+0x4a8>
 8002ad0:	1805d0ba 	srai	r2,r3,2
 8002ad4:	01c00044 	movi	r7,1
 8002ad8:	30c00117 	ldw	r3,4(r6)
 8002adc:	388e983a 	sll	r7,r7,r2
 8002ae0:	2805883a 	mov	r2,r5
 8002ae4:	38c6b03a 	or	r3,r7,r3
 8002ae8:	30c00115 	stw	r3,4(r6)
 8002aec:	003f9b06 	br	800295c <_malloc_r+0x564>
 8002af0:	00c15504 	movi	r3,1364
 8002af4:	18801a36 	bltu	r3,r2,8002b60 <_malloc_r+0x768>
 8002af8:	8804d4ba 	srli	r2,r17,18
 8002afc:	12001f44 	addi	r8,r2,125
 8002b00:	11c01f04 	addi	r7,r2,124
 8002b04:	4209883a 	add	r4,r8,r8
 8002b08:	003e5906 	br	8002470 <_malloc_r+0x78>
 8002b0c:	ad400404 	addi	r21,r21,16
 8002b10:	003f1706 	br	8002770 <_malloc_r+0x378>
 8002b14:	00c01504 	movi	r3,84
 8002b18:	18802336 	bltu	r3,r2,8002ba8 <_malloc_r+0x7b0>
 8002b1c:	3804d33a 	srli	r2,r7,12
 8002b20:	11401bc4 	addi	r5,r2,111
 8002b24:	10c01b84 	addi	r3,r2,110
 8002b28:	294b883a 	add	r5,r5,r5
 8002b2c:	003f7b06 	br	800291c <_malloc_r+0x524>
 8002b30:	9c000217 	ldw	r16,8(r19)
 8002b34:	00bfff04 	movi	r2,-4
 8002b38:	80c00117 	ldw	r3,4(r16)
 8002b3c:	1886703a 	and	r3,r3,r2
 8002b40:	003f5306 	br	8002890 <_malloc_r+0x498>
 8002b44:	3083ffcc 	andi	r2,r6,4095
 8002b48:	103f181e 	bne	r2,zero,80027ac <_malloc_r+0x3b4>
 8002b4c:	99000217 	ldw	r4,8(r19)
 8002b50:	b545883a 	add	r2,r22,r21
 8002b54:	10800054 	ori	r2,r2,1
 8002b58:	20800115 	stw	r2,4(r4)
 8002b5c:	003f3e06 	br	8002858 <_malloc_r+0x460>
 8002b60:	01003f84 	movi	r4,254
 8002b64:	02001fc4 	movi	r8,127
 8002b68:	01c01f84 	movi	r7,126
 8002b6c:	003e4006 	br	8002470 <_malloc_r+0x78>
 8002b70:	00820074 	movhi	r2,2049
 8002b74:	10a20504 	addi	r2,r2,-30700
 8002b78:	15000015 	stw	r20,0(r2)
 8002b7c:	003f1106 	br	80027c4 <_malloc_r+0x3cc>
 8002b80:	00800044 	movi	r2,1
 8002b84:	002b883a 	mov	r21,zero
 8002b88:	003f1f06 	br	8002808 <_malloc_r+0x410>
 8002b8c:	81400204 	addi	r5,r16,8
 8002b90:	9009883a 	mov	r4,r18
 8002b94:	8003e800 	call	8003e80 <_free_r>
 8002b98:	00820074 	movhi	r2,2049
 8002b9c:	10a8be04 	addi	r2,r2,-23816
 8002ba0:	10c00017 	ldw	r3,0(r2)
 8002ba4:	003f2c06 	br	8002858 <_malloc_r+0x460>
 8002ba8:	00c05504 	movi	r3,340
 8002bac:	18800536 	bltu	r3,r2,8002bc4 <_malloc_r+0x7cc>
 8002bb0:	3804d3fa 	srli	r2,r7,15
 8002bb4:	11401e04 	addi	r5,r2,120
 8002bb8:	10c01dc4 	addi	r3,r2,119
 8002bbc:	294b883a 	add	r5,r5,r5
 8002bc0:	003f5606 	br	800291c <_malloc_r+0x524>
 8002bc4:	00c15504 	movi	r3,1364
 8002bc8:	18800536 	bltu	r3,r2,8002be0 <_malloc_r+0x7e8>
 8002bcc:	3804d4ba 	srli	r2,r7,18
 8002bd0:	11401f44 	addi	r5,r2,125
 8002bd4:	10c01f04 	addi	r3,r2,124
 8002bd8:	294b883a 	add	r5,r5,r5
 8002bdc:	003f4f06 	br	800291c <_malloc_r+0x524>
 8002be0:	01403f84 	movi	r5,254
 8002be4:	00c01f84 	movi	r3,126
 8002be8:	003f4c06 	br	800291c <_malloc_r+0x524>
 8002bec:	98800117 	ldw	r2,4(r19)
 8002bf0:	003fa006 	br	8002a74 <_malloc_r+0x67c>
 8002bf4:	8808d0fa 	srli	r4,r17,3
 8002bf8:	20800044 	addi	r2,r4,1
 8002bfc:	1085883a 	add	r2,r2,r2
 8002c00:	003e9006 	br	8002644 <_malloc_r+0x24c>

08002c04 <memchr>:
 8002c04:	208000cc 	andi	r2,r4,3
 8002c08:	280f883a 	mov	r7,r5
 8002c0c:	10003426 	beq	r2,zero,8002ce0 <memchr+0xdc>
 8002c10:	30bfffc4 	addi	r2,r6,-1
 8002c14:	30001a26 	beq	r6,zero,8002c80 <memchr+0x7c>
 8002c18:	20c00003 	ldbu	r3,0(r4)
 8002c1c:	29803fcc 	andi	r6,r5,255
 8002c20:	30c0051e 	bne	r6,r3,8002c38 <memchr+0x34>
 8002c24:	00001806 	br	8002c88 <memchr+0x84>
 8002c28:	10001526 	beq	r2,zero,8002c80 <memchr+0x7c>
 8002c2c:	20c00003 	ldbu	r3,0(r4)
 8002c30:	10bfffc4 	addi	r2,r2,-1
 8002c34:	30c01426 	beq	r6,r3,8002c88 <memchr+0x84>
 8002c38:	21000044 	addi	r4,r4,1
 8002c3c:	20c000cc 	andi	r3,r4,3
 8002c40:	183ff91e 	bne	r3,zero,8002c28 <memchr+0x24>
 8002c44:	020000c4 	movi	r8,3
 8002c48:	40801136 	bltu	r8,r2,8002c90 <memchr+0x8c>
 8002c4c:	10000c26 	beq	r2,zero,8002c80 <memchr+0x7c>
 8002c50:	20c00003 	ldbu	r3,0(r4)
 8002c54:	29403fcc 	andi	r5,r5,255
 8002c58:	28c00b26 	beq	r5,r3,8002c88 <memchr+0x84>
 8002c5c:	20c00044 	addi	r3,r4,1
 8002c60:	39803fcc 	andi	r6,r7,255
 8002c64:	2089883a 	add	r4,r4,r2
 8002c68:	00000306 	br	8002c78 <memchr+0x74>
 8002c6c:	18c00044 	addi	r3,r3,1
 8002c70:	197fffc3 	ldbu	r5,-1(r3)
 8002c74:	31400526 	beq	r6,r5,8002c8c <memchr+0x88>
 8002c78:	1805883a 	mov	r2,r3
 8002c7c:	20fffb1e 	bne	r4,r3,8002c6c <memchr+0x68>
 8002c80:	0005883a 	mov	r2,zero
 8002c84:	f800283a 	ret
 8002c88:	2005883a 	mov	r2,r4
 8002c8c:	f800283a 	ret
 8002c90:	28c03fcc 	andi	r3,r5,255
 8002c94:	1812923a 	slli	r9,r3,8
 8002c98:	02ffbff4 	movhi	r11,65279
 8002c9c:	02a02074 	movhi	r10,32897
 8002ca0:	48d2b03a 	or	r9,r9,r3
 8002ca4:	4806943a 	slli	r3,r9,16
 8002ca8:	5affbfc4 	addi	r11,r11,-257
 8002cac:	52a02004 	addi	r10,r10,-32640
 8002cb0:	48d2b03a 	or	r9,r9,r3
 8002cb4:	20c00017 	ldw	r3,0(r4)
 8002cb8:	48c6f03a 	xor	r3,r9,r3
 8002cbc:	1acd883a 	add	r6,r3,r11
 8002cc0:	00c6303a 	nor	r3,zero,r3
 8002cc4:	30c6703a 	and	r3,r6,r3
 8002cc8:	1a86703a 	and	r3,r3,r10
 8002ccc:	183fe01e 	bne	r3,zero,8002c50 <memchr+0x4c>
 8002cd0:	10bfff04 	addi	r2,r2,-4
 8002cd4:	21000104 	addi	r4,r4,4
 8002cd8:	40bff636 	bltu	r8,r2,8002cb4 <memchr+0xb0>
 8002cdc:	003fdb06 	br	8002c4c <memchr+0x48>
 8002ce0:	3005883a 	mov	r2,r6
 8002ce4:	003fd706 	br	8002c44 <memchr+0x40>

08002ce8 <memcpy>:
 8002ce8:	defffd04 	addi	sp,sp,-12
 8002cec:	dfc00215 	stw	ra,8(sp)
 8002cf0:	dc400115 	stw	r17,4(sp)
 8002cf4:	dc000015 	stw	r16,0(sp)
 8002cf8:	00c003c4 	movi	r3,15
 8002cfc:	2005883a 	mov	r2,r4
 8002d00:	1980452e 	bgeu	r3,r6,8002e18 <memcpy+0x130>
 8002d04:	2906b03a 	or	r3,r5,r4
 8002d08:	18c000cc 	andi	r3,r3,3
 8002d0c:	1800441e 	bne	r3,zero,8002e20 <memcpy+0x138>
 8002d10:	347ffc04 	addi	r17,r6,-16
 8002d14:	8822d13a 	srli	r17,r17,4
 8002d18:	28c00104 	addi	r3,r5,4
 8002d1c:	23400104 	addi	r13,r4,4
 8002d20:	8820913a 	slli	r16,r17,4
 8002d24:	2b000204 	addi	r12,r5,8
 8002d28:	22c00204 	addi	r11,r4,8
 8002d2c:	84000504 	addi	r16,r16,20
 8002d30:	2a800304 	addi	r10,r5,12
 8002d34:	22400304 	addi	r9,r4,12
 8002d38:	2c21883a 	add	r16,r5,r16
 8002d3c:	2811883a 	mov	r8,r5
 8002d40:	200f883a 	mov	r7,r4
 8002d44:	41000017 	ldw	r4,0(r8)
 8002d48:	1fc00017 	ldw	ra,0(r3)
 8002d4c:	63c00017 	ldw	r15,0(r12)
 8002d50:	39000015 	stw	r4,0(r7)
 8002d54:	53800017 	ldw	r14,0(r10)
 8002d58:	6fc00015 	stw	ra,0(r13)
 8002d5c:	5bc00015 	stw	r15,0(r11)
 8002d60:	4b800015 	stw	r14,0(r9)
 8002d64:	18c00404 	addi	r3,r3,16
 8002d68:	39c00404 	addi	r7,r7,16
 8002d6c:	42000404 	addi	r8,r8,16
 8002d70:	6b400404 	addi	r13,r13,16
 8002d74:	63000404 	addi	r12,r12,16
 8002d78:	5ac00404 	addi	r11,r11,16
 8002d7c:	52800404 	addi	r10,r10,16
 8002d80:	4a400404 	addi	r9,r9,16
 8002d84:	1c3fef1e 	bne	r3,r16,8002d44 <memcpy+0x5c>
 8002d88:	89c00044 	addi	r7,r17,1
 8002d8c:	380e913a 	slli	r7,r7,4
 8002d90:	310003cc 	andi	r4,r6,15
 8002d94:	02c000c4 	movi	r11,3
 8002d98:	11c7883a 	add	r3,r2,r7
 8002d9c:	29cb883a 	add	r5,r5,r7
 8002da0:	5900212e 	bgeu	r11,r4,8002e28 <memcpy+0x140>
 8002da4:	1813883a 	mov	r9,r3
 8002da8:	2811883a 	mov	r8,r5
 8002dac:	200f883a 	mov	r7,r4
 8002db0:	42800017 	ldw	r10,0(r8)
 8002db4:	4a400104 	addi	r9,r9,4
 8002db8:	39ffff04 	addi	r7,r7,-4
 8002dbc:	4abfff15 	stw	r10,-4(r9)
 8002dc0:	42000104 	addi	r8,r8,4
 8002dc4:	59fffa36 	bltu	r11,r7,8002db0 <memcpy+0xc8>
 8002dc8:	213fff04 	addi	r4,r4,-4
 8002dcc:	2008d0ba 	srli	r4,r4,2
 8002dd0:	318000cc 	andi	r6,r6,3
 8002dd4:	21000044 	addi	r4,r4,1
 8002dd8:	2109883a 	add	r4,r4,r4
 8002ddc:	2109883a 	add	r4,r4,r4
 8002de0:	1907883a 	add	r3,r3,r4
 8002de4:	290b883a 	add	r5,r5,r4
 8002de8:	30000626 	beq	r6,zero,8002e04 <memcpy+0x11c>
 8002dec:	198d883a 	add	r6,r3,r6
 8002df0:	29c00003 	ldbu	r7,0(r5)
 8002df4:	18c00044 	addi	r3,r3,1
 8002df8:	29400044 	addi	r5,r5,1
 8002dfc:	19ffffc5 	stb	r7,-1(r3)
 8002e00:	19bffb1e 	bne	r3,r6,8002df0 <memcpy+0x108>
 8002e04:	dfc00217 	ldw	ra,8(sp)
 8002e08:	dc400117 	ldw	r17,4(sp)
 8002e0c:	dc000017 	ldw	r16,0(sp)
 8002e10:	dec00304 	addi	sp,sp,12
 8002e14:	f800283a 	ret
 8002e18:	2007883a 	mov	r3,r4
 8002e1c:	003ff206 	br	8002de8 <memcpy+0x100>
 8002e20:	2007883a 	mov	r3,r4
 8002e24:	003ff106 	br	8002dec <memcpy+0x104>
 8002e28:	200d883a 	mov	r6,r4
 8002e2c:	003fee06 	br	8002de8 <memcpy+0x100>

08002e30 <memmove>:
 8002e30:	2005883a 	mov	r2,r4
 8002e34:	29000b2e 	bgeu	r5,r4,8002e64 <memmove+0x34>
 8002e38:	298f883a 	add	r7,r5,r6
 8002e3c:	21c0092e 	bgeu	r4,r7,8002e64 <memmove+0x34>
 8002e40:	2187883a 	add	r3,r4,r6
 8002e44:	198bc83a 	sub	r5,r3,r6
 8002e48:	30004826 	beq	r6,zero,8002f6c <memmove+0x13c>
 8002e4c:	39ffffc4 	addi	r7,r7,-1
 8002e50:	39000003 	ldbu	r4,0(r7)
 8002e54:	18ffffc4 	addi	r3,r3,-1
 8002e58:	19000005 	stb	r4,0(r3)
 8002e5c:	28fffb1e 	bne	r5,r3,8002e4c <memmove+0x1c>
 8002e60:	f800283a 	ret
 8002e64:	00c003c4 	movi	r3,15
 8002e68:	1980412e 	bgeu	r3,r6,8002f70 <memmove+0x140>
 8002e6c:	2886b03a 	or	r3,r5,r2
 8002e70:	18c000cc 	andi	r3,r3,3
 8002e74:	1800401e 	bne	r3,zero,8002f78 <memmove+0x148>
 8002e78:	33fffc04 	addi	r15,r6,-16
 8002e7c:	781ed13a 	srli	r15,r15,4
 8002e80:	28c00104 	addi	r3,r5,4
 8002e84:	13400104 	addi	r13,r2,4
 8002e88:	781c913a 	slli	r14,r15,4
 8002e8c:	2b000204 	addi	r12,r5,8
 8002e90:	12c00204 	addi	r11,r2,8
 8002e94:	73800504 	addi	r14,r14,20
 8002e98:	2a800304 	addi	r10,r5,12
 8002e9c:	12400304 	addi	r9,r2,12
 8002ea0:	2b9d883a 	add	r14,r5,r14
 8002ea4:	2811883a 	mov	r8,r5
 8002ea8:	100f883a 	mov	r7,r2
 8002eac:	41000017 	ldw	r4,0(r8)
 8002eb0:	39c00404 	addi	r7,r7,16
 8002eb4:	18c00404 	addi	r3,r3,16
 8002eb8:	393ffc15 	stw	r4,-16(r7)
 8002ebc:	193ffc17 	ldw	r4,-16(r3)
 8002ec0:	6b400404 	addi	r13,r13,16
 8002ec4:	5ac00404 	addi	r11,r11,16
 8002ec8:	693ffc15 	stw	r4,-16(r13)
 8002ecc:	61000017 	ldw	r4,0(r12)
 8002ed0:	4a400404 	addi	r9,r9,16
 8002ed4:	42000404 	addi	r8,r8,16
 8002ed8:	593ffc15 	stw	r4,-16(r11)
 8002edc:	51000017 	ldw	r4,0(r10)
 8002ee0:	63000404 	addi	r12,r12,16
 8002ee4:	52800404 	addi	r10,r10,16
 8002ee8:	493ffc15 	stw	r4,-16(r9)
 8002eec:	1bbfef1e 	bne	r3,r14,8002eac <memmove+0x7c>
 8002ef0:	79000044 	addi	r4,r15,1
 8002ef4:	2008913a 	slli	r4,r4,4
 8002ef8:	328003cc 	andi	r10,r6,15
 8002efc:	02c000c4 	movi	r11,3
 8002f00:	1107883a 	add	r3,r2,r4
 8002f04:	290b883a 	add	r5,r5,r4
 8002f08:	5a801e2e 	bgeu	r11,r10,8002f84 <memmove+0x154>
 8002f0c:	1813883a 	mov	r9,r3
 8002f10:	2811883a 	mov	r8,r5
 8002f14:	500f883a 	mov	r7,r10
 8002f18:	41000017 	ldw	r4,0(r8)
 8002f1c:	4a400104 	addi	r9,r9,4
 8002f20:	39ffff04 	addi	r7,r7,-4
 8002f24:	493fff15 	stw	r4,-4(r9)
 8002f28:	42000104 	addi	r8,r8,4
 8002f2c:	59fffa36 	bltu	r11,r7,8002f18 <memmove+0xe8>
 8002f30:	513fff04 	addi	r4,r10,-4
 8002f34:	2008d0ba 	srli	r4,r4,2
 8002f38:	318000cc 	andi	r6,r6,3
 8002f3c:	21000044 	addi	r4,r4,1
 8002f40:	2109883a 	add	r4,r4,r4
 8002f44:	2109883a 	add	r4,r4,r4
 8002f48:	1907883a 	add	r3,r3,r4
 8002f4c:	290b883a 	add	r5,r5,r4
 8002f50:	30000b26 	beq	r6,zero,8002f80 <memmove+0x150>
 8002f54:	198d883a 	add	r6,r3,r6
 8002f58:	29c00003 	ldbu	r7,0(r5)
 8002f5c:	18c00044 	addi	r3,r3,1
 8002f60:	29400044 	addi	r5,r5,1
 8002f64:	19ffffc5 	stb	r7,-1(r3)
 8002f68:	19bffb1e 	bne	r3,r6,8002f58 <memmove+0x128>
 8002f6c:	f800283a 	ret
 8002f70:	1007883a 	mov	r3,r2
 8002f74:	003ff606 	br	8002f50 <memmove+0x120>
 8002f78:	1007883a 	mov	r3,r2
 8002f7c:	003ff506 	br	8002f54 <memmove+0x124>
 8002f80:	f800283a 	ret
 8002f84:	500d883a 	mov	r6,r10
 8002f88:	003ff106 	br	8002f50 <memmove+0x120>

08002f8c <memset>:
 8002f8c:	20c000cc 	andi	r3,r4,3
 8002f90:	2005883a 	mov	r2,r4
 8002f94:	18004426 	beq	r3,zero,80030a8 <memset+0x11c>
 8002f98:	31ffffc4 	addi	r7,r6,-1
 8002f9c:	30004026 	beq	r6,zero,80030a0 <memset+0x114>
 8002fa0:	2813883a 	mov	r9,r5
 8002fa4:	200d883a 	mov	r6,r4
 8002fa8:	2007883a 	mov	r3,r4
 8002fac:	00000406 	br	8002fc0 <memset+0x34>
 8002fb0:	3a3fffc4 	addi	r8,r7,-1
 8002fb4:	31800044 	addi	r6,r6,1
 8002fb8:	38003926 	beq	r7,zero,80030a0 <memset+0x114>
 8002fbc:	400f883a 	mov	r7,r8
 8002fc0:	18c00044 	addi	r3,r3,1
 8002fc4:	32400005 	stb	r9,0(r6)
 8002fc8:	1a0000cc 	andi	r8,r3,3
 8002fcc:	403ff81e 	bne	r8,zero,8002fb0 <memset+0x24>
 8002fd0:	010000c4 	movi	r4,3
 8002fd4:	21c02d2e 	bgeu	r4,r7,800308c <memset+0x100>
 8002fd8:	29003fcc 	andi	r4,r5,255
 8002fdc:	200c923a 	slli	r6,r4,8
 8002fe0:	3108b03a 	or	r4,r6,r4
 8002fe4:	200c943a 	slli	r6,r4,16
 8002fe8:	218cb03a 	or	r6,r4,r6
 8002fec:	010003c4 	movi	r4,15
 8002ff0:	21c0182e 	bgeu	r4,r7,8003054 <memset+0xc8>
 8002ff4:	3b3ffc04 	addi	r12,r7,-16
 8002ff8:	6018d13a 	srli	r12,r12,4
 8002ffc:	1a000104 	addi	r8,r3,4
 8003000:	1ac00204 	addi	r11,r3,8
 8003004:	6008913a 	slli	r4,r12,4
 8003008:	1a800304 	addi	r10,r3,12
 800300c:	1813883a 	mov	r9,r3
 8003010:	21000504 	addi	r4,r4,20
 8003014:	1909883a 	add	r4,r3,r4
 8003018:	49800015 	stw	r6,0(r9)
 800301c:	41800015 	stw	r6,0(r8)
 8003020:	59800015 	stw	r6,0(r11)
 8003024:	51800015 	stw	r6,0(r10)
 8003028:	42000404 	addi	r8,r8,16
 800302c:	4a400404 	addi	r9,r9,16
 8003030:	5ac00404 	addi	r11,r11,16
 8003034:	52800404 	addi	r10,r10,16
 8003038:	413ff71e 	bne	r8,r4,8003018 <memset+0x8c>
 800303c:	63000044 	addi	r12,r12,1
 8003040:	6018913a 	slli	r12,r12,4
 8003044:	39c003cc 	andi	r7,r7,15
 8003048:	010000c4 	movi	r4,3
 800304c:	1b07883a 	add	r3,r3,r12
 8003050:	21c00e2e 	bgeu	r4,r7,800308c <memset+0x100>
 8003054:	1813883a 	mov	r9,r3
 8003058:	3811883a 	mov	r8,r7
 800305c:	010000c4 	movi	r4,3
 8003060:	49800015 	stw	r6,0(r9)
 8003064:	423fff04 	addi	r8,r8,-4
 8003068:	4a400104 	addi	r9,r9,4
 800306c:	223ffc36 	bltu	r4,r8,8003060 <memset+0xd4>
 8003070:	393fff04 	addi	r4,r7,-4
 8003074:	2008d0ba 	srli	r4,r4,2
 8003078:	39c000cc 	andi	r7,r7,3
 800307c:	21000044 	addi	r4,r4,1
 8003080:	2109883a 	add	r4,r4,r4
 8003084:	2109883a 	add	r4,r4,r4
 8003088:	1907883a 	add	r3,r3,r4
 800308c:	38000526 	beq	r7,zero,80030a4 <memset+0x118>
 8003090:	19cf883a 	add	r7,r3,r7
 8003094:	19400005 	stb	r5,0(r3)
 8003098:	18c00044 	addi	r3,r3,1
 800309c:	38fffd1e 	bne	r7,r3,8003094 <memset+0x108>
 80030a0:	f800283a 	ret
 80030a4:	f800283a 	ret
 80030a8:	2007883a 	mov	r3,r4
 80030ac:	300f883a 	mov	r7,r6
 80030b0:	003fc706 	br	8002fd0 <memset+0x44>

080030b4 <_realloc_r>:
 80030b4:	defff604 	addi	sp,sp,-40
 80030b8:	dc800215 	stw	r18,8(sp)
 80030bc:	dfc00915 	stw	ra,36(sp)
 80030c0:	df000815 	stw	fp,32(sp)
 80030c4:	ddc00715 	stw	r23,28(sp)
 80030c8:	dd800615 	stw	r22,24(sp)
 80030cc:	dd400515 	stw	r21,20(sp)
 80030d0:	dd000415 	stw	r20,16(sp)
 80030d4:	dcc00315 	stw	r19,12(sp)
 80030d8:	dc400115 	stw	r17,4(sp)
 80030dc:	dc000015 	stw	r16,0(sp)
 80030e0:	3025883a 	mov	r18,r6
 80030e4:	2800b726 	beq	r5,zero,80033c4 <_realloc_r+0x310>
 80030e8:	282b883a 	mov	r21,r5
 80030ec:	2029883a 	mov	r20,r4
 80030f0:	8004a980 	call	8004a98 <__malloc_lock>
 80030f4:	a8bfff17 	ldw	r2,-4(r21)
 80030f8:	043fff04 	movi	r16,-4
 80030fc:	90c002c4 	addi	r3,r18,11
 8003100:	01000584 	movi	r4,22
 8003104:	acfffe04 	addi	r19,r21,-8
 8003108:	1420703a 	and	r16,r2,r16
 800310c:	20c0332e 	bgeu	r4,r3,80031dc <_realloc_r+0x128>
 8003110:	047ffe04 	movi	r17,-8
 8003114:	1c62703a 	and	r17,r3,r17
 8003118:	8807883a 	mov	r3,r17
 800311c:	88005816 	blt	r17,zero,8003280 <_realloc_r+0x1cc>
 8003120:	8c805736 	bltu	r17,r18,8003280 <_realloc_r+0x1cc>
 8003124:	80c0300e 	bge	r16,r3,80031e8 <_realloc_r+0x134>
 8003128:	07020034 	movhi	fp,2048
 800312c:	e71c7f04 	addi	fp,fp,29180
 8003130:	e1c00217 	ldw	r7,8(fp)
 8003134:	9c09883a 	add	r4,r19,r16
 8003138:	22000117 	ldw	r8,4(r4)
 800313c:	21c06326 	beq	r4,r7,80032cc <_realloc_r+0x218>
 8003140:	017fff84 	movi	r5,-2
 8003144:	414a703a 	and	r5,r8,r5
 8003148:	214b883a 	add	r5,r4,r5
 800314c:	29800117 	ldw	r6,4(r5)
 8003150:	3180004c 	andi	r6,r6,1
 8003154:	30003f26 	beq	r6,zero,8003254 <_realloc_r+0x1a0>
 8003158:	1080004c 	andi	r2,r2,1
 800315c:	10008326 	beq	r2,zero,800336c <_realloc_r+0x2b8>
 8003160:	900b883a 	mov	r5,r18
 8003164:	a009883a 	mov	r4,r20
 8003168:	80023f80 	call	80023f8 <_malloc_r>
 800316c:	1025883a 	mov	r18,r2
 8003170:	10011e26 	beq	r2,zero,80035ec <_realloc_r+0x538>
 8003174:	a93fff17 	ldw	r4,-4(r21)
 8003178:	10fffe04 	addi	r3,r2,-8
 800317c:	00bfff84 	movi	r2,-2
 8003180:	2084703a 	and	r2,r4,r2
 8003184:	9885883a 	add	r2,r19,r2
 8003188:	1880ee26 	beq	r3,r2,8003544 <_realloc_r+0x490>
 800318c:	81bfff04 	addi	r6,r16,-4
 8003190:	00800904 	movi	r2,36
 8003194:	1180b836 	bltu	r2,r6,8003478 <_realloc_r+0x3c4>
 8003198:	00c004c4 	movi	r3,19
 800319c:	19809636 	bltu	r3,r6,80033f8 <_realloc_r+0x344>
 80031a0:	9005883a 	mov	r2,r18
 80031a4:	a807883a 	mov	r3,r21
 80031a8:	19000017 	ldw	r4,0(r3)
 80031ac:	11000015 	stw	r4,0(r2)
 80031b0:	19000117 	ldw	r4,4(r3)
 80031b4:	11000115 	stw	r4,4(r2)
 80031b8:	18c00217 	ldw	r3,8(r3)
 80031bc:	10c00215 	stw	r3,8(r2)
 80031c0:	a80b883a 	mov	r5,r21
 80031c4:	a009883a 	mov	r4,r20
 80031c8:	8003e800 	call	8003e80 <_free_r>
 80031cc:	a009883a 	mov	r4,r20
 80031d0:	8004abc0 	call	8004abc <__malloc_unlock>
 80031d4:	9005883a 	mov	r2,r18
 80031d8:	00001206 	br	8003224 <_realloc_r+0x170>
 80031dc:	00c00404 	movi	r3,16
 80031e0:	1823883a 	mov	r17,r3
 80031e4:	003fce06 	br	8003120 <_realloc_r+0x6c>
 80031e8:	a825883a 	mov	r18,r21
 80031ec:	8445c83a 	sub	r2,r16,r17
 80031f0:	00c003c4 	movi	r3,15
 80031f4:	18802636 	bltu	r3,r2,8003290 <_realloc_r+0x1dc>
 80031f8:	99800117 	ldw	r6,4(r19)
 80031fc:	9c07883a 	add	r3,r19,r16
 8003200:	3180004c 	andi	r6,r6,1
 8003204:	3420b03a 	or	r16,r6,r16
 8003208:	9c000115 	stw	r16,4(r19)
 800320c:	18800117 	ldw	r2,4(r3)
 8003210:	10800054 	ori	r2,r2,1
 8003214:	18800115 	stw	r2,4(r3)
 8003218:	a009883a 	mov	r4,r20
 800321c:	8004abc0 	call	8004abc <__malloc_unlock>
 8003220:	9005883a 	mov	r2,r18
 8003224:	dfc00917 	ldw	ra,36(sp)
 8003228:	df000817 	ldw	fp,32(sp)
 800322c:	ddc00717 	ldw	r23,28(sp)
 8003230:	dd800617 	ldw	r22,24(sp)
 8003234:	dd400517 	ldw	r21,20(sp)
 8003238:	dd000417 	ldw	r20,16(sp)
 800323c:	dcc00317 	ldw	r19,12(sp)
 8003240:	dc800217 	ldw	r18,8(sp)
 8003244:	dc400117 	ldw	r17,4(sp)
 8003248:	dc000017 	ldw	r16,0(sp)
 800324c:	dec00a04 	addi	sp,sp,40
 8003250:	f800283a 	ret
 8003254:	017fff04 	movi	r5,-4
 8003258:	414a703a 	and	r5,r8,r5
 800325c:	814d883a 	add	r6,r16,r5
 8003260:	30c01f16 	blt	r6,r3,80032e0 <_realloc_r+0x22c>
 8003264:	20800317 	ldw	r2,12(r4)
 8003268:	20c00217 	ldw	r3,8(r4)
 800326c:	a825883a 	mov	r18,r21
 8003270:	3021883a 	mov	r16,r6
 8003274:	18800315 	stw	r2,12(r3)
 8003278:	10c00215 	stw	r3,8(r2)
 800327c:	003fdb06 	br	80031ec <_realloc_r+0x138>
 8003280:	00800304 	movi	r2,12
 8003284:	a0800015 	stw	r2,0(r20)
 8003288:	0005883a 	mov	r2,zero
 800328c:	003fe506 	br	8003224 <_realloc_r+0x170>
 8003290:	98c00117 	ldw	r3,4(r19)
 8003294:	9c4b883a 	add	r5,r19,r17
 8003298:	11000054 	ori	r4,r2,1
 800329c:	18c0004c 	andi	r3,r3,1
 80032a0:	1c62b03a 	or	r17,r3,r17
 80032a4:	9c400115 	stw	r17,4(r19)
 80032a8:	29000115 	stw	r4,4(r5)
 80032ac:	2885883a 	add	r2,r5,r2
 80032b0:	10c00117 	ldw	r3,4(r2)
 80032b4:	29400204 	addi	r5,r5,8
 80032b8:	a009883a 	mov	r4,r20
 80032bc:	18c00054 	ori	r3,r3,1
 80032c0:	10c00115 	stw	r3,4(r2)
 80032c4:	8003e800 	call	8003e80 <_free_r>
 80032c8:	003fd306 	br	8003218 <_realloc_r+0x164>
 80032cc:	017fff04 	movi	r5,-4
 80032d0:	414a703a 	and	r5,r8,r5
 80032d4:	89800404 	addi	r6,r17,16
 80032d8:	8151883a 	add	r8,r16,r5
 80032dc:	4180590e 	bge	r8,r6,8003444 <_realloc_r+0x390>
 80032e0:	1080004c 	andi	r2,r2,1
 80032e4:	103f9e1e 	bne	r2,zero,8003160 <_realloc_r+0xac>
 80032e8:	adbffe17 	ldw	r22,-8(r21)
 80032ec:	00bfff04 	movi	r2,-4
 80032f0:	9dadc83a 	sub	r22,r19,r22
 80032f4:	b1800117 	ldw	r6,4(r22)
 80032f8:	3084703a 	and	r2,r6,r2
 80032fc:	20002026 	beq	r4,zero,8003380 <_realloc_r+0x2cc>
 8003300:	80af883a 	add	r23,r16,r2
 8003304:	b96f883a 	add	r23,r23,r5
 8003308:	21c05f26 	beq	r4,r7,8003488 <_realloc_r+0x3d4>
 800330c:	b8c01c16 	blt	r23,r3,8003380 <_realloc_r+0x2cc>
 8003310:	20800317 	ldw	r2,12(r4)
 8003314:	20c00217 	ldw	r3,8(r4)
 8003318:	81bfff04 	addi	r6,r16,-4
 800331c:	01000904 	movi	r4,36
 8003320:	18800315 	stw	r2,12(r3)
 8003324:	10c00215 	stw	r3,8(r2)
 8003328:	b0c00217 	ldw	r3,8(r22)
 800332c:	b0800317 	ldw	r2,12(r22)
 8003330:	b4800204 	addi	r18,r22,8
 8003334:	18800315 	stw	r2,12(r3)
 8003338:	10c00215 	stw	r3,8(r2)
 800333c:	21801b36 	bltu	r4,r6,80033ac <_realloc_r+0x2f8>
 8003340:	008004c4 	movi	r2,19
 8003344:	1180352e 	bgeu	r2,r6,800341c <_realloc_r+0x368>
 8003348:	a8800017 	ldw	r2,0(r21)
 800334c:	b0800215 	stw	r2,8(r22)
 8003350:	a8800117 	ldw	r2,4(r21)
 8003354:	b0800315 	stw	r2,12(r22)
 8003358:	008006c4 	movi	r2,27
 800335c:	11807f36 	bltu	r2,r6,800355c <_realloc_r+0x4a8>
 8003360:	b0800404 	addi	r2,r22,16
 8003364:	ad400204 	addi	r21,r21,8
 8003368:	00002d06 	br	8003420 <_realloc_r+0x36c>
 800336c:	adbffe17 	ldw	r22,-8(r21)
 8003370:	00bfff04 	movi	r2,-4
 8003374:	9dadc83a 	sub	r22,r19,r22
 8003378:	b1000117 	ldw	r4,4(r22)
 800337c:	2084703a 	and	r2,r4,r2
 8003380:	b03f7726 	beq	r22,zero,8003160 <_realloc_r+0xac>
 8003384:	80af883a 	add	r23,r16,r2
 8003388:	b8ff7516 	blt	r23,r3,8003160 <_realloc_r+0xac>
 800338c:	b0800317 	ldw	r2,12(r22)
 8003390:	b0c00217 	ldw	r3,8(r22)
 8003394:	81bfff04 	addi	r6,r16,-4
 8003398:	01000904 	movi	r4,36
 800339c:	18800315 	stw	r2,12(r3)
 80033a0:	10c00215 	stw	r3,8(r2)
 80033a4:	b4800204 	addi	r18,r22,8
 80033a8:	21bfe52e 	bgeu	r4,r6,8003340 <_realloc_r+0x28c>
 80033ac:	a80b883a 	mov	r5,r21
 80033b0:	9009883a 	mov	r4,r18
 80033b4:	8002e300 	call	8002e30 <memmove>
 80033b8:	b821883a 	mov	r16,r23
 80033bc:	b027883a 	mov	r19,r22
 80033c0:	003f8a06 	br	80031ec <_realloc_r+0x138>
 80033c4:	300b883a 	mov	r5,r6
 80033c8:	dfc00917 	ldw	ra,36(sp)
 80033cc:	df000817 	ldw	fp,32(sp)
 80033d0:	ddc00717 	ldw	r23,28(sp)
 80033d4:	dd800617 	ldw	r22,24(sp)
 80033d8:	dd400517 	ldw	r21,20(sp)
 80033dc:	dd000417 	ldw	r20,16(sp)
 80033e0:	dcc00317 	ldw	r19,12(sp)
 80033e4:	dc800217 	ldw	r18,8(sp)
 80033e8:	dc400117 	ldw	r17,4(sp)
 80033ec:	dc000017 	ldw	r16,0(sp)
 80033f0:	dec00a04 	addi	sp,sp,40
 80033f4:	80023f81 	jmpi	80023f8 <_malloc_r>
 80033f8:	a8c00017 	ldw	r3,0(r21)
 80033fc:	90c00015 	stw	r3,0(r18)
 8003400:	a8c00117 	ldw	r3,4(r21)
 8003404:	90c00115 	stw	r3,4(r18)
 8003408:	00c006c4 	movi	r3,27
 800340c:	19804536 	bltu	r3,r6,8003524 <_realloc_r+0x470>
 8003410:	90800204 	addi	r2,r18,8
 8003414:	a8c00204 	addi	r3,r21,8
 8003418:	003f6306 	br	80031a8 <_realloc_r+0xf4>
 800341c:	9005883a 	mov	r2,r18
 8003420:	a8c00017 	ldw	r3,0(r21)
 8003424:	b821883a 	mov	r16,r23
 8003428:	b027883a 	mov	r19,r22
 800342c:	10c00015 	stw	r3,0(r2)
 8003430:	a8c00117 	ldw	r3,4(r21)
 8003434:	10c00115 	stw	r3,4(r2)
 8003438:	a8c00217 	ldw	r3,8(r21)
 800343c:	10c00215 	stw	r3,8(r2)
 8003440:	003f6a06 	br	80031ec <_realloc_r+0x138>
 8003444:	9c67883a 	add	r19,r19,r17
 8003448:	4445c83a 	sub	r2,r8,r17
 800344c:	e4c00215 	stw	r19,8(fp)
 8003450:	10800054 	ori	r2,r2,1
 8003454:	98800115 	stw	r2,4(r19)
 8003458:	a8bfff17 	ldw	r2,-4(r21)
 800345c:	a009883a 	mov	r4,r20
 8003460:	1080004c 	andi	r2,r2,1
 8003464:	1462b03a 	or	r17,r2,r17
 8003468:	ac7fff15 	stw	r17,-4(r21)
 800346c:	8004abc0 	call	8004abc <__malloc_unlock>
 8003470:	a805883a 	mov	r2,r21
 8003474:	003f6b06 	br	8003224 <_realloc_r+0x170>
 8003478:	a80b883a 	mov	r5,r21
 800347c:	9009883a 	mov	r4,r18
 8003480:	8002e300 	call	8002e30 <memmove>
 8003484:	003f4e06 	br	80031c0 <_realloc_r+0x10c>
 8003488:	89000404 	addi	r4,r17,16
 800348c:	b93fbc16 	blt	r23,r4,8003380 <_realloc_r+0x2cc>
 8003490:	b0800317 	ldw	r2,12(r22)
 8003494:	b0c00217 	ldw	r3,8(r22)
 8003498:	81bfff04 	addi	r6,r16,-4
 800349c:	01000904 	movi	r4,36
 80034a0:	18800315 	stw	r2,12(r3)
 80034a4:	10c00215 	stw	r3,8(r2)
 80034a8:	b4800204 	addi	r18,r22,8
 80034ac:	21804336 	bltu	r4,r6,80035bc <_realloc_r+0x508>
 80034b0:	008004c4 	movi	r2,19
 80034b4:	11803f2e 	bgeu	r2,r6,80035b4 <_realloc_r+0x500>
 80034b8:	a8800017 	ldw	r2,0(r21)
 80034bc:	b0800215 	stw	r2,8(r22)
 80034c0:	a8800117 	ldw	r2,4(r21)
 80034c4:	b0800315 	stw	r2,12(r22)
 80034c8:	008006c4 	movi	r2,27
 80034cc:	11803f36 	bltu	r2,r6,80035cc <_realloc_r+0x518>
 80034d0:	b0800404 	addi	r2,r22,16
 80034d4:	ad400204 	addi	r21,r21,8
 80034d8:	a8c00017 	ldw	r3,0(r21)
 80034dc:	10c00015 	stw	r3,0(r2)
 80034e0:	a8c00117 	ldw	r3,4(r21)
 80034e4:	10c00115 	stw	r3,4(r2)
 80034e8:	a8c00217 	ldw	r3,8(r21)
 80034ec:	10c00215 	stw	r3,8(r2)
 80034f0:	b447883a 	add	r3,r22,r17
 80034f4:	bc45c83a 	sub	r2,r23,r17
 80034f8:	e0c00215 	stw	r3,8(fp)
 80034fc:	10800054 	ori	r2,r2,1
 8003500:	18800115 	stw	r2,4(r3)
 8003504:	b0800117 	ldw	r2,4(r22)
 8003508:	a009883a 	mov	r4,r20
 800350c:	1080004c 	andi	r2,r2,1
 8003510:	1462b03a 	or	r17,r2,r17
 8003514:	b4400115 	stw	r17,4(r22)
 8003518:	8004abc0 	call	8004abc <__malloc_unlock>
 800351c:	9005883a 	mov	r2,r18
 8003520:	003f4006 	br	8003224 <_realloc_r+0x170>
 8003524:	a8c00217 	ldw	r3,8(r21)
 8003528:	90c00215 	stw	r3,8(r18)
 800352c:	a8c00317 	ldw	r3,12(r21)
 8003530:	90c00315 	stw	r3,12(r18)
 8003534:	30801126 	beq	r6,r2,800357c <_realloc_r+0x4c8>
 8003538:	90800404 	addi	r2,r18,16
 800353c:	a8c00404 	addi	r3,r21,16
 8003540:	003f1906 	br	80031a8 <_realloc_r+0xf4>
 8003544:	90ffff17 	ldw	r3,-4(r18)
 8003548:	00bfff04 	movi	r2,-4
 800354c:	a825883a 	mov	r18,r21
 8003550:	1884703a 	and	r2,r3,r2
 8003554:	80a1883a 	add	r16,r16,r2
 8003558:	003f2406 	br	80031ec <_realloc_r+0x138>
 800355c:	a8800217 	ldw	r2,8(r21)
 8003560:	b0800415 	stw	r2,16(r22)
 8003564:	a8800317 	ldw	r2,12(r21)
 8003568:	b0800515 	stw	r2,20(r22)
 800356c:	31000a26 	beq	r6,r4,8003598 <_realloc_r+0x4e4>
 8003570:	b0800604 	addi	r2,r22,24
 8003574:	ad400404 	addi	r21,r21,16
 8003578:	003fa906 	br	8003420 <_realloc_r+0x36c>
 800357c:	a9000417 	ldw	r4,16(r21)
 8003580:	90800604 	addi	r2,r18,24
 8003584:	a8c00604 	addi	r3,r21,24
 8003588:	91000415 	stw	r4,16(r18)
 800358c:	a9000517 	ldw	r4,20(r21)
 8003590:	91000515 	stw	r4,20(r18)
 8003594:	003f0406 	br	80031a8 <_realloc_r+0xf4>
 8003598:	a8c00417 	ldw	r3,16(r21)
 800359c:	ad400604 	addi	r21,r21,24
 80035a0:	b0800804 	addi	r2,r22,32
 80035a4:	b0c00615 	stw	r3,24(r22)
 80035a8:	a8ffff17 	ldw	r3,-4(r21)
 80035ac:	b0c00715 	stw	r3,28(r22)
 80035b0:	003f9b06 	br	8003420 <_realloc_r+0x36c>
 80035b4:	9005883a 	mov	r2,r18
 80035b8:	003fc706 	br	80034d8 <_realloc_r+0x424>
 80035bc:	a80b883a 	mov	r5,r21
 80035c0:	9009883a 	mov	r4,r18
 80035c4:	8002e300 	call	8002e30 <memmove>
 80035c8:	003fc906 	br	80034f0 <_realloc_r+0x43c>
 80035cc:	a8800217 	ldw	r2,8(r21)
 80035d0:	b0800415 	stw	r2,16(r22)
 80035d4:	a8800317 	ldw	r2,12(r21)
 80035d8:	b0800515 	stw	r2,20(r22)
 80035dc:	31000726 	beq	r6,r4,80035fc <_realloc_r+0x548>
 80035e0:	b0800604 	addi	r2,r22,24
 80035e4:	ad400404 	addi	r21,r21,16
 80035e8:	003fbb06 	br	80034d8 <_realloc_r+0x424>
 80035ec:	a009883a 	mov	r4,r20
 80035f0:	8004abc0 	call	8004abc <__malloc_unlock>
 80035f4:	0005883a 	mov	r2,zero
 80035f8:	003f0a06 	br	8003224 <_realloc_r+0x170>
 80035fc:	a8c00417 	ldw	r3,16(r21)
 8003600:	ad400604 	addi	r21,r21,24
 8003604:	b0800804 	addi	r2,r22,32
 8003608:	b0c00615 	stw	r3,24(r22)
 800360c:	a8ffff17 	ldw	r3,-4(r21)
 8003610:	b0c00715 	stw	r3,28(r22)
 8003614:	003fb006 	br	80034d8 <_realloc_r+0x424>

08003618 <_sbrk_r>:
 8003618:	defffd04 	addi	sp,sp,-12
 800361c:	dc000015 	stw	r16,0(sp)
 8003620:	04020074 	movhi	r16,2049
 8003624:	dc400115 	stw	r17,4(sp)
 8003628:	8428af04 	addi	r16,r16,-23876
 800362c:	2023883a 	mov	r17,r4
 8003630:	2809883a 	mov	r4,r5
 8003634:	dfc00215 	stw	ra,8(sp)
 8003638:	80000015 	stw	zero,0(r16)
 800363c:	8004c7c0 	call	8004c7c <sbrk>
 8003640:	00ffffc4 	movi	r3,-1
 8003644:	10c00526 	beq	r2,r3,800365c <_sbrk_r+0x44>
 8003648:	dfc00217 	ldw	ra,8(sp)
 800364c:	dc400117 	ldw	r17,4(sp)
 8003650:	dc000017 	ldw	r16,0(sp)
 8003654:	dec00304 	addi	sp,sp,12
 8003658:	f800283a 	ret
 800365c:	80c00017 	ldw	r3,0(r16)
 8003660:	183ff926 	beq	r3,zero,8003648 <_sbrk_r+0x30>
 8003664:	88c00015 	stw	r3,0(r17)
 8003668:	003ff706 	br	8003648 <_sbrk_r+0x30>

0800366c <__sread>:
 800366c:	defffe04 	addi	sp,sp,-8
 8003670:	dc000015 	stw	r16,0(sp)
 8003674:	2821883a 	mov	r16,r5
 8003678:	2940038f 	ldh	r5,14(r5)
 800367c:	dfc00115 	stw	ra,4(sp)
 8003680:	80043ac0 	call	80043ac <_read_r>
 8003684:	10000716 	blt	r2,zero,80036a4 <__sread+0x38>
 8003688:	80c01417 	ldw	r3,80(r16)
 800368c:	1887883a 	add	r3,r3,r2
 8003690:	80c01415 	stw	r3,80(r16)
 8003694:	dfc00117 	ldw	ra,4(sp)
 8003698:	dc000017 	ldw	r16,0(sp)
 800369c:	dec00204 	addi	sp,sp,8
 80036a0:	f800283a 	ret
 80036a4:	80c0030b 	ldhu	r3,12(r16)
 80036a8:	18fbffcc 	andi	r3,r3,61439
 80036ac:	80c0030d 	sth	r3,12(r16)
 80036b0:	dfc00117 	ldw	ra,4(sp)
 80036b4:	dc000017 	ldw	r16,0(sp)
 80036b8:	dec00204 	addi	sp,sp,8
 80036bc:	f800283a 	ret

080036c0 <__seofread>:
 80036c0:	0005883a 	mov	r2,zero
 80036c4:	f800283a 	ret

080036c8 <__swrite>:
 80036c8:	2880030b 	ldhu	r2,12(r5)
 80036cc:	defffb04 	addi	sp,sp,-20
 80036d0:	dcc00315 	stw	r19,12(sp)
 80036d4:	dc800215 	stw	r18,8(sp)
 80036d8:	dc400115 	stw	r17,4(sp)
 80036dc:	dc000015 	stw	r16,0(sp)
 80036e0:	dfc00415 	stw	ra,16(sp)
 80036e4:	10c0400c 	andi	r3,r2,256
 80036e8:	2821883a 	mov	r16,r5
 80036ec:	2023883a 	mov	r17,r4
 80036f0:	3025883a 	mov	r18,r6
 80036f4:	3827883a 	mov	r19,r7
 80036f8:	18000526 	beq	r3,zero,8003710 <__swrite+0x48>
 80036fc:	2940038f 	ldh	r5,14(r5)
 8003700:	01c00084 	movi	r7,2
 8003704:	000d883a 	mov	r6,zero
 8003708:	80041900 	call	8004190 <_lseek_r>
 800370c:	8080030b 	ldhu	r2,12(r16)
 8003710:	8140038f 	ldh	r5,14(r16)
 8003714:	10bbffcc 	andi	r2,r2,61439
 8003718:	980f883a 	mov	r7,r19
 800371c:	900d883a 	mov	r6,r18
 8003720:	8809883a 	mov	r4,r17
 8003724:	8080030d 	sth	r2,12(r16)
 8003728:	dfc00417 	ldw	ra,16(sp)
 800372c:	dcc00317 	ldw	r19,12(sp)
 8003730:	dc800217 	ldw	r18,8(sp)
 8003734:	dc400117 	ldw	r17,4(sp)
 8003738:	dc000017 	ldw	r16,0(sp)
 800373c:	dec00504 	addi	sp,sp,20
 8003740:	80037a81 	jmpi	80037a8 <_write_r>

08003744 <__sseek>:
 8003744:	defffe04 	addi	sp,sp,-8
 8003748:	dc000015 	stw	r16,0(sp)
 800374c:	2821883a 	mov	r16,r5
 8003750:	2940038f 	ldh	r5,14(r5)
 8003754:	dfc00115 	stw	ra,4(sp)
 8003758:	80041900 	call	8004190 <_lseek_r>
 800375c:	00ffffc4 	movi	r3,-1
 8003760:	10c00826 	beq	r2,r3,8003784 <__sseek+0x40>
 8003764:	80c0030b 	ldhu	r3,12(r16)
 8003768:	80801415 	stw	r2,80(r16)
 800376c:	18c40014 	ori	r3,r3,4096
 8003770:	80c0030d 	sth	r3,12(r16)
 8003774:	dfc00117 	ldw	ra,4(sp)
 8003778:	dc000017 	ldw	r16,0(sp)
 800377c:	dec00204 	addi	sp,sp,8
 8003780:	f800283a 	ret
 8003784:	80c0030b 	ldhu	r3,12(r16)
 8003788:	18fbffcc 	andi	r3,r3,61439
 800378c:	80c0030d 	sth	r3,12(r16)
 8003790:	dfc00117 	ldw	ra,4(sp)
 8003794:	dc000017 	ldw	r16,0(sp)
 8003798:	dec00204 	addi	sp,sp,8
 800379c:	f800283a 	ret

080037a0 <__sclose>:
 80037a0:	2940038f 	ldh	r5,14(r5)
 80037a4:	800395c1 	jmpi	800395c <_close_r>

080037a8 <_write_r>:
 80037a8:	defffd04 	addi	sp,sp,-12
 80037ac:	2805883a 	mov	r2,r5
 80037b0:	dc000015 	stw	r16,0(sp)
 80037b4:	04020074 	movhi	r16,2049
 80037b8:	dc400115 	stw	r17,4(sp)
 80037bc:	300b883a 	mov	r5,r6
 80037c0:	8428af04 	addi	r16,r16,-23876
 80037c4:	2023883a 	mov	r17,r4
 80037c8:	380d883a 	mov	r6,r7
 80037cc:	1009883a 	mov	r4,r2
 80037d0:	dfc00215 	stw	ra,8(sp)
 80037d4:	80000015 	stw	zero,0(r16)
 80037d8:	8004d980 	call	8004d98 <write>
 80037dc:	00ffffc4 	movi	r3,-1
 80037e0:	10c00526 	beq	r2,r3,80037f8 <_write_r+0x50>
 80037e4:	dfc00217 	ldw	ra,8(sp)
 80037e8:	dc400117 	ldw	r17,4(sp)
 80037ec:	dc000017 	ldw	r16,0(sp)
 80037f0:	dec00304 	addi	sp,sp,12
 80037f4:	f800283a 	ret
 80037f8:	80c00017 	ldw	r3,0(r16)
 80037fc:	183ff926 	beq	r3,zero,80037e4 <_write_r+0x3c>
 8003800:	88c00015 	stw	r3,0(r17)
 8003804:	003ff706 	br	80037e4 <_write_r+0x3c>

08003808 <__swsetup_r>:
 8003808:	00820074 	movhi	r2,2049
 800380c:	defffd04 	addi	sp,sp,-12
 8003810:	10a20404 	addi	r2,r2,-30704
 8003814:	dc400115 	stw	r17,4(sp)
 8003818:	2023883a 	mov	r17,r4
 800381c:	11000017 	ldw	r4,0(r2)
 8003820:	dc000015 	stw	r16,0(sp)
 8003824:	dfc00215 	stw	ra,8(sp)
 8003828:	2821883a 	mov	r16,r5
 800382c:	20000226 	beq	r4,zero,8003838 <__swsetup_r+0x30>
 8003830:	20800e17 	ldw	r2,56(r4)
 8003834:	10003126 	beq	r2,zero,80038fc <__swsetup_r+0xf4>
 8003838:	8080030b 	ldhu	r2,12(r16)
 800383c:	10c0020c 	andi	r3,r2,8
 8003840:	1009883a 	mov	r4,r2
 8003844:	18000f26 	beq	r3,zero,8003884 <__swsetup_r+0x7c>
 8003848:	80c00417 	ldw	r3,16(r16)
 800384c:	18001526 	beq	r3,zero,80038a4 <__swsetup_r+0x9c>
 8003850:	1100004c 	andi	r4,r2,1
 8003854:	20001c1e 	bne	r4,zero,80038c8 <__swsetup_r+0xc0>
 8003858:	1080008c 	andi	r2,r2,2
 800385c:	1000291e 	bne	r2,zero,8003904 <__swsetup_r+0xfc>
 8003860:	80800517 	ldw	r2,20(r16)
 8003864:	80800215 	stw	r2,8(r16)
 8003868:	18001c26 	beq	r3,zero,80038dc <__swsetup_r+0xd4>
 800386c:	0005883a 	mov	r2,zero
 8003870:	dfc00217 	ldw	ra,8(sp)
 8003874:	dc400117 	ldw	r17,4(sp)
 8003878:	dc000017 	ldw	r16,0(sp)
 800387c:	dec00304 	addi	sp,sp,12
 8003880:	f800283a 	ret
 8003884:	2080040c 	andi	r2,r4,16
 8003888:	10002e26 	beq	r2,zero,8003944 <__swsetup_r+0x13c>
 800388c:	2080010c 	andi	r2,r4,4
 8003890:	10001e1e 	bne	r2,zero,800390c <__swsetup_r+0x104>
 8003894:	80c00417 	ldw	r3,16(r16)
 8003898:	20800214 	ori	r2,r4,8
 800389c:	8080030d 	sth	r2,12(r16)
 80038a0:	183feb1e 	bne	r3,zero,8003850 <__swsetup_r+0x48>
 80038a4:	1100a00c 	andi	r4,r2,640
 80038a8:	01408004 	movi	r5,512
 80038ac:	217fe826 	beq	r4,r5,8003850 <__swsetup_r+0x48>
 80038b0:	800b883a 	mov	r5,r16
 80038b4:	8809883a 	mov	r4,r17
 80038b8:	80041f00 	call	80041f0 <__smakebuf_r>
 80038bc:	8080030b 	ldhu	r2,12(r16)
 80038c0:	80c00417 	ldw	r3,16(r16)
 80038c4:	003fe206 	br	8003850 <__swsetup_r+0x48>
 80038c8:	80800517 	ldw	r2,20(r16)
 80038cc:	80000215 	stw	zero,8(r16)
 80038d0:	0085c83a 	sub	r2,zero,r2
 80038d4:	80800615 	stw	r2,24(r16)
 80038d8:	183fe41e 	bne	r3,zero,800386c <__swsetup_r+0x64>
 80038dc:	80c0030b 	ldhu	r3,12(r16)
 80038e0:	0005883a 	mov	r2,zero
 80038e4:	1900200c 	andi	r4,r3,128
 80038e8:	203fe126 	beq	r4,zero,8003870 <__swsetup_r+0x68>
 80038ec:	18c01014 	ori	r3,r3,64
 80038f0:	80c0030d 	sth	r3,12(r16)
 80038f4:	00bfffc4 	movi	r2,-1
 80038f8:	003fdd06 	br	8003870 <__swsetup_r+0x68>
 80038fc:	8001d640 	call	8001d64 <__sinit>
 8003900:	003fcd06 	br	8003838 <__swsetup_r+0x30>
 8003904:	0005883a 	mov	r2,zero
 8003908:	003fd606 	br	8003864 <__swsetup_r+0x5c>
 800390c:	81400c17 	ldw	r5,48(r16)
 8003910:	28000626 	beq	r5,zero,800392c <__swsetup_r+0x124>
 8003914:	80801004 	addi	r2,r16,64
 8003918:	28800326 	beq	r5,r2,8003928 <__swsetup_r+0x120>
 800391c:	8809883a 	mov	r4,r17
 8003920:	8003e800 	call	8003e80 <_free_r>
 8003924:	8100030b 	ldhu	r4,12(r16)
 8003928:	80000c15 	stw	zero,48(r16)
 800392c:	80c00417 	ldw	r3,16(r16)
 8003930:	00bff6c4 	movi	r2,-37
 8003934:	1108703a 	and	r4,r2,r4
 8003938:	80000115 	stw	zero,4(r16)
 800393c:	80c00015 	stw	r3,0(r16)
 8003940:	003fd506 	br	8003898 <__swsetup_r+0x90>
 8003944:	00800244 	movi	r2,9
 8003948:	88800015 	stw	r2,0(r17)
 800394c:	20801014 	ori	r2,r4,64
 8003950:	8080030d 	sth	r2,12(r16)
 8003954:	00bfffc4 	movi	r2,-1
 8003958:	003fc506 	br	8003870 <__swsetup_r+0x68>

0800395c <_close_r>:
 800395c:	defffd04 	addi	sp,sp,-12
 8003960:	dc000015 	stw	r16,0(sp)
 8003964:	04020074 	movhi	r16,2049
 8003968:	dc400115 	stw	r17,4(sp)
 800396c:	8428af04 	addi	r16,r16,-23876
 8003970:	2023883a 	mov	r17,r4
 8003974:	2809883a 	mov	r4,r5
 8003978:	dfc00215 	stw	ra,8(sp)
 800397c:	80000015 	stw	zero,0(r16)
 8003980:	80045580 	call	8004558 <close>
 8003984:	00ffffc4 	movi	r3,-1
 8003988:	10c00526 	beq	r2,r3,80039a0 <_close_r+0x44>
 800398c:	dfc00217 	ldw	ra,8(sp)
 8003990:	dc400117 	ldw	r17,4(sp)
 8003994:	dc000017 	ldw	r16,0(sp)
 8003998:	dec00304 	addi	sp,sp,12
 800399c:	f800283a 	ret
 80039a0:	80c00017 	ldw	r3,0(r16)
 80039a4:	183ff926 	beq	r3,zero,800398c <_close_r+0x30>
 80039a8:	88c00015 	stw	r3,0(r17)
 80039ac:	003ff706 	br	800398c <_close_r+0x30>

080039b0 <_fclose_r>:
 80039b0:	28003926 	beq	r5,zero,8003a98 <_fclose_r+0xe8>
 80039b4:	defffc04 	addi	sp,sp,-16
 80039b8:	dc400115 	stw	r17,4(sp)
 80039bc:	dc000015 	stw	r16,0(sp)
 80039c0:	dfc00315 	stw	ra,12(sp)
 80039c4:	dc800215 	stw	r18,8(sp)
 80039c8:	2023883a 	mov	r17,r4
 80039cc:	2821883a 	mov	r16,r5
 80039d0:	20000226 	beq	r4,zero,80039dc <_fclose_r+0x2c>
 80039d4:	20800e17 	ldw	r2,56(r4)
 80039d8:	10002726 	beq	r2,zero,8003a78 <_fclose_r+0xc8>
 80039dc:	8080030f 	ldh	r2,12(r16)
 80039e0:	1000071e 	bne	r2,zero,8003a00 <_fclose_r+0x50>
 80039e4:	0005883a 	mov	r2,zero
 80039e8:	dfc00317 	ldw	ra,12(sp)
 80039ec:	dc800217 	ldw	r18,8(sp)
 80039f0:	dc400117 	ldw	r17,4(sp)
 80039f4:	dc000017 	ldw	r16,0(sp)
 80039f8:	dec00404 	addi	sp,sp,16
 80039fc:	f800283a 	ret
 8003a00:	800b883a 	mov	r5,r16
 8003a04:	8809883a 	mov	r4,r17
 8003a08:	8003ab40 	call	8003ab4 <__sflush_r>
 8003a0c:	1025883a 	mov	r18,r2
 8003a10:	80800b17 	ldw	r2,44(r16)
 8003a14:	10000426 	beq	r2,zero,8003a28 <_fclose_r+0x78>
 8003a18:	81400717 	ldw	r5,28(r16)
 8003a1c:	8809883a 	mov	r4,r17
 8003a20:	103ee83a 	callr	r2
 8003a24:	10001616 	blt	r2,zero,8003a80 <_fclose_r+0xd0>
 8003a28:	8080030b 	ldhu	r2,12(r16)
 8003a2c:	1080200c 	andi	r2,r2,128
 8003a30:	1000151e 	bne	r2,zero,8003a88 <_fclose_r+0xd8>
 8003a34:	81400c17 	ldw	r5,48(r16)
 8003a38:	28000526 	beq	r5,zero,8003a50 <_fclose_r+0xa0>
 8003a3c:	80801004 	addi	r2,r16,64
 8003a40:	28800226 	beq	r5,r2,8003a4c <_fclose_r+0x9c>
 8003a44:	8809883a 	mov	r4,r17
 8003a48:	8003e800 	call	8003e80 <_free_r>
 8003a4c:	80000c15 	stw	zero,48(r16)
 8003a50:	81401117 	ldw	r5,68(r16)
 8003a54:	28000326 	beq	r5,zero,8003a64 <_fclose_r+0xb4>
 8003a58:	8809883a 	mov	r4,r17
 8003a5c:	8003e800 	call	8003e80 <_free_r>
 8003a60:	80001115 	stw	zero,68(r16)
 8003a64:	8001d740 	call	8001d74 <__sfp_lock_acquire>
 8003a68:	8000030d 	sth	zero,12(r16)
 8003a6c:	8001d780 	call	8001d78 <__sfp_lock_release>
 8003a70:	9005883a 	mov	r2,r18
 8003a74:	003fdc06 	br	80039e8 <_fclose_r+0x38>
 8003a78:	8001d640 	call	8001d64 <__sinit>
 8003a7c:	003fd706 	br	80039dc <_fclose_r+0x2c>
 8003a80:	04bfffc4 	movi	r18,-1
 8003a84:	003fe806 	br	8003a28 <_fclose_r+0x78>
 8003a88:	81400417 	ldw	r5,16(r16)
 8003a8c:	8809883a 	mov	r4,r17
 8003a90:	8003e800 	call	8003e80 <_free_r>
 8003a94:	003fe706 	br	8003a34 <_fclose_r+0x84>
 8003a98:	0005883a 	mov	r2,zero
 8003a9c:	f800283a 	ret

08003aa0 <fclose>:
 8003aa0:	00820074 	movhi	r2,2049
 8003aa4:	10a20404 	addi	r2,r2,-30704
 8003aa8:	200b883a 	mov	r5,r4
 8003aac:	11000017 	ldw	r4,0(r2)
 8003ab0:	80039b01 	jmpi	80039b0 <_fclose_r>

08003ab4 <__sflush_r>:
 8003ab4:	2880030b 	ldhu	r2,12(r5)
 8003ab8:	defffb04 	addi	sp,sp,-20
 8003abc:	dcc00315 	stw	r19,12(sp)
 8003ac0:	dc400115 	stw	r17,4(sp)
 8003ac4:	dfc00415 	stw	ra,16(sp)
 8003ac8:	dc800215 	stw	r18,8(sp)
 8003acc:	dc000015 	stw	r16,0(sp)
 8003ad0:	10c0020c 	andi	r3,r2,8
 8003ad4:	2823883a 	mov	r17,r5
 8003ad8:	2027883a 	mov	r19,r4
 8003adc:	1800311e 	bne	r3,zero,8003ba4 <__sflush_r+0xf0>
 8003ae0:	28c00117 	ldw	r3,4(r5)
 8003ae4:	10820014 	ori	r2,r2,2048
 8003ae8:	2880030d 	sth	r2,12(r5)
 8003aec:	00c04b0e 	bge	zero,r3,8003c1c <__sflush_r+0x168>
 8003af0:	8a000a17 	ldw	r8,40(r17)
 8003af4:	40002326 	beq	r8,zero,8003b84 <__sflush_r+0xd0>
 8003af8:	9c000017 	ldw	r16,0(r19)
 8003afc:	10c4000c 	andi	r3,r2,4096
 8003b00:	98000015 	stw	zero,0(r19)
 8003b04:	18004826 	beq	r3,zero,8003c28 <__sflush_r+0x174>
 8003b08:	89801417 	ldw	r6,80(r17)
 8003b0c:	10c0010c 	andi	r3,r2,4
 8003b10:	18000626 	beq	r3,zero,8003b2c <__sflush_r+0x78>
 8003b14:	88c00117 	ldw	r3,4(r17)
 8003b18:	88800c17 	ldw	r2,48(r17)
 8003b1c:	30cdc83a 	sub	r6,r6,r3
 8003b20:	10000226 	beq	r2,zero,8003b2c <__sflush_r+0x78>
 8003b24:	88800f17 	ldw	r2,60(r17)
 8003b28:	308dc83a 	sub	r6,r6,r2
 8003b2c:	89400717 	ldw	r5,28(r17)
 8003b30:	000f883a 	mov	r7,zero
 8003b34:	9809883a 	mov	r4,r19
 8003b38:	403ee83a 	callr	r8
 8003b3c:	00ffffc4 	movi	r3,-1
 8003b40:	10c04426 	beq	r2,r3,8003c54 <__sflush_r+0x1a0>
 8003b44:	88c0030b 	ldhu	r3,12(r17)
 8003b48:	89000417 	ldw	r4,16(r17)
 8003b4c:	88000115 	stw	zero,4(r17)
 8003b50:	197dffcc 	andi	r5,r3,63487
 8003b54:	8940030d 	sth	r5,12(r17)
 8003b58:	89000015 	stw	r4,0(r17)
 8003b5c:	18c4000c 	andi	r3,r3,4096
 8003b60:	18002c1e 	bne	r3,zero,8003c14 <__sflush_r+0x160>
 8003b64:	89400c17 	ldw	r5,48(r17)
 8003b68:	9c000015 	stw	r16,0(r19)
 8003b6c:	28000526 	beq	r5,zero,8003b84 <__sflush_r+0xd0>
 8003b70:	88801004 	addi	r2,r17,64
 8003b74:	28800226 	beq	r5,r2,8003b80 <__sflush_r+0xcc>
 8003b78:	9809883a 	mov	r4,r19
 8003b7c:	8003e800 	call	8003e80 <_free_r>
 8003b80:	88000c15 	stw	zero,48(r17)
 8003b84:	0005883a 	mov	r2,zero
 8003b88:	dfc00417 	ldw	ra,16(sp)
 8003b8c:	dcc00317 	ldw	r19,12(sp)
 8003b90:	dc800217 	ldw	r18,8(sp)
 8003b94:	dc400117 	ldw	r17,4(sp)
 8003b98:	dc000017 	ldw	r16,0(sp)
 8003b9c:	dec00504 	addi	sp,sp,20
 8003ba0:	f800283a 	ret
 8003ba4:	2c800417 	ldw	r18,16(r5)
 8003ba8:	903ff626 	beq	r18,zero,8003b84 <__sflush_r+0xd0>
 8003bac:	2c000017 	ldw	r16,0(r5)
 8003bb0:	108000cc 	andi	r2,r2,3
 8003bb4:	2c800015 	stw	r18,0(r5)
 8003bb8:	84a1c83a 	sub	r16,r16,r18
 8003bbc:	1000131e 	bne	r2,zero,8003c0c <__sflush_r+0x158>
 8003bc0:	28800517 	ldw	r2,20(r5)
 8003bc4:	88800215 	stw	r2,8(r17)
 8003bc8:	04000316 	blt	zero,r16,8003bd8 <__sflush_r+0x124>
 8003bcc:	003fed06 	br	8003b84 <__sflush_r+0xd0>
 8003bd0:	90a5883a 	add	r18,r18,r2
 8003bd4:	043feb0e 	bge	zero,r16,8003b84 <__sflush_r+0xd0>
 8003bd8:	88800917 	ldw	r2,36(r17)
 8003bdc:	89400717 	ldw	r5,28(r17)
 8003be0:	800f883a 	mov	r7,r16
 8003be4:	900d883a 	mov	r6,r18
 8003be8:	9809883a 	mov	r4,r19
 8003bec:	103ee83a 	callr	r2
 8003bf0:	80a1c83a 	sub	r16,r16,r2
 8003bf4:	00bff616 	blt	zero,r2,8003bd0 <__sflush_r+0x11c>
 8003bf8:	88c0030b 	ldhu	r3,12(r17)
 8003bfc:	00bfffc4 	movi	r2,-1
 8003c00:	18c01014 	ori	r3,r3,64
 8003c04:	88c0030d 	sth	r3,12(r17)
 8003c08:	003fdf06 	br	8003b88 <__sflush_r+0xd4>
 8003c0c:	0005883a 	mov	r2,zero
 8003c10:	003fec06 	br	8003bc4 <__sflush_r+0x110>
 8003c14:	88801415 	stw	r2,80(r17)
 8003c18:	003fd206 	br	8003b64 <__sflush_r+0xb0>
 8003c1c:	28c00f17 	ldw	r3,60(r5)
 8003c20:	00ffb316 	blt	zero,r3,8003af0 <__sflush_r+0x3c>
 8003c24:	003fd706 	br	8003b84 <__sflush_r+0xd0>
 8003c28:	89400717 	ldw	r5,28(r17)
 8003c2c:	000d883a 	mov	r6,zero
 8003c30:	01c00044 	movi	r7,1
 8003c34:	9809883a 	mov	r4,r19
 8003c38:	403ee83a 	callr	r8
 8003c3c:	100d883a 	mov	r6,r2
 8003c40:	00bfffc4 	movi	r2,-1
 8003c44:	30801426 	beq	r6,r2,8003c98 <__sflush_r+0x1e4>
 8003c48:	8880030b 	ldhu	r2,12(r17)
 8003c4c:	8a000a17 	ldw	r8,40(r17)
 8003c50:	003fae06 	br	8003b0c <__sflush_r+0x58>
 8003c54:	98c00017 	ldw	r3,0(r19)
 8003c58:	183fba26 	beq	r3,zero,8003b44 <__sflush_r+0x90>
 8003c5c:	01000744 	movi	r4,29
 8003c60:	19000626 	beq	r3,r4,8003c7c <__sflush_r+0x1c8>
 8003c64:	01000584 	movi	r4,22
 8003c68:	19000426 	beq	r3,r4,8003c7c <__sflush_r+0x1c8>
 8003c6c:	88c0030b 	ldhu	r3,12(r17)
 8003c70:	18c01014 	ori	r3,r3,64
 8003c74:	88c0030d 	sth	r3,12(r17)
 8003c78:	003fc306 	br	8003b88 <__sflush_r+0xd4>
 8003c7c:	8880030b 	ldhu	r2,12(r17)
 8003c80:	88c00417 	ldw	r3,16(r17)
 8003c84:	88000115 	stw	zero,4(r17)
 8003c88:	10bdffcc 	andi	r2,r2,63487
 8003c8c:	8880030d 	sth	r2,12(r17)
 8003c90:	88c00015 	stw	r3,0(r17)
 8003c94:	003fb306 	br	8003b64 <__sflush_r+0xb0>
 8003c98:	98800017 	ldw	r2,0(r19)
 8003c9c:	103fea26 	beq	r2,zero,8003c48 <__sflush_r+0x194>
 8003ca0:	00c00744 	movi	r3,29
 8003ca4:	10c00226 	beq	r2,r3,8003cb0 <__sflush_r+0x1fc>
 8003ca8:	00c00584 	movi	r3,22
 8003cac:	10c0031e 	bne	r2,r3,8003cbc <__sflush_r+0x208>
 8003cb0:	9c000015 	stw	r16,0(r19)
 8003cb4:	0005883a 	mov	r2,zero
 8003cb8:	003fb306 	br	8003b88 <__sflush_r+0xd4>
 8003cbc:	88c0030b 	ldhu	r3,12(r17)
 8003cc0:	3005883a 	mov	r2,r6
 8003cc4:	18c01014 	ori	r3,r3,64
 8003cc8:	88c0030d 	sth	r3,12(r17)
 8003ccc:	003fae06 	br	8003b88 <__sflush_r+0xd4>

08003cd0 <_fflush_r>:
 8003cd0:	defffd04 	addi	sp,sp,-12
 8003cd4:	dc000115 	stw	r16,4(sp)
 8003cd8:	dfc00215 	stw	ra,8(sp)
 8003cdc:	2021883a 	mov	r16,r4
 8003ce0:	20000226 	beq	r4,zero,8003cec <_fflush_r+0x1c>
 8003ce4:	20800e17 	ldw	r2,56(r4)
 8003ce8:	10000c26 	beq	r2,zero,8003d1c <_fflush_r+0x4c>
 8003cec:	2880030f 	ldh	r2,12(r5)
 8003cf0:	1000051e 	bne	r2,zero,8003d08 <_fflush_r+0x38>
 8003cf4:	0005883a 	mov	r2,zero
 8003cf8:	dfc00217 	ldw	ra,8(sp)
 8003cfc:	dc000117 	ldw	r16,4(sp)
 8003d00:	dec00304 	addi	sp,sp,12
 8003d04:	f800283a 	ret
 8003d08:	8009883a 	mov	r4,r16
 8003d0c:	dfc00217 	ldw	ra,8(sp)
 8003d10:	dc000117 	ldw	r16,4(sp)
 8003d14:	dec00304 	addi	sp,sp,12
 8003d18:	8003ab41 	jmpi	8003ab4 <__sflush_r>
 8003d1c:	d9400015 	stw	r5,0(sp)
 8003d20:	8001d640 	call	8001d64 <__sinit>
 8003d24:	d9400017 	ldw	r5,0(sp)
 8003d28:	003ff006 	br	8003cec <_fflush_r+0x1c>

08003d2c <fflush>:
 8003d2c:	20000526 	beq	r4,zero,8003d44 <fflush+0x18>
 8003d30:	00820074 	movhi	r2,2049
 8003d34:	10a20404 	addi	r2,r2,-30704
 8003d38:	200b883a 	mov	r5,r4
 8003d3c:	11000017 	ldw	r4,0(r2)
 8003d40:	8003cd01 	jmpi	8003cd0 <_fflush_r>
 8003d44:	00820074 	movhi	r2,2049
 8003d48:	10a20304 	addi	r2,r2,-30708
 8003d4c:	11000017 	ldw	r4,0(r2)
 8003d50:	01420034 	movhi	r5,2048
 8003d54:	294f3404 	addi	r5,r5,15568
 8003d58:	80023341 	jmpi	8002334 <_fwalk_reent>

08003d5c <_malloc_trim_r>:
 8003d5c:	defffb04 	addi	sp,sp,-20
 8003d60:	dcc00315 	stw	r19,12(sp)
 8003d64:	04c20034 	movhi	r19,2048
 8003d68:	dc800215 	stw	r18,8(sp)
 8003d6c:	dc400115 	stw	r17,4(sp)
 8003d70:	dc000015 	stw	r16,0(sp)
 8003d74:	dfc00415 	stw	ra,16(sp)
 8003d78:	2821883a 	mov	r16,r5
 8003d7c:	9cdc7f04 	addi	r19,r19,29180
 8003d80:	2025883a 	mov	r18,r4
 8003d84:	8004a980 	call	8004a98 <__malloc_lock>
 8003d88:	98800217 	ldw	r2,8(r19)
 8003d8c:	14400117 	ldw	r17,4(r2)
 8003d90:	00bfff04 	movi	r2,-4
 8003d94:	88a2703a 	and	r17,r17,r2
 8003d98:	8c21c83a 	sub	r16,r17,r16
 8003d9c:	8403fbc4 	addi	r16,r16,4079
 8003da0:	8020d33a 	srli	r16,r16,12
 8003da4:	0083ffc4 	movi	r2,4095
 8003da8:	843fffc4 	addi	r16,r16,-1
 8003dac:	8020933a 	slli	r16,r16,12
 8003db0:	1400060e 	bge	r2,r16,8003dcc <_malloc_trim_r+0x70>
 8003db4:	000b883a 	mov	r5,zero
 8003db8:	9009883a 	mov	r4,r18
 8003dbc:	80036180 	call	8003618 <_sbrk_r>
 8003dc0:	98c00217 	ldw	r3,8(r19)
 8003dc4:	1c47883a 	add	r3,r3,r17
 8003dc8:	10c00a26 	beq	r2,r3,8003df4 <_malloc_trim_r+0x98>
 8003dcc:	9009883a 	mov	r4,r18
 8003dd0:	8004abc0 	call	8004abc <__malloc_unlock>
 8003dd4:	0005883a 	mov	r2,zero
 8003dd8:	dfc00417 	ldw	ra,16(sp)
 8003ddc:	dcc00317 	ldw	r19,12(sp)
 8003de0:	dc800217 	ldw	r18,8(sp)
 8003de4:	dc400117 	ldw	r17,4(sp)
 8003de8:	dc000017 	ldw	r16,0(sp)
 8003dec:	dec00504 	addi	sp,sp,20
 8003df0:	f800283a 	ret
 8003df4:	040bc83a 	sub	r5,zero,r16
 8003df8:	9009883a 	mov	r4,r18
 8003dfc:	80036180 	call	8003618 <_sbrk_r>
 8003e00:	00ffffc4 	movi	r3,-1
 8003e04:	10c00d26 	beq	r2,r3,8003e3c <_malloc_trim_r+0xe0>
 8003e08:	00c20074 	movhi	r3,2049
 8003e0c:	18e8be04 	addi	r3,r3,-23816
 8003e10:	18800017 	ldw	r2,0(r3)
 8003e14:	99000217 	ldw	r4,8(r19)
 8003e18:	8c23c83a 	sub	r17,r17,r16
 8003e1c:	8c400054 	ori	r17,r17,1
 8003e20:	1421c83a 	sub	r16,r2,r16
 8003e24:	24400115 	stw	r17,4(r4)
 8003e28:	9009883a 	mov	r4,r18
 8003e2c:	1c000015 	stw	r16,0(r3)
 8003e30:	8004abc0 	call	8004abc <__malloc_unlock>
 8003e34:	00800044 	movi	r2,1
 8003e38:	003fe706 	br	8003dd8 <_malloc_trim_r+0x7c>
 8003e3c:	000b883a 	mov	r5,zero
 8003e40:	9009883a 	mov	r4,r18
 8003e44:	80036180 	call	8003618 <_sbrk_r>
 8003e48:	99000217 	ldw	r4,8(r19)
 8003e4c:	014003c4 	movi	r5,15
 8003e50:	1107c83a 	sub	r3,r2,r4
 8003e54:	28ffdd0e 	bge	r5,r3,8003dcc <_malloc_trim_r+0x70>
 8003e58:	01420074 	movhi	r5,2049
 8003e5c:	29620504 	addi	r5,r5,-30700
 8003e60:	29400017 	ldw	r5,0(r5)
 8003e64:	18c00054 	ori	r3,r3,1
 8003e68:	20c00115 	stw	r3,4(r4)
 8003e6c:	00c20074 	movhi	r3,2049
 8003e70:	1145c83a 	sub	r2,r2,r5
 8003e74:	18e8be04 	addi	r3,r3,-23816
 8003e78:	18800015 	stw	r2,0(r3)
 8003e7c:	003fd306 	br	8003dcc <_malloc_trim_r+0x70>

08003e80 <_free_r>:
 8003e80:	28004126 	beq	r5,zero,8003f88 <_free_r+0x108>
 8003e84:	defffd04 	addi	sp,sp,-12
 8003e88:	dc400115 	stw	r17,4(sp)
 8003e8c:	dc000015 	stw	r16,0(sp)
 8003e90:	2023883a 	mov	r17,r4
 8003e94:	2821883a 	mov	r16,r5
 8003e98:	dfc00215 	stw	ra,8(sp)
 8003e9c:	8004a980 	call	8004a98 <__malloc_lock>
 8003ea0:	81ffff17 	ldw	r7,-4(r16)
 8003ea4:	00bfff84 	movi	r2,-2
 8003ea8:	01020034 	movhi	r4,2048
 8003eac:	81bffe04 	addi	r6,r16,-8
 8003eb0:	3884703a 	and	r2,r7,r2
 8003eb4:	211c7f04 	addi	r4,r4,29180
 8003eb8:	308b883a 	add	r5,r6,r2
 8003ebc:	2a400117 	ldw	r9,4(r5)
 8003ec0:	22000217 	ldw	r8,8(r4)
 8003ec4:	00ffff04 	movi	r3,-4
 8003ec8:	48c6703a 	and	r3,r9,r3
 8003ecc:	2a005726 	beq	r5,r8,800402c <_free_r+0x1ac>
 8003ed0:	28c00115 	stw	r3,4(r5)
 8003ed4:	39c0004c 	andi	r7,r7,1
 8003ed8:	3800091e 	bne	r7,zero,8003f00 <_free_r+0x80>
 8003edc:	823ffe17 	ldw	r8,-8(r16)
 8003ee0:	22400204 	addi	r9,r4,8
 8003ee4:	320dc83a 	sub	r6,r6,r8
 8003ee8:	31c00217 	ldw	r7,8(r6)
 8003eec:	1205883a 	add	r2,r2,r8
 8003ef0:	3a406526 	beq	r7,r9,8004088 <_free_r+0x208>
 8003ef4:	32000317 	ldw	r8,12(r6)
 8003ef8:	3a000315 	stw	r8,12(r7)
 8003efc:	41c00215 	stw	r7,8(r8)
 8003f00:	28cf883a 	add	r7,r5,r3
 8003f04:	39c00117 	ldw	r7,4(r7)
 8003f08:	39c0004c 	andi	r7,r7,1
 8003f0c:	38003a26 	beq	r7,zero,8003ff8 <_free_r+0x178>
 8003f10:	10c00054 	ori	r3,r2,1
 8003f14:	30c00115 	stw	r3,4(r6)
 8003f18:	3087883a 	add	r3,r6,r2
 8003f1c:	18800015 	stw	r2,0(r3)
 8003f20:	00c07fc4 	movi	r3,511
 8003f24:	18801936 	bltu	r3,r2,8003f8c <_free_r+0x10c>
 8003f28:	1004d0fa 	srli	r2,r2,3
 8003f2c:	01c00044 	movi	r7,1
 8003f30:	21400117 	ldw	r5,4(r4)
 8003f34:	10c00044 	addi	r3,r2,1
 8003f38:	18c7883a 	add	r3,r3,r3
 8003f3c:	1005d0ba 	srai	r2,r2,2
 8003f40:	18c7883a 	add	r3,r3,r3
 8003f44:	18c7883a 	add	r3,r3,r3
 8003f48:	1907883a 	add	r3,r3,r4
 8003f4c:	3884983a 	sll	r2,r7,r2
 8003f50:	19c00017 	ldw	r7,0(r3)
 8003f54:	1a3ffe04 	addi	r8,r3,-8
 8003f58:	1144b03a 	or	r2,r2,r5
 8003f5c:	32000315 	stw	r8,12(r6)
 8003f60:	31c00215 	stw	r7,8(r6)
 8003f64:	20800115 	stw	r2,4(r4)
 8003f68:	19800015 	stw	r6,0(r3)
 8003f6c:	39800315 	stw	r6,12(r7)
 8003f70:	8809883a 	mov	r4,r17
 8003f74:	dfc00217 	ldw	ra,8(sp)
 8003f78:	dc400117 	ldw	r17,4(sp)
 8003f7c:	dc000017 	ldw	r16,0(sp)
 8003f80:	dec00304 	addi	sp,sp,12
 8003f84:	8004abc1 	jmpi	8004abc <__malloc_unlock>
 8003f88:	f800283a 	ret
 8003f8c:	100ad27a 	srli	r5,r2,9
 8003f90:	00c00104 	movi	r3,4
 8003f94:	19404a36 	bltu	r3,r5,80040c0 <_free_r+0x240>
 8003f98:	100ad1ba 	srli	r5,r2,6
 8003f9c:	28c00e44 	addi	r3,r5,57
 8003fa0:	18c7883a 	add	r3,r3,r3
 8003fa4:	29400e04 	addi	r5,r5,56
 8003fa8:	18c7883a 	add	r3,r3,r3
 8003fac:	18c7883a 	add	r3,r3,r3
 8003fb0:	1909883a 	add	r4,r3,r4
 8003fb4:	20c00017 	ldw	r3,0(r4)
 8003fb8:	01c20034 	movhi	r7,2048
 8003fbc:	213ffe04 	addi	r4,r4,-8
 8003fc0:	39dc7f04 	addi	r7,r7,29180
 8003fc4:	20c04426 	beq	r4,r3,80040d8 <_free_r+0x258>
 8003fc8:	01ffff04 	movi	r7,-4
 8003fcc:	19400117 	ldw	r5,4(r3)
 8003fd0:	29ca703a 	and	r5,r5,r7
 8003fd4:	1140022e 	bgeu	r2,r5,8003fe0 <_free_r+0x160>
 8003fd8:	18c00217 	ldw	r3,8(r3)
 8003fdc:	20fffb1e 	bne	r4,r3,8003fcc <_free_r+0x14c>
 8003fe0:	19000317 	ldw	r4,12(r3)
 8003fe4:	31000315 	stw	r4,12(r6)
 8003fe8:	30c00215 	stw	r3,8(r6)
 8003fec:	21800215 	stw	r6,8(r4)
 8003ff0:	19800315 	stw	r6,12(r3)
 8003ff4:	003fde06 	br	8003f70 <_free_r+0xf0>
 8003ff8:	29c00217 	ldw	r7,8(r5)
 8003ffc:	10c5883a 	add	r2,r2,r3
 8004000:	00c20034 	movhi	r3,2048
 8004004:	18dc8104 	addi	r3,r3,29188
 8004008:	38c03b26 	beq	r7,r3,80040f8 <_free_r+0x278>
 800400c:	2a000317 	ldw	r8,12(r5)
 8004010:	11400054 	ori	r5,r2,1
 8004014:	3087883a 	add	r3,r6,r2
 8004018:	3a000315 	stw	r8,12(r7)
 800401c:	41c00215 	stw	r7,8(r8)
 8004020:	31400115 	stw	r5,4(r6)
 8004024:	18800015 	stw	r2,0(r3)
 8004028:	003fbd06 	br	8003f20 <_free_r+0xa0>
 800402c:	39c0004c 	andi	r7,r7,1
 8004030:	10c5883a 	add	r2,r2,r3
 8004034:	3800071e 	bne	r7,zero,8004054 <_free_r+0x1d4>
 8004038:	81fffe17 	ldw	r7,-8(r16)
 800403c:	31cdc83a 	sub	r6,r6,r7
 8004040:	30c00317 	ldw	r3,12(r6)
 8004044:	31400217 	ldw	r5,8(r6)
 8004048:	11c5883a 	add	r2,r2,r7
 800404c:	28c00315 	stw	r3,12(r5)
 8004050:	19400215 	stw	r5,8(r3)
 8004054:	10c00054 	ori	r3,r2,1
 8004058:	30c00115 	stw	r3,4(r6)
 800405c:	00c20074 	movhi	r3,2049
 8004060:	18e20604 	addi	r3,r3,-30696
 8004064:	18c00017 	ldw	r3,0(r3)
 8004068:	21800215 	stw	r6,8(r4)
 800406c:	10ffc036 	bltu	r2,r3,8003f70 <_free_r+0xf0>
 8004070:	00820074 	movhi	r2,2049
 8004074:	10a8ae04 	addi	r2,r2,-23880
 8004078:	11400017 	ldw	r5,0(r2)
 800407c:	8809883a 	mov	r4,r17
 8004080:	8003d5c0 	call	8003d5c <_malloc_trim_r>
 8004084:	003fba06 	br	8003f70 <_free_r+0xf0>
 8004088:	28c9883a 	add	r4,r5,r3
 800408c:	21000117 	ldw	r4,4(r4)
 8004090:	2100004c 	andi	r4,r4,1
 8004094:	2000391e 	bne	r4,zero,800417c <_free_r+0x2fc>
 8004098:	29c00217 	ldw	r7,8(r5)
 800409c:	29000317 	ldw	r4,12(r5)
 80040a0:	1885883a 	add	r2,r3,r2
 80040a4:	10c00054 	ori	r3,r2,1
 80040a8:	39000315 	stw	r4,12(r7)
 80040ac:	21c00215 	stw	r7,8(r4)
 80040b0:	30c00115 	stw	r3,4(r6)
 80040b4:	308d883a 	add	r6,r6,r2
 80040b8:	30800015 	stw	r2,0(r6)
 80040bc:	003fac06 	br	8003f70 <_free_r+0xf0>
 80040c0:	00c00504 	movi	r3,20
 80040c4:	19401536 	bltu	r3,r5,800411c <_free_r+0x29c>
 80040c8:	28c01704 	addi	r3,r5,92
 80040cc:	18c7883a 	add	r3,r3,r3
 80040d0:	294016c4 	addi	r5,r5,91
 80040d4:	003fb406 	br	8003fa8 <_free_r+0x128>
 80040d8:	280bd0ba 	srai	r5,r5,2
 80040dc:	00c00044 	movi	r3,1
 80040e0:	38800117 	ldw	r2,4(r7)
 80040e4:	194a983a 	sll	r5,r3,r5
 80040e8:	2007883a 	mov	r3,r4
 80040ec:	2884b03a 	or	r2,r5,r2
 80040f0:	38800115 	stw	r2,4(r7)
 80040f4:	003fbb06 	br	8003fe4 <_free_r+0x164>
 80040f8:	21800515 	stw	r6,20(r4)
 80040fc:	21800415 	stw	r6,16(r4)
 8004100:	10c00054 	ori	r3,r2,1
 8004104:	31c00315 	stw	r7,12(r6)
 8004108:	31c00215 	stw	r7,8(r6)
 800410c:	30c00115 	stw	r3,4(r6)
 8004110:	308d883a 	add	r6,r6,r2
 8004114:	30800015 	stw	r2,0(r6)
 8004118:	003f9506 	br	8003f70 <_free_r+0xf0>
 800411c:	00c01504 	movi	r3,84
 8004120:	19400536 	bltu	r3,r5,8004138 <_free_r+0x2b8>
 8004124:	100ad33a 	srli	r5,r2,12
 8004128:	28c01bc4 	addi	r3,r5,111
 800412c:	18c7883a 	add	r3,r3,r3
 8004130:	29401b84 	addi	r5,r5,110
 8004134:	003f9c06 	br	8003fa8 <_free_r+0x128>
 8004138:	00c05504 	movi	r3,340
 800413c:	19400536 	bltu	r3,r5,8004154 <_free_r+0x2d4>
 8004140:	100ad3fa 	srli	r5,r2,15
 8004144:	28c01e04 	addi	r3,r5,120
 8004148:	18c7883a 	add	r3,r3,r3
 800414c:	29401dc4 	addi	r5,r5,119
 8004150:	003f9506 	br	8003fa8 <_free_r+0x128>
 8004154:	00c15504 	movi	r3,1364
 8004158:	19400536 	bltu	r3,r5,8004170 <_free_r+0x2f0>
 800415c:	100ad4ba 	srli	r5,r2,18
 8004160:	28c01f44 	addi	r3,r5,125
 8004164:	18c7883a 	add	r3,r3,r3
 8004168:	29401f04 	addi	r5,r5,124
 800416c:	003f8e06 	br	8003fa8 <_free_r+0x128>
 8004170:	00c03f84 	movi	r3,254
 8004174:	01401f84 	movi	r5,126
 8004178:	003f8b06 	br	8003fa8 <_free_r+0x128>
 800417c:	10c00054 	ori	r3,r2,1
 8004180:	30c00115 	stw	r3,4(r6)
 8004184:	308d883a 	add	r6,r6,r2
 8004188:	30800015 	stw	r2,0(r6)
 800418c:	003f7806 	br	8003f70 <_free_r+0xf0>

08004190 <_lseek_r>:
 8004190:	defffd04 	addi	sp,sp,-12
 8004194:	2805883a 	mov	r2,r5
 8004198:	dc000015 	stw	r16,0(sp)
 800419c:	04020074 	movhi	r16,2049
 80041a0:	dc400115 	stw	r17,4(sp)
 80041a4:	300b883a 	mov	r5,r6
 80041a8:	8428af04 	addi	r16,r16,-23876
 80041ac:	2023883a 	mov	r17,r4
 80041b0:	380d883a 	mov	r6,r7
 80041b4:	1009883a 	mov	r4,r2
 80041b8:	dfc00215 	stw	ra,8(sp)
 80041bc:	80000015 	stw	zero,0(r16)
 80041c0:	80049480 	call	8004948 <lseek>
 80041c4:	00ffffc4 	movi	r3,-1
 80041c8:	10c00526 	beq	r2,r3,80041e0 <_lseek_r+0x50>
 80041cc:	dfc00217 	ldw	ra,8(sp)
 80041d0:	dc400117 	ldw	r17,4(sp)
 80041d4:	dc000017 	ldw	r16,0(sp)
 80041d8:	dec00304 	addi	sp,sp,12
 80041dc:	f800283a 	ret
 80041e0:	80c00017 	ldw	r3,0(r16)
 80041e4:	183ff926 	beq	r3,zero,80041cc <_lseek_r+0x3c>
 80041e8:	88c00015 	stw	r3,0(r17)
 80041ec:	003ff706 	br	80041cc <_lseek_r+0x3c>

080041f0 <__smakebuf_r>:
 80041f0:	2880030b 	ldhu	r2,12(r5)
 80041f4:	10c0008c 	andi	r3,r2,2
 80041f8:	1800411e 	bne	r3,zero,8004300 <__smakebuf_r+0x110>
 80041fc:	deffec04 	addi	sp,sp,-80
 8004200:	dc000f15 	stw	r16,60(sp)
 8004204:	2821883a 	mov	r16,r5
 8004208:	2940038f 	ldh	r5,14(r5)
 800420c:	dc401015 	stw	r17,64(sp)
 8004210:	dfc01315 	stw	ra,76(sp)
 8004214:	dcc01215 	stw	r19,72(sp)
 8004218:	dc801115 	stw	r18,68(sp)
 800421c:	2023883a 	mov	r17,r4
 8004220:	28001c16 	blt	r5,zero,8004294 <__smakebuf_r+0xa4>
 8004224:	d80d883a 	mov	r6,sp
 8004228:	800440c0 	call	800440c <_fstat_r>
 800422c:	10001816 	blt	r2,zero,8004290 <__smakebuf_r+0xa0>
 8004230:	d8800117 	ldw	r2,4(sp)
 8004234:	00e00014 	movui	r3,32768
 8004238:	10bc000c 	andi	r2,r2,61440
 800423c:	14c80020 	cmpeqi	r19,r2,8192
 8004240:	10c03726 	beq	r2,r3,8004320 <__smakebuf_r+0x130>
 8004244:	80c0030b 	ldhu	r3,12(r16)
 8004248:	18c20014 	ori	r3,r3,2048
 800424c:	80c0030d 	sth	r3,12(r16)
 8004250:	00c80004 	movi	r3,8192
 8004254:	10c0521e 	bne	r2,r3,80043a0 <__smakebuf_r+0x1b0>
 8004258:	8140038f 	ldh	r5,14(r16)
 800425c:	8809883a 	mov	r4,r17
 8004260:	80044680 	call	8004468 <_isatty_r>
 8004264:	10004c26 	beq	r2,zero,8004398 <__smakebuf_r+0x1a8>
 8004268:	8080030b 	ldhu	r2,12(r16)
 800426c:	80c010c4 	addi	r3,r16,67
 8004270:	80c00015 	stw	r3,0(r16)
 8004274:	10800054 	ori	r2,r2,1
 8004278:	8080030d 	sth	r2,12(r16)
 800427c:	00800044 	movi	r2,1
 8004280:	80c00415 	stw	r3,16(r16)
 8004284:	80800515 	stw	r2,20(r16)
 8004288:	04810004 	movi	r18,1024
 800428c:	00000706 	br	80042ac <__smakebuf_r+0xbc>
 8004290:	8080030b 	ldhu	r2,12(r16)
 8004294:	10c0200c 	andi	r3,r2,128
 8004298:	18001f1e 	bne	r3,zero,8004318 <__smakebuf_r+0x128>
 800429c:	04810004 	movi	r18,1024
 80042a0:	10820014 	ori	r2,r2,2048
 80042a4:	8080030d 	sth	r2,12(r16)
 80042a8:	0027883a 	mov	r19,zero
 80042ac:	900b883a 	mov	r5,r18
 80042b0:	8809883a 	mov	r4,r17
 80042b4:	80023f80 	call	80023f8 <_malloc_r>
 80042b8:	10002c26 	beq	r2,zero,800436c <__smakebuf_r+0x17c>
 80042bc:	80c0030b 	ldhu	r3,12(r16)
 80042c0:	01020034 	movhi	r4,2048
 80042c4:	21068704 	addi	r4,r4,6684
 80042c8:	89000f15 	stw	r4,60(r17)
 80042cc:	18c02014 	ori	r3,r3,128
 80042d0:	80c0030d 	sth	r3,12(r16)
 80042d4:	80800015 	stw	r2,0(r16)
 80042d8:	80800415 	stw	r2,16(r16)
 80042dc:	84800515 	stw	r18,20(r16)
 80042e0:	98001a1e 	bne	r19,zero,800434c <__smakebuf_r+0x15c>
 80042e4:	dfc01317 	ldw	ra,76(sp)
 80042e8:	dcc01217 	ldw	r19,72(sp)
 80042ec:	dc801117 	ldw	r18,68(sp)
 80042f0:	dc401017 	ldw	r17,64(sp)
 80042f4:	dc000f17 	ldw	r16,60(sp)
 80042f8:	dec01404 	addi	sp,sp,80
 80042fc:	f800283a 	ret
 8004300:	288010c4 	addi	r2,r5,67
 8004304:	28800015 	stw	r2,0(r5)
 8004308:	28800415 	stw	r2,16(r5)
 800430c:	00800044 	movi	r2,1
 8004310:	28800515 	stw	r2,20(r5)
 8004314:	f800283a 	ret
 8004318:	04801004 	movi	r18,64
 800431c:	003fe006 	br	80042a0 <__smakebuf_r+0xb0>
 8004320:	81000a17 	ldw	r4,40(r16)
 8004324:	00c20034 	movhi	r3,2048
 8004328:	18cdd104 	addi	r3,r3,14148
 800432c:	20ffc51e 	bne	r4,r3,8004244 <__smakebuf_r+0x54>
 8004330:	8080030b 	ldhu	r2,12(r16)
 8004334:	04810004 	movi	r18,1024
 8004338:	84801315 	stw	r18,76(r16)
 800433c:	1484b03a 	or	r2,r2,r18
 8004340:	8080030d 	sth	r2,12(r16)
 8004344:	0027883a 	mov	r19,zero
 8004348:	003fd806 	br	80042ac <__smakebuf_r+0xbc>
 800434c:	8140038f 	ldh	r5,14(r16)
 8004350:	8809883a 	mov	r4,r17
 8004354:	80044680 	call	8004468 <_isatty_r>
 8004358:	103fe226 	beq	r2,zero,80042e4 <__smakebuf_r+0xf4>
 800435c:	8080030b 	ldhu	r2,12(r16)
 8004360:	10800054 	ori	r2,r2,1
 8004364:	8080030d 	sth	r2,12(r16)
 8004368:	003fde06 	br	80042e4 <__smakebuf_r+0xf4>
 800436c:	8080030b 	ldhu	r2,12(r16)
 8004370:	10c0800c 	andi	r3,r2,512
 8004374:	183fdb1e 	bne	r3,zero,80042e4 <__smakebuf_r+0xf4>
 8004378:	10800094 	ori	r2,r2,2
 800437c:	80c010c4 	addi	r3,r16,67
 8004380:	8080030d 	sth	r2,12(r16)
 8004384:	00800044 	movi	r2,1
 8004388:	80c00015 	stw	r3,0(r16)
 800438c:	80c00415 	stw	r3,16(r16)
 8004390:	80800515 	stw	r2,20(r16)
 8004394:	003fd306 	br	80042e4 <__smakebuf_r+0xf4>
 8004398:	04810004 	movi	r18,1024
 800439c:	003fc306 	br	80042ac <__smakebuf_r+0xbc>
 80043a0:	0027883a 	mov	r19,zero
 80043a4:	04810004 	movi	r18,1024
 80043a8:	003fc006 	br	80042ac <__smakebuf_r+0xbc>

080043ac <_read_r>:
 80043ac:	defffd04 	addi	sp,sp,-12
 80043b0:	2805883a 	mov	r2,r5
 80043b4:	dc000015 	stw	r16,0(sp)
 80043b8:	04020074 	movhi	r16,2049
 80043bc:	dc400115 	stw	r17,4(sp)
 80043c0:	300b883a 	mov	r5,r6
 80043c4:	8428af04 	addi	r16,r16,-23876
 80043c8:	2023883a 	mov	r17,r4
 80043cc:	380d883a 	mov	r6,r7
 80043d0:	1009883a 	mov	r4,r2
 80043d4:	dfc00215 	stw	ra,8(sp)
 80043d8:	80000015 	stw	zero,0(r16)
 80043dc:	8004b1c0 	call	8004b1c <read>
 80043e0:	00ffffc4 	movi	r3,-1
 80043e4:	10c00526 	beq	r2,r3,80043fc <_read_r+0x50>
 80043e8:	dfc00217 	ldw	ra,8(sp)
 80043ec:	dc400117 	ldw	r17,4(sp)
 80043f0:	dc000017 	ldw	r16,0(sp)
 80043f4:	dec00304 	addi	sp,sp,12
 80043f8:	f800283a 	ret
 80043fc:	80c00017 	ldw	r3,0(r16)
 8004400:	183ff926 	beq	r3,zero,80043e8 <_read_r+0x3c>
 8004404:	88c00015 	stw	r3,0(r17)
 8004408:	003ff706 	br	80043e8 <_read_r+0x3c>

0800440c <_fstat_r>:
 800440c:	defffd04 	addi	sp,sp,-12
 8004410:	2805883a 	mov	r2,r5
 8004414:	dc000015 	stw	r16,0(sp)
 8004418:	04020074 	movhi	r16,2049
 800441c:	dc400115 	stw	r17,4(sp)
 8004420:	8428af04 	addi	r16,r16,-23876
 8004424:	2023883a 	mov	r17,r4
 8004428:	300b883a 	mov	r5,r6
 800442c:	1009883a 	mov	r4,r2
 8004430:	dfc00215 	stw	ra,8(sp)
 8004434:	80000015 	stw	zero,0(r16)
 8004438:	80046900 	call	8004690 <fstat>
 800443c:	00ffffc4 	movi	r3,-1
 8004440:	10c00526 	beq	r2,r3,8004458 <_fstat_r+0x4c>
 8004444:	dfc00217 	ldw	ra,8(sp)
 8004448:	dc400117 	ldw	r17,4(sp)
 800444c:	dc000017 	ldw	r16,0(sp)
 8004450:	dec00304 	addi	sp,sp,12
 8004454:	f800283a 	ret
 8004458:	80c00017 	ldw	r3,0(r16)
 800445c:	183ff926 	beq	r3,zero,8004444 <_fstat_r+0x38>
 8004460:	88c00015 	stw	r3,0(r17)
 8004464:	003ff706 	br	8004444 <_fstat_r+0x38>

08004468 <_isatty_r>:
 8004468:	defffd04 	addi	sp,sp,-12
 800446c:	dc000015 	stw	r16,0(sp)
 8004470:	04020074 	movhi	r16,2049
 8004474:	dc400115 	stw	r17,4(sp)
 8004478:	8428af04 	addi	r16,r16,-23876
 800447c:	2023883a 	mov	r17,r4
 8004480:	2809883a 	mov	r4,r5
 8004484:	dfc00215 	stw	ra,8(sp)
 8004488:	80000015 	stw	zero,0(r16)
 800448c:	800477c0 	call	800477c <isatty>
 8004490:	00ffffc4 	movi	r3,-1
 8004494:	10c00526 	beq	r2,r3,80044ac <_isatty_r+0x44>
 8004498:	dfc00217 	ldw	ra,8(sp)
 800449c:	dc400117 	ldw	r17,4(sp)
 80044a0:	dc000017 	ldw	r16,0(sp)
 80044a4:	dec00304 	addi	sp,sp,12
 80044a8:	f800283a 	ret
 80044ac:	80c00017 	ldw	r3,0(r16)
 80044b0:	183ff926 	beq	r3,zero,8004498 <_isatty_r+0x30>
 80044b4:	88c00015 	stw	r3,0(r17)
 80044b8:	003ff706 	br	8004498 <_isatty_r+0x30>

080044bc <__muldi3>:
 80044bc:	223fffcc 	andi	r8,r4,65535
 80044c0:	2006d43a 	srli	r3,r4,16
 80044c4:	32bfffcc 	andi	r10,r6,65535
 80044c8:	3012d43a 	srli	r9,r6,16
 80044cc:	4297383a 	mul	r11,r8,r10
 80044d0:	1a95383a 	mul	r10,r3,r10
 80044d4:	4251383a 	mul	r8,r8,r9
 80044d8:	5804d43a 	srli	r2,r11,16
 80044dc:	4291883a 	add	r8,r8,r10
 80044e0:	1205883a 	add	r2,r2,r8
 80044e4:	1a51383a 	mul	r8,r3,r9
 80044e8:	1280022e 	bgeu	r2,r10,80044f4 <__muldi3+0x38>
 80044ec:	00c00074 	movhi	r3,1
 80044f0:	40d1883a 	add	r8,r8,r3
 80044f4:	1006d43a 	srli	r3,r2,16
 80044f8:	21cf383a 	mul	r7,r4,r7
 80044fc:	314b383a 	mul	r5,r6,r5
 8004500:	1004943a 	slli	r2,r2,16
 8004504:	1a11883a 	add	r8,r3,r8
 8004508:	5affffcc 	andi	r11,r11,65535
 800450c:	3947883a 	add	r3,r7,r5
 8004510:	12c5883a 	add	r2,r2,r11
 8004514:	1a07883a 	add	r3,r3,r8
 8004518:	f800283a 	ret

0800451c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800451c:	defffe04 	addi	sp,sp,-8
 8004520:	dfc00115 	stw	ra,4(sp)
 8004524:	df000015 	stw	fp,0(sp)
 8004528:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800452c:	d0a00917 	ldw	r2,-32732(gp)
 8004530:	10000326 	beq	r2,zero,8004540 <alt_get_errno+0x24>
 8004534:	d0a00917 	ldw	r2,-32732(gp)
 8004538:	103ee83a 	callr	r2
 800453c:	00000106 	br	8004544 <alt_get_errno+0x28>
 8004540:	d0a6ac04 	addi	r2,gp,-25936
}
 8004544:	e037883a 	mov	sp,fp
 8004548:	dfc00117 	ldw	ra,4(sp)
 800454c:	df000017 	ldw	fp,0(sp)
 8004550:	dec00204 	addi	sp,sp,8
 8004554:	f800283a 	ret

08004558 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8004558:	defffb04 	addi	sp,sp,-20
 800455c:	dfc00415 	stw	ra,16(sp)
 8004560:	df000315 	stw	fp,12(sp)
 8004564:	df000304 	addi	fp,sp,12
 8004568:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800456c:	e0bfff17 	ldw	r2,-4(fp)
 8004570:	10000616 	blt	r2,zero,800458c <close+0x34>
 8004574:	e0bfff17 	ldw	r2,-4(fp)
 8004578:	10c00324 	muli	r3,r2,12
 800457c:	00820034 	movhi	r2,2048
 8004580:	109d8b04 	addi	r2,r2,30252
 8004584:	1885883a 	add	r2,r3,r2
 8004588:	00000106 	br	8004590 <close+0x38>
 800458c:	0005883a 	mov	r2,zero
 8004590:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8004594:	e0bffd17 	ldw	r2,-12(fp)
 8004598:	10001926 	beq	r2,zero,8004600 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800459c:	e0bffd17 	ldw	r2,-12(fp)
 80045a0:	10800017 	ldw	r2,0(r2)
 80045a4:	10800417 	ldw	r2,16(r2)
 80045a8:	10000626 	beq	r2,zero,80045c4 <close+0x6c>
 80045ac:	e0bffd17 	ldw	r2,-12(fp)
 80045b0:	10800017 	ldw	r2,0(r2)
 80045b4:	10800417 	ldw	r2,16(r2)
 80045b8:	e13ffd17 	ldw	r4,-12(fp)
 80045bc:	103ee83a 	callr	r2
 80045c0:	00000106 	br	80045c8 <close+0x70>
 80045c4:	0005883a 	mov	r2,zero
 80045c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80045cc:	e13fff17 	ldw	r4,-4(fp)
 80045d0:	8004c180 	call	8004c18 <alt_release_fd>
    if (rval < 0)
 80045d4:	e0bffe17 	ldw	r2,-8(fp)
 80045d8:	1000070e 	bge	r2,zero,80045f8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 80045dc:	800451c0 	call	800451c <alt_get_errno>
 80045e0:	1007883a 	mov	r3,r2
 80045e4:	e0bffe17 	ldw	r2,-8(fp)
 80045e8:	0085c83a 	sub	r2,zero,r2
 80045ec:	18800015 	stw	r2,0(r3)
      return -1;
 80045f0:	00bfffc4 	movi	r2,-1
 80045f4:	00000706 	br	8004614 <close+0xbc>
    }
    return 0;
 80045f8:	0005883a 	mov	r2,zero
 80045fc:	00000506 	br	8004614 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8004600:	800451c0 	call	800451c <alt_get_errno>
 8004604:	1007883a 	mov	r3,r2
 8004608:	00801444 	movi	r2,81
 800460c:	18800015 	stw	r2,0(r3)
    return -1;
 8004610:	00bfffc4 	movi	r2,-1
  }
}
 8004614:	e037883a 	mov	sp,fp
 8004618:	dfc00117 	ldw	ra,4(sp)
 800461c:	df000017 	ldw	fp,0(sp)
 8004620:	dec00204 	addi	sp,sp,8
 8004624:	f800283a 	ret

08004628 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8004628:	defffc04 	addi	sp,sp,-16
 800462c:	df000315 	stw	fp,12(sp)
 8004630:	df000304 	addi	fp,sp,12
 8004634:	e13ffd15 	stw	r4,-12(fp)
 8004638:	e17ffe15 	stw	r5,-8(fp)
 800463c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8004640:	e0bfff17 	ldw	r2,-4(fp)
}
 8004644:	e037883a 	mov	sp,fp
 8004648:	df000017 	ldw	fp,0(sp)
 800464c:	dec00104 	addi	sp,sp,4
 8004650:	f800283a 	ret

08004654 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004654:	defffe04 	addi	sp,sp,-8
 8004658:	dfc00115 	stw	ra,4(sp)
 800465c:	df000015 	stw	fp,0(sp)
 8004660:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004664:	d0a00917 	ldw	r2,-32732(gp)
 8004668:	10000326 	beq	r2,zero,8004678 <alt_get_errno+0x24>
 800466c:	d0a00917 	ldw	r2,-32732(gp)
 8004670:	103ee83a 	callr	r2
 8004674:	00000106 	br	800467c <alt_get_errno+0x28>
 8004678:	d0a6ac04 	addi	r2,gp,-25936
}
 800467c:	e037883a 	mov	sp,fp
 8004680:	dfc00117 	ldw	ra,4(sp)
 8004684:	df000017 	ldw	fp,0(sp)
 8004688:	dec00204 	addi	sp,sp,8
 800468c:	f800283a 	ret

08004690 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8004690:	defffb04 	addi	sp,sp,-20
 8004694:	dfc00415 	stw	ra,16(sp)
 8004698:	df000315 	stw	fp,12(sp)
 800469c:	df000304 	addi	fp,sp,12
 80046a0:	e13ffe15 	stw	r4,-8(fp)
 80046a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80046a8:	e0bffe17 	ldw	r2,-8(fp)
 80046ac:	10000616 	blt	r2,zero,80046c8 <fstat+0x38>
 80046b0:	e0bffe17 	ldw	r2,-8(fp)
 80046b4:	10c00324 	muli	r3,r2,12
 80046b8:	00820034 	movhi	r2,2048
 80046bc:	109d8b04 	addi	r2,r2,30252
 80046c0:	1885883a 	add	r2,r3,r2
 80046c4:	00000106 	br	80046cc <fstat+0x3c>
 80046c8:	0005883a 	mov	r2,zero
 80046cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 80046d0:	e0bffd17 	ldw	r2,-12(fp)
 80046d4:	10001026 	beq	r2,zero,8004718 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 80046d8:	e0bffd17 	ldw	r2,-12(fp)
 80046dc:	10800017 	ldw	r2,0(r2)
 80046e0:	10800817 	ldw	r2,32(r2)
 80046e4:	10000726 	beq	r2,zero,8004704 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 80046e8:	e0bffd17 	ldw	r2,-12(fp)
 80046ec:	10800017 	ldw	r2,0(r2)
 80046f0:	10800817 	ldw	r2,32(r2)
 80046f4:	e17fff17 	ldw	r5,-4(fp)
 80046f8:	e13ffd17 	ldw	r4,-12(fp)
 80046fc:	103ee83a 	callr	r2
 8004700:	00000a06 	br	800472c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8004704:	e0bfff17 	ldw	r2,-4(fp)
 8004708:	00c80004 	movi	r3,8192
 800470c:	10c00115 	stw	r3,4(r2)
      return 0;
 8004710:	0005883a 	mov	r2,zero
 8004714:	00000506 	br	800472c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8004718:	80046540 	call	8004654 <alt_get_errno>
 800471c:	1007883a 	mov	r3,r2
 8004720:	00801444 	movi	r2,81
 8004724:	18800015 	stw	r2,0(r3)
    return -1;
 8004728:	00bfffc4 	movi	r2,-1
  }
}
 800472c:	e037883a 	mov	sp,fp
 8004730:	dfc00117 	ldw	ra,4(sp)
 8004734:	df000017 	ldw	fp,0(sp)
 8004738:	dec00204 	addi	sp,sp,8
 800473c:	f800283a 	ret

08004740 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004740:	defffe04 	addi	sp,sp,-8
 8004744:	dfc00115 	stw	ra,4(sp)
 8004748:	df000015 	stw	fp,0(sp)
 800474c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004750:	d0a00917 	ldw	r2,-32732(gp)
 8004754:	10000326 	beq	r2,zero,8004764 <alt_get_errno+0x24>
 8004758:	d0a00917 	ldw	r2,-32732(gp)
 800475c:	103ee83a 	callr	r2
 8004760:	00000106 	br	8004768 <alt_get_errno+0x28>
 8004764:	d0a6ac04 	addi	r2,gp,-25936
}
 8004768:	e037883a 	mov	sp,fp
 800476c:	dfc00117 	ldw	ra,4(sp)
 8004770:	df000017 	ldw	fp,0(sp)
 8004774:	dec00204 	addi	sp,sp,8
 8004778:	f800283a 	ret

0800477c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800477c:	deffed04 	addi	sp,sp,-76
 8004780:	dfc01215 	stw	ra,72(sp)
 8004784:	df001115 	stw	fp,68(sp)
 8004788:	df001104 	addi	fp,sp,68
 800478c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004790:	e0bfff17 	ldw	r2,-4(fp)
 8004794:	10000616 	blt	r2,zero,80047b0 <isatty+0x34>
 8004798:	e0bfff17 	ldw	r2,-4(fp)
 800479c:	10c00324 	muli	r3,r2,12
 80047a0:	00820034 	movhi	r2,2048
 80047a4:	109d8b04 	addi	r2,r2,30252
 80047a8:	1885883a 	add	r2,r3,r2
 80047ac:	00000106 	br	80047b4 <isatty+0x38>
 80047b0:	0005883a 	mov	r2,zero
 80047b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80047b8:	e0bfef17 	ldw	r2,-68(fp)
 80047bc:	10000e26 	beq	r2,zero,80047f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 80047c0:	e0bfef17 	ldw	r2,-68(fp)
 80047c4:	10800017 	ldw	r2,0(r2)
 80047c8:	10800817 	ldw	r2,32(r2)
 80047cc:	1000021e 	bne	r2,zero,80047d8 <isatty+0x5c>
    {
      return 1;
 80047d0:	00800044 	movi	r2,1
 80047d4:	00000d06 	br	800480c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 80047d8:	e0bff004 	addi	r2,fp,-64
 80047dc:	100b883a 	mov	r5,r2
 80047e0:	e13fff17 	ldw	r4,-4(fp)
 80047e4:	80046900 	call	8004690 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 80047e8:	e0bff117 	ldw	r2,-60(fp)
 80047ec:	10880020 	cmpeqi	r2,r2,8192
 80047f0:	10803fcc 	andi	r2,r2,255
 80047f4:	00000506 	br	800480c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80047f8:	80047400 	call	8004740 <alt_get_errno>
 80047fc:	1007883a 	mov	r3,r2
 8004800:	00801444 	movi	r2,81
 8004804:	18800015 	stw	r2,0(r3)
    return 0;
 8004808:	0005883a 	mov	r2,zero
  }
}
 800480c:	e037883a 	mov	sp,fp
 8004810:	dfc00117 	ldw	ra,4(sp)
 8004814:	df000017 	ldw	fp,0(sp)
 8004818:	dec00204 	addi	sp,sp,8
 800481c:	f800283a 	ret

08004820 <alt_load_section>:
 8004820:	defffc04 	addi	sp,sp,-16
 8004824:	df000315 	stw	fp,12(sp)
 8004828:	df000304 	addi	fp,sp,12
 800482c:	e13ffd15 	stw	r4,-12(fp)
 8004830:	e17ffe15 	stw	r5,-8(fp)
 8004834:	e1bfff15 	stw	r6,-4(fp)
 8004838:	e0fffe17 	ldw	r3,-8(fp)
 800483c:	e0bffd17 	ldw	r2,-12(fp)
 8004840:	18800c26 	beq	r3,r2,8004874 <alt_load_section+0x54>
 8004844:	00000806 	br	8004868 <alt_load_section+0x48>
 8004848:	e0bffe17 	ldw	r2,-8(fp)
 800484c:	10c00104 	addi	r3,r2,4
 8004850:	e0fffe15 	stw	r3,-8(fp)
 8004854:	e0fffd17 	ldw	r3,-12(fp)
 8004858:	19000104 	addi	r4,r3,4
 800485c:	e13ffd15 	stw	r4,-12(fp)
 8004860:	18c00017 	ldw	r3,0(r3)
 8004864:	10c00015 	stw	r3,0(r2)
 8004868:	e0fffe17 	ldw	r3,-8(fp)
 800486c:	e0bfff17 	ldw	r2,-4(fp)
 8004870:	18bff51e 	bne	r3,r2,8004848 <alt_load_section+0x28>
 8004874:	0001883a 	nop
 8004878:	e037883a 	mov	sp,fp
 800487c:	df000017 	ldw	fp,0(sp)
 8004880:	dec00104 	addi	sp,sp,4
 8004884:	f800283a 	ret

08004888 <alt_load>:
 8004888:	defffe04 	addi	sp,sp,-8
 800488c:	dfc00115 	stw	ra,4(sp)
 8004890:	df000015 	stw	fp,0(sp)
 8004894:	d839883a 	mov	fp,sp
 8004898:	01820074 	movhi	r6,2049
 800489c:	31a21104 	addi	r6,r6,-30652
 80048a0:	01420034 	movhi	r5,2048
 80048a4:	295b7604 	addi	r5,r5,28120
 80048a8:	01020074 	movhi	r4,2049
 80048ac:	21221104 	addi	r4,r4,-30652
 80048b0:	80048200 	call	8004820 <alt_load_section>
 80048b4:	01820034 	movhi	r6,2048
 80048b8:	31809104 	addi	r6,r6,580
 80048bc:	01420034 	movhi	r5,2048
 80048c0:	29400804 	addi	r5,r5,32
 80048c4:	01020034 	movhi	r4,2048
 80048c8:	21000804 	addi	r4,r4,32
 80048cc:	80048200 	call	8004820 <alt_load_section>
 80048d0:	01820034 	movhi	r6,2048
 80048d4:	319b7604 	addi	r6,r6,28120
 80048d8:	01420034 	movhi	r5,2048
 80048dc:	295b5104 	addi	r5,r5,27972
 80048e0:	01020034 	movhi	r4,2048
 80048e4:	211b5104 	addi	r4,r4,27972
 80048e8:	80048200 	call	8004820 <alt_load_section>
 80048ec:	8005c300 	call	8005c30 <alt_dcache_flush_all>
 80048f0:	8005e180 	call	8005e18 <alt_icache_flush_all>
 80048f4:	0001883a 	nop
 80048f8:	e037883a 	mov	sp,fp
 80048fc:	dfc00117 	ldw	ra,4(sp)
 8004900:	df000017 	ldw	fp,0(sp)
 8004904:	dec00204 	addi	sp,sp,8
 8004908:	f800283a 	ret

0800490c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800490c:	defffe04 	addi	sp,sp,-8
 8004910:	dfc00115 	stw	ra,4(sp)
 8004914:	df000015 	stw	fp,0(sp)
 8004918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800491c:	d0a00917 	ldw	r2,-32732(gp)
 8004920:	10000326 	beq	r2,zero,8004930 <alt_get_errno+0x24>
 8004924:	d0a00917 	ldw	r2,-32732(gp)
 8004928:	103ee83a 	callr	r2
 800492c:	00000106 	br	8004934 <alt_get_errno+0x28>
 8004930:	d0a6ac04 	addi	r2,gp,-25936
}
 8004934:	e037883a 	mov	sp,fp
 8004938:	dfc00117 	ldw	ra,4(sp)
 800493c:	df000017 	ldw	fp,0(sp)
 8004940:	dec00204 	addi	sp,sp,8
 8004944:	f800283a 	ret

08004948 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8004948:	defff904 	addi	sp,sp,-28
 800494c:	dfc00615 	stw	ra,24(sp)
 8004950:	df000515 	stw	fp,20(sp)
 8004954:	df000504 	addi	fp,sp,20
 8004958:	e13ffd15 	stw	r4,-12(fp)
 800495c:	e17ffe15 	stw	r5,-8(fp)
 8004960:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8004964:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004968:	e0bffd17 	ldw	r2,-12(fp)
 800496c:	10000616 	blt	r2,zero,8004988 <lseek+0x40>
 8004970:	e0bffd17 	ldw	r2,-12(fp)
 8004974:	10c00324 	muli	r3,r2,12
 8004978:	00820034 	movhi	r2,2048
 800497c:	109d8b04 	addi	r2,r2,30252
 8004980:	1885883a 	add	r2,r3,r2
 8004984:	00000106 	br	800498c <lseek+0x44>
 8004988:	0005883a 	mov	r2,zero
 800498c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8004990:	e0bffc17 	ldw	r2,-16(fp)
 8004994:	10001026 	beq	r2,zero,80049d8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8004998:	e0bffc17 	ldw	r2,-16(fp)
 800499c:	10800017 	ldw	r2,0(r2)
 80049a0:	10800717 	ldw	r2,28(r2)
 80049a4:	10000926 	beq	r2,zero,80049cc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80049a8:	e0bffc17 	ldw	r2,-16(fp)
 80049ac:	10800017 	ldw	r2,0(r2)
 80049b0:	10800717 	ldw	r2,28(r2)
 80049b4:	e1bfff17 	ldw	r6,-4(fp)
 80049b8:	e17ffe17 	ldw	r5,-8(fp)
 80049bc:	e13ffc17 	ldw	r4,-16(fp)
 80049c0:	103ee83a 	callr	r2
 80049c4:	e0bffb15 	stw	r2,-20(fp)
 80049c8:	00000506 	br	80049e0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 80049cc:	00bfde84 	movi	r2,-134
 80049d0:	e0bffb15 	stw	r2,-20(fp)
 80049d4:	00000206 	br	80049e0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 80049d8:	00bfebc4 	movi	r2,-81
 80049dc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 80049e0:	e0bffb17 	ldw	r2,-20(fp)
 80049e4:	1000070e 	bge	r2,zero,8004a04 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 80049e8:	800490c0 	call	800490c <alt_get_errno>
 80049ec:	1007883a 	mov	r3,r2
 80049f0:	e0bffb17 	ldw	r2,-20(fp)
 80049f4:	0085c83a 	sub	r2,zero,r2
 80049f8:	18800015 	stw	r2,0(r3)
    rc = -1;
 80049fc:	00bfffc4 	movi	r2,-1
 8004a00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8004a04:	e0bffb17 	ldw	r2,-20(fp)
}
 8004a08:	e037883a 	mov	sp,fp
 8004a0c:	dfc00117 	ldw	ra,4(sp)
 8004a10:	df000017 	ldw	fp,0(sp)
 8004a14:	dec00204 	addi	sp,sp,8
 8004a18:	f800283a 	ret

08004a1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8004a1c:	defffd04 	addi	sp,sp,-12
 8004a20:	dfc00215 	stw	ra,8(sp)
 8004a24:	df000115 	stw	fp,4(sp)
 8004a28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8004a2c:	0009883a 	mov	r4,zero
 8004a30:	8004ec40 	call	8004ec4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8004a34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8004a38:	8004efc0 	call	8004efc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8004a3c:	01820034 	movhi	r6,2048
 8004a40:	319b6c04 	addi	r6,r6,28080
 8004a44:	01420034 	movhi	r5,2048
 8004a48:	295b6c04 	addi	r5,r5,28080
 8004a4c:	01020034 	movhi	r4,2048
 8004a50:	211b6c04 	addi	r4,r4,28080
 8004a54:	80061b00 	call	80061b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8004a58:	8005d580 	call	8005d58 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8004a5c:	01020034 	movhi	r4,2048
 8004a60:	21176e04 	addi	r4,r4,23992
 8004a64:	80069b00 	call	80069b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8004a68:	d0a6ad17 	ldw	r2,-25932(gp)
 8004a6c:	d0e6ae17 	ldw	r3,-25928(gp)
 8004a70:	d126af17 	ldw	r4,-25924(gp)
 8004a74:	200d883a 	mov	r6,r4
 8004a78:	180b883a 	mov	r5,r3
 8004a7c:	1009883a 	mov	r4,r2
 8004a80:	800147c0 	call	800147c <main>
 8004a84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8004a88:	01000044 	movi	r4,1
 8004a8c:	80045580 	call	8004558 <close>
  exit (result);
 8004a90:	e13fff17 	ldw	r4,-4(fp)
 8004a94:	80069c40 	call	80069c4 <exit>

08004a98 <__malloc_lock>:
 8004a98:	defffe04 	addi	sp,sp,-8
 8004a9c:	df000115 	stw	fp,4(sp)
 8004aa0:	df000104 	addi	fp,sp,4
 8004aa4:	e13fff15 	stw	r4,-4(fp)
 8004aa8:	0001883a 	nop
 8004aac:	e037883a 	mov	sp,fp
 8004ab0:	df000017 	ldw	fp,0(sp)
 8004ab4:	dec00104 	addi	sp,sp,4
 8004ab8:	f800283a 	ret

08004abc <__malloc_unlock>:
 8004abc:	defffe04 	addi	sp,sp,-8
 8004ac0:	df000115 	stw	fp,4(sp)
 8004ac4:	df000104 	addi	fp,sp,4
 8004ac8:	e13fff15 	stw	r4,-4(fp)
 8004acc:	0001883a 	nop
 8004ad0:	e037883a 	mov	sp,fp
 8004ad4:	df000017 	ldw	fp,0(sp)
 8004ad8:	dec00104 	addi	sp,sp,4
 8004adc:	f800283a 	ret

08004ae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004ae0:	defffe04 	addi	sp,sp,-8
 8004ae4:	dfc00115 	stw	ra,4(sp)
 8004ae8:	df000015 	stw	fp,0(sp)
 8004aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004af0:	d0a00917 	ldw	r2,-32732(gp)
 8004af4:	10000326 	beq	r2,zero,8004b04 <alt_get_errno+0x24>
 8004af8:	d0a00917 	ldw	r2,-32732(gp)
 8004afc:	103ee83a 	callr	r2
 8004b00:	00000106 	br	8004b08 <alt_get_errno+0x28>
 8004b04:	d0a6ac04 	addi	r2,gp,-25936
}
 8004b08:	e037883a 	mov	sp,fp
 8004b0c:	dfc00117 	ldw	ra,4(sp)
 8004b10:	df000017 	ldw	fp,0(sp)
 8004b14:	dec00204 	addi	sp,sp,8
 8004b18:	f800283a 	ret

08004b1c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8004b1c:	defff904 	addi	sp,sp,-28
 8004b20:	dfc00615 	stw	ra,24(sp)
 8004b24:	df000515 	stw	fp,20(sp)
 8004b28:	df000504 	addi	fp,sp,20
 8004b2c:	e13ffd15 	stw	r4,-12(fp)
 8004b30:	e17ffe15 	stw	r5,-8(fp)
 8004b34:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004b38:	e0bffd17 	ldw	r2,-12(fp)
 8004b3c:	10000616 	blt	r2,zero,8004b58 <read+0x3c>
 8004b40:	e0bffd17 	ldw	r2,-12(fp)
 8004b44:	10c00324 	muli	r3,r2,12
 8004b48:	00820034 	movhi	r2,2048
 8004b4c:	109d8b04 	addi	r2,r2,30252
 8004b50:	1885883a 	add	r2,r3,r2
 8004b54:	00000106 	br	8004b5c <read+0x40>
 8004b58:	0005883a 	mov	r2,zero
 8004b5c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004b60:	e0bffb17 	ldw	r2,-20(fp)
 8004b64:	10002226 	beq	r2,zero,8004bf0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8004b68:	e0bffb17 	ldw	r2,-20(fp)
 8004b6c:	10800217 	ldw	r2,8(r2)
 8004b70:	108000cc 	andi	r2,r2,3
 8004b74:	10800060 	cmpeqi	r2,r2,1
 8004b78:	1000181e 	bne	r2,zero,8004bdc <read+0xc0>
        (fd->dev->read))
 8004b7c:	e0bffb17 	ldw	r2,-20(fp)
 8004b80:	10800017 	ldw	r2,0(r2)
 8004b84:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8004b88:	10001426 	beq	r2,zero,8004bdc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8004b8c:	e0bffb17 	ldw	r2,-20(fp)
 8004b90:	10800017 	ldw	r2,0(r2)
 8004b94:	10800517 	ldw	r2,20(r2)
 8004b98:	e0ffff17 	ldw	r3,-4(fp)
 8004b9c:	180d883a 	mov	r6,r3
 8004ba0:	e17ffe17 	ldw	r5,-8(fp)
 8004ba4:	e13ffb17 	ldw	r4,-20(fp)
 8004ba8:	103ee83a 	callr	r2
 8004bac:	e0bffc15 	stw	r2,-16(fp)
 8004bb0:	e0bffc17 	ldw	r2,-16(fp)
 8004bb4:	1000070e 	bge	r2,zero,8004bd4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8004bb8:	8004ae00 	call	8004ae0 <alt_get_errno>
 8004bbc:	1007883a 	mov	r3,r2
 8004bc0:	e0bffc17 	ldw	r2,-16(fp)
 8004bc4:	0085c83a 	sub	r2,zero,r2
 8004bc8:	18800015 	stw	r2,0(r3)
          return -1;
 8004bcc:	00bfffc4 	movi	r2,-1
 8004bd0:	00000c06 	br	8004c04 <read+0xe8>
        }
        return rval;
 8004bd4:	e0bffc17 	ldw	r2,-16(fp)
 8004bd8:	00000a06 	br	8004c04 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8004bdc:	8004ae00 	call	8004ae0 <alt_get_errno>
 8004be0:	1007883a 	mov	r3,r2
 8004be4:	00800344 	movi	r2,13
 8004be8:	18800015 	stw	r2,0(r3)
 8004bec:	00000406 	br	8004c00 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8004bf0:	8004ae00 	call	8004ae0 <alt_get_errno>
 8004bf4:	1007883a 	mov	r3,r2
 8004bf8:	00801444 	movi	r2,81
 8004bfc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004c00:	00bfffc4 	movi	r2,-1
}
 8004c04:	e037883a 	mov	sp,fp
 8004c08:	dfc00117 	ldw	ra,4(sp)
 8004c0c:	df000017 	ldw	fp,0(sp)
 8004c10:	dec00204 	addi	sp,sp,8
 8004c14:	f800283a 	ret

08004c18 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8004c18:	defffe04 	addi	sp,sp,-8
 8004c1c:	df000115 	stw	fp,4(sp)
 8004c20:	df000104 	addi	fp,sp,4
 8004c24:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8004c28:	e0bfff17 	ldw	r2,-4(fp)
 8004c2c:	108000d0 	cmplti	r2,r2,3
 8004c30:	10000d1e 	bne	r2,zero,8004c68 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8004c34:	00820034 	movhi	r2,2048
 8004c38:	109d8b04 	addi	r2,r2,30252
 8004c3c:	e0ffff17 	ldw	r3,-4(fp)
 8004c40:	18c00324 	muli	r3,r3,12
 8004c44:	10c5883a 	add	r2,r2,r3
 8004c48:	10800204 	addi	r2,r2,8
 8004c4c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8004c50:	00820034 	movhi	r2,2048
 8004c54:	109d8b04 	addi	r2,r2,30252
 8004c58:	e0ffff17 	ldw	r3,-4(fp)
 8004c5c:	18c00324 	muli	r3,r3,12
 8004c60:	10c5883a 	add	r2,r2,r3
 8004c64:	10000015 	stw	zero,0(r2)
  }
}
 8004c68:	0001883a 	nop
 8004c6c:	e037883a 	mov	sp,fp
 8004c70:	df000017 	ldw	fp,0(sp)
 8004c74:	dec00104 	addi	sp,sp,4
 8004c78:	f800283a 	ret

08004c7c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8004c7c:	defff904 	addi	sp,sp,-28
 8004c80:	df000615 	stw	fp,24(sp)
 8004c84:	df000604 	addi	fp,sp,24
 8004c88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004c8c:	0005303a 	rdctl	r2,status
 8004c90:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004c94:	e0fffe17 	ldw	r3,-8(fp)
 8004c98:	00bfff84 	movi	r2,-2
 8004c9c:	1884703a 	and	r2,r3,r2
 8004ca0:	1001703a 	wrctl	status,r2
  
  return context;
 8004ca4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8004ca8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8004cac:	d0a00a17 	ldw	r2,-32728(gp)
 8004cb0:	10c000c4 	addi	r3,r2,3
 8004cb4:	00bfff04 	movi	r2,-4
 8004cb8:	1884703a 	and	r2,r3,r2
 8004cbc:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8004cc0:	d0e00a17 	ldw	r3,-32728(gp)
 8004cc4:	e0bfff17 	ldw	r2,-4(fp)
 8004cc8:	1887883a 	add	r3,r3,r2
 8004ccc:	00840034 	movhi	r2,4096
 8004cd0:	10800004 	addi	r2,r2,0
 8004cd4:	10c0062e 	bgeu	r2,r3,8004cf0 <sbrk+0x74>
 8004cd8:	e0bffb17 	ldw	r2,-20(fp)
 8004cdc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004ce0:	e0bffa17 	ldw	r2,-24(fp)
 8004ce4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8004ce8:	00bfffc4 	movi	r2,-1
 8004cec:	00000b06 	br	8004d1c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8004cf0:	d0a00a17 	ldw	r2,-32728(gp)
 8004cf4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8004cf8:	d0e00a17 	ldw	r3,-32728(gp)
 8004cfc:	e0bfff17 	ldw	r2,-4(fp)
 8004d00:	1885883a 	add	r2,r3,r2
 8004d04:	d0a00a15 	stw	r2,-32728(gp)
 8004d08:	e0bffb17 	ldw	r2,-20(fp)
 8004d0c:	e0bffc15 	stw	r2,-16(fp)
 8004d10:	e0bffc17 	ldw	r2,-16(fp)
 8004d14:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8004d18:	e0bffd17 	ldw	r2,-12(fp)
} 
 8004d1c:	e037883a 	mov	sp,fp
 8004d20:	df000017 	ldw	fp,0(sp)
 8004d24:	dec00104 	addi	sp,sp,4
 8004d28:	f800283a 	ret

08004d2c <usleep>:
 8004d2c:	defffd04 	addi	sp,sp,-12
 8004d30:	dfc00215 	stw	ra,8(sp)
 8004d34:	df000115 	stw	fp,4(sp)
 8004d38:	df000104 	addi	fp,sp,4
 8004d3c:	e13fff15 	stw	r4,-4(fp)
 8004d40:	e13fff17 	ldw	r4,-4(fp)
 8004d44:	8005ad80 	call	8005ad8 <alt_busy_sleep>
 8004d48:	e037883a 	mov	sp,fp
 8004d4c:	dfc00117 	ldw	ra,4(sp)
 8004d50:	df000017 	ldw	fp,0(sp)
 8004d54:	dec00204 	addi	sp,sp,8
 8004d58:	f800283a 	ret

08004d5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004d5c:	defffe04 	addi	sp,sp,-8
 8004d60:	dfc00115 	stw	ra,4(sp)
 8004d64:	df000015 	stw	fp,0(sp)
 8004d68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004d6c:	d0a00917 	ldw	r2,-32732(gp)
 8004d70:	10000326 	beq	r2,zero,8004d80 <alt_get_errno+0x24>
 8004d74:	d0a00917 	ldw	r2,-32732(gp)
 8004d78:	103ee83a 	callr	r2
 8004d7c:	00000106 	br	8004d84 <alt_get_errno+0x28>
 8004d80:	d0a6ac04 	addi	r2,gp,-25936
}
 8004d84:	e037883a 	mov	sp,fp
 8004d88:	dfc00117 	ldw	ra,4(sp)
 8004d8c:	df000017 	ldw	fp,0(sp)
 8004d90:	dec00204 	addi	sp,sp,8
 8004d94:	f800283a 	ret

08004d98 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004d98:	defff904 	addi	sp,sp,-28
 8004d9c:	dfc00615 	stw	ra,24(sp)
 8004da0:	df000515 	stw	fp,20(sp)
 8004da4:	df000504 	addi	fp,sp,20
 8004da8:	e13ffd15 	stw	r4,-12(fp)
 8004dac:	e17ffe15 	stw	r5,-8(fp)
 8004db0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004db4:	e0bffd17 	ldw	r2,-12(fp)
 8004db8:	10000616 	blt	r2,zero,8004dd4 <write+0x3c>
 8004dbc:	e0bffd17 	ldw	r2,-12(fp)
 8004dc0:	10c00324 	muli	r3,r2,12
 8004dc4:	00820034 	movhi	r2,2048
 8004dc8:	109d8b04 	addi	r2,r2,30252
 8004dcc:	1885883a 	add	r2,r3,r2
 8004dd0:	00000106 	br	8004dd8 <write+0x40>
 8004dd4:	0005883a 	mov	r2,zero
 8004dd8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004ddc:	e0bffb17 	ldw	r2,-20(fp)
 8004de0:	10002126 	beq	r2,zero,8004e68 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004de4:	e0bffb17 	ldw	r2,-20(fp)
 8004de8:	10800217 	ldw	r2,8(r2)
 8004dec:	108000cc 	andi	r2,r2,3
 8004df0:	10001826 	beq	r2,zero,8004e54 <write+0xbc>
 8004df4:	e0bffb17 	ldw	r2,-20(fp)
 8004df8:	10800017 	ldw	r2,0(r2)
 8004dfc:	10800617 	ldw	r2,24(r2)
 8004e00:	10001426 	beq	r2,zero,8004e54 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8004e04:	e0bffb17 	ldw	r2,-20(fp)
 8004e08:	10800017 	ldw	r2,0(r2)
 8004e0c:	10800617 	ldw	r2,24(r2)
 8004e10:	e0ffff17 	ldw	r3,-4(fp)
 8004e14:	180d883a 	mov	r6,r3
 8004e18:	e17ffe17 	ldw	r5,-8(fp)
 8004e1c:	e13ffb17 	ldw	r4,-20(fp)
 8004e20:	103ee83a 	callr	r2
 8004e24:	e0bffc15 	stw	r2,-16(fp)
 8004e28:	e0bffc17 	ldw	r2,-16(fp)
 8004e2c:	1000070e 	bge	r2,zero,8004e4c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8004e30:	8004d5c0 	call	8004d5c <alt_get_errno>
 8004e34:	1007883a 	mov	r3,r2
 8004e38:	e0bffc17 	ldw	r2,-16(fp)
 8004e3c:	0085c83a 	sub	r2,zero,r2
 8004e40:	18800015 	stw	r2,0(r3)
        return -1;
 8004e44:	00bfffc4 	movi	r2,-1
 8004e48:	00000c06 	br	8004e7c <write+0xe4>
      }
      return rval;
 8004e4c:	e0bffc17 	ldw	r2,-16(fp)
 8004e50:	00000a06 	br	8004e7c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004e54:	8004d5c0 	call	8004d5c <alt_get_errno>
 8004e58:	1007883a 	mov	r3,r2
 8004e5c:	00800344 	movi	r2,13
 8004e60:	18800015 	stw	r2,0(r3)
 8004e64:	00000406 	br	8004e78 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004e68:	8004d5c0 	call	8004d5c <alt_get_errno>
 8004e6c:	1007883a 	mov	r3,r2
 8004e70:	00801444 	movi	r2,81
 8004e74:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004e78:	00bfffc4 	movi	r2,-1
}
 8004e7c:	e037883a 	mov	sp,fp
 8004e80:	dfc00117 	ldw	ra,4(sp)
 8004e84:	df000017 	ldw	fp,0(sp)
 8004e88:	dec00204 	addi	sp,sp,8
 8004e8c:	f800283a 	ret

08004e90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004e90:	defffd04 	addi	sp,sp,-12
 8004e94:	dfc00215 	stw	ra,8(sp)
 8004e98:	df000115 	stw	fp,4(sp)
 8004e9c:	df000104 	addi	fp,sp,4
 8004ea0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004ea4:	d1600604 	addi	r5,gp,-32744
 8004ea8:	e13fff17 	ldw	r4,-4(fp)
 8004eac:	8005cb40 	call	8005cb4 <alt_dev_llist_insert>
}
 8004eb0:	e037883a 	mov	sp,fp
 8004eb4:	dfc00117 	ldw	ra,4(sp)
 8004eb8:	df000017 	ldw	fp,0(sp)
 8004ebc:	dec00204 	addi	sp,sp,8
 8004ec0:	f800283a 	ret

08004ec4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8004ec4:	defffd04 	addi	sp,sp,-12
 8004ec8:	dfc00215 	stw	ra,8(sp)
 8004ecc:	df000115 	stw	fp,4(sp)
 8004ed0:	df000104 	addi	fp,sp,4
 8004ed4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8004ed8:	80066240 	call	8006624 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004edc:	00800044 	movi	r2,1
 8004ee0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004ee4:	0001883a 	nop
 8004ee8:	e037883a 	mov	sp,fp
 8004eec:	dfc00117 	ldw	ra,4(sp)
 8004ef0:	df000017 	ldw	fp,0(sp)
 8004ef4:	dec00204 	addi	sp,sp,8
 8004ef8:	f800283a 	ret

08004efc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004efc:	defffe04 	addi	sp,sp,-8
 8004f00:	dfc00115 	stw	ra,4(sp)
 8004f04:	df000015 	stw	fp,0(sp)
 8004f08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004f0c:	000d883a 	mov	r6,zero
 8004f10:	000b883a 	mov	r5,zero
 8004f14:	01020034 	movhi	r4,2048
 8004f18:	211df504 	addi	r4,r4,30676
 8004f1c:	80050a80 	call	80050a8 <altera_avalon_jtag_uart_init>
 8004f20:	01020034 	movhi	r4,2048
 8004f24:	211deb04 	addi	r4,r4,30636
 8004f28:	8004e900 	call	8004e90 <alt_dev_reg>
}
 8004f2c:	0001883a 	nop
 8004f30:	e037883a 	mov	sp,fp
 8004f34:	dfc00117 	ldw	ra,4(sp)
 8004f38:	df000017 	ldw	fp,0(sp)
 8004f3c:	dec00204 	addi	sp,sp,8
 8004f40:	f800283a 	ret

08004f44 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8004f44:	defffa04 	addi	sp,sp,-24
 8004f48:	dfc00515 	stw	ra,20(sp)
 8004f4c:	df000415 	stw	fp,16(sp)
 8004f50:	df000404 	addi	fp,sp,16
 8004f54:	e13ffd15 	stw	r4,-12(fp)
 8004f58:	e17ffe15 	stw	r5,-8(fp)
 8004f5c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004f60:	e0bffd17 	ldw	r2,-12(fp)
 8004f64:	10800017 	ldw	r2,0(r2)
 8004f68:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8004f6c:	e0bffc17 	ldw	r2,-16(fp)
 8004f70:	10c00a04 	addi	r3,r2,40
 8004f74:	e0bffd17 	ldw	r2,-12(fp)
 8004f78:	10800217 	ldw	r2,8(r2)
 8004f7c:	100f883a 	mov	r7,r2
 8004f80:	e1bfff17 	ldw	r6,-4(fp)
 8004f84:	e17ffe17 	ldw	r5,-8(fp)
 8004f88:	1809883a 	mov	r4,r3
 8004f8c:	800556c0 	call	800556c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8004f90:	e037883a 	mov	sp,fp
 8004f94:	dfc00117 	ldw	ra,4(sp)
 8004f98:	df000017 	ldw	fp,0(sp)
 8004f9c:	dec00204 	addi	sp,sp,8
 8004fa0:	f800283a 	ret

08004fa4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8004fa4:	defffa04 	addi	sp,sp,-24
 8004fa8:	dfc00515 	stw	ra,20(sp)
 8004fac:	df000415 	stw	fp,16(sp)
 8004fb0:	df000404 	addi	fp,sp,16
 8004fb4:	e13ffd15 	stw	r4,-12(fp)
 8004fb8:	e17ffe15 	stw	r5,-8(fp)
 8004fbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8004fc0:	e0bffd17 	ldw	r2,-12(fp)
 8004fc4:	10800017 	ldw	r2,0(r2)
 8004fc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8004fcc:	e0bffc17 	ldw	r2,-16(fp)
 8004fd0:	10c00a04 	addi	r3,r2,40
 8004fd4:	e0bffd17 	ldw	r2,-12(fp)
 8004fd8:	10800217 	ldw	r2,8(r2)
 8004fdc:	100f883a 	mov	r7,r2
 8004fe0:	e1bfff17 	ldw	r6,-4(fp)
 8004fe4:	e17ffe17 	ldw	r5,-8(fp)
 8004fe8:	1809883a 	mov	r4,r3
 8004fec:	80057880 	call	8005788 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8004ff0:	e037883a 	mov	sp,fp
 8004ff4:	dfc00117 	ldw	ra,4(sp)
 8004ff8:	df000017 	ldw	fp,0(sp)
 8004ffc:	dec00204 	addi	sp,sp,8
 8005000:	f800283a 	ret

08005004 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8005004:	defffc04 	addi	sp,sp,-16
 8005008:	dfc00315 	stw	ra,12(sp)
 800500c:	df000215 	stw	fp,8(sp)
 8005010:	df000204 	addi	fp,sp,8
 8005014:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005018:	e0bfff17 	ldw	r2,-4(fp)
 800501c:	10800017 	ldw	r2,0(r2)
 8005020:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8005024:	e0bffe17 	ldw	r2,-8(fp)
 8005028:	10c00a04 	addi	r3,r2,40
 800502c:	e0bfff17 	ldw	r2,-4(fp)
 8005030:	10800217 	ldw	r2,8(r2)
 8005034:	100b883a 	mov	r5,r2
 8005038:	1809883a 	mov	r4,r3
 800503c:	80054140 	call	8005414 <altera_avalon_jtag_uart_close>
}
 8005040:	e037883a 	mov	sp,fp
 8005044:	dfc00117 	ldw	ra,4(sp)
 8005048:	df000017 	ldw	fp,0(sp)
 800504c:	dec00204 	addi	sp,sp,8
 8005050:	f800283a 	ret

08005054 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8005054:	defffa04 	addi	sp,sp,-24
 8005058:	dfc00515 	stw	ra,20(sp)
 800505c:	df000415 	stw	fp,16(sp)
 8005060:	df000404 	addi	fp,sp,16
 8005064:	e13ffd15 	stw	r4,-12(fp)
 8005068:	e17ffe15 	stw	r5,-8(fp)
 800506c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8005070:	e0bffd17 	ldw	r2,-12(fp)
 8005074:	10800017 	ldw	r2,0(r2)
 8005078:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800507c:	e0bffc17 	ldw	r2,-16(fp)
 8005080:	10800a04 	addi	r2,r2,40
 8005084:	e1bfff17 	ldw	r6,-4(fp)
 8005088:	e17ffe17 	ldw	r5,-8(fp)
 800508c:	1009883a 	mov	r4,r2
 8005090:	800547c0 	call	800547c <altera_avalon_jtag_uart_ioctl>
}
 8005094:	e037883a 	mov	sp,fp
 8005098:	dfc00117 	ldw	ra,4(sp)
 800509c:	df000017 	ldw	fp,0(sp)
 80050a0:	dec00204 	addi	sp,sp,8
 80050a4:	f800283a 	ret

080050a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80050a8:	defffa04 	addi	sp,sp,-24
 80050ac:	dfc00515 	stw	ra,20(sp)
 80050b0:	df000415 	stw	fp,16(sp)
 80050b4:	df000404 	addi	fp,sp,16
 80050b8:	e13ffd15 	stw	r4,-12(fp)
 80050bc:	e17ffe15 	stw	r5,-8(fp)
 80050c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80050c4:	e0bffd17 	ldw	r2,-12(fp)
 80050c8:	00c00044 	movi	r3,1
 80050cc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80050d0:	e0bffd17 	ldw	r2,-12(fp)
 80050d4:	10800017 	ldw	r2,0(r2)
 80050d8:	10800104 	addi	r2,r2,4
 80050dc:	1007883a 	mov	r3,r2
 80050e0:	e0bffd17 	ldw	r2,-12(fp)
 80050e4:	10800817 	ldw	r2,32(r2)
 80050e8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80050ec:	e0bffe17 	ldw	r2,-8(fp)
 80050f0:	e0ffff17 	ldw	r3,-4(fp)
 80050f4:	d8000015 	stw	zero,0(sp)
 80050f8:	e1fffd17 	ldw	r7,-12(fp)
 80050fc:	01820034 	movhi	r6,2048
 8005100:	31945a04 	addi	r6,r6,20840
 8005104:	180b883a 	mov	r5,r3
 8005108:	1009883a 	mov	r4,r2
 800510c:	8005e4c0 	call	8005e4c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8005110:	e0bffd17 	ldw	r2,-12(fp)
 8005114:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8005118:	e0bffd17 	ldw	r2,-12(fp)
 800511c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005120:	d0e6b117 	ldw	r3,-25916(gp)
 8005124:	e1fffd17 	ldw	r7,-12(fp)
 8005128:	01820034 	movhi	r6,2048
 800512c:	3194dd04 	addi	r6,r6,21364
 8005130:	180b883a 	mov	r5,r3
 8005134:	1009883a 	mov	r4,r2
 8005138:	80059ac0 	call	80059ac <alt_alarm_start>
 800513c:	1000040e 	bge	r2,zero,8005150 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8005140:	e0fffd17 	ldw	r3,-12(fp)
 8005144:	00a00034 	movhi	r2,32768
 8005148:	10bfffc4 	addi	r2,r2,-1
 800514c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8005150:	0001883a 	nop
 8005154:	e037883a 	mov	sp,fp
 8005158:	dfc00117 	ldw	ra,4(sp)
 800515c:	df000017 	ldw	fp,0(sp)
 8005160:	dec00204 	addi	sp,sp,8
 8005164:	f800283a 	ret

08005168 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8005168:	defff804 	addi	sp,sp,-32
 800516c:	df000715 	stw	fp,28(sp)
 8005170:	df000704 	addi	fp,sp,28
 8005174:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8005178:	e0bfff17 	ldw	r2,-4(fp)
 800517c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8005180:	e0bffb17 	ldw	r2,-20(fp)
 8005184:	10800017 	ldw	r2,0(r2)
 8005188:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800518c:	e0bffc17 	ldw	r2,-16(fp)
 8005190:	10800104 	addi	r2,r2,4
 8005194:	10800037 	ldwio	r2,0(r2)
 8005198:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800519c:	e0bffd17 	ldw	r2,-12(fp)
 80051a0:	1080c00c 	andi	r2,r2,768
 80051a4:	10006d26 	beq	r2,zero,800535c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80051a8:	e0bffd17 	ldw	r2,-12(fp)
 80051ac:	1080400c 	andi	r2,r2,256
 80051b0:	10003526 	beq	r2,zero,8005288 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80051b4:	00800074 	movhi	r2,1
 80051b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80051bc:	e0bffb17 	ldw	r2,-20(fp)
 80051c0:	10800a17 	ldw	r2,40(r2)
 80051c4:	10800044 	addi	r2,r2,1
 80051c8:	1081ffcc 	andi	r2,r2,2047
 80051cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80051d0:	e0bffb17 	ldw	r2,-20(fp)
 80051d4:	10c00b17 	ldw	r3,44(r2)
 80051d8:	e0bffe17 	ldw	r2,-8(fp)
 80051dc:	18801526 	beq	r3,r2,8005234 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80051e0:	e0bffc17 	ldw	r2,-16(fp)
 80051e4:	10800037 	ldwio	r2,0(r2)
 80051e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80051ec:	e0bff917 	ldw	r2,-28(fp)
 80051f0:	10a0000c 	andi	r2,r2,32768
 80051f4:	10001126 	beq	r2,zero,800523c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80051f8:	e0bffb17 	ldw	r2,-20(fp)
 80051fc:	10800a17 	ldw	r2,40(r2)
 8005200:	e0fff917 	ldw	r3,-28(fp)
 8005204:	1809883a 	mov	r4,r3
 8005208:	e0fffb17 	ldw	r3,-20(fp)
 800520c:	1885883a 	add	r2,r3,r2
 8005210:	10800e04 	addi	r2,r2,56
 8005214:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005218:	e0bffb17 	ldw	r2,-20(fp)
 800521c:	10800a17 	ldw	r2,40(r2)
 8005220:	10800044 	addi	r2,r2,1
 8005224:	10c1ffcc 	andi	r3,r2,2047
 8005228:	e0bffb17 	ldw	r2,-20(fp)
 800522c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8005230:	003fe206 	br	80051bc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8005234:	0001883a 	nop
 8005238:	00000106 	br	8005240 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800523c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8005240:	e0bff917 	ldw	r2,-28(fp)
 8005244:	10bfffec 	andhi	r2,r2,65535
 8005248:	10000f26 	beq	r2,zero,8005288 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800524c:	e0bffb17 	ldw	r2,-20(fp)
 8005250:	10c00817 	ldw	r3,32(r2)
 8005254:	00bfff84 	movi	r2,-2
 8005258:	1886703a 	and	r3,r3,r2
 800525c:	e0bffb17 	ldw	r2,-20(fp)
 8005260:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8005264:	e0bffc17 	ldw	r2,-16(fp)
 8005268:	10800104 	addi	r2,r2,4
 800526c:	1007883a 	mov	r3,r2
 8005270:	e0bffb17 	ldw	r2,-20(fp)
 8005274:	10800817 	ldw	r2,32(r2)
 8005278:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800527c:	e0bffc17 	ldw	r2,-16(fp)
 8005280:	10800104 	addi	r2,r2,4
 8005284:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8005288:	e0bffd17 	ldw	r2,-12(fp)
 800528c:	1080800c 	andi	r2,r2,512
 8005290:	103fbe26 	beq	r2,zero,800518c <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8005294:	e0bffd17 	ldw	r2,-12(fp)
 8005298:	1004d43a 	srli	r2,r2,16
 800529c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80052a0:	00001406 	br	80052f4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80052a4:	e0bffc17 	ldw	r2,-16(fp)
 80052a8:	e0fffb17 	ldw	r3,-20(fp)
 80052ac:	18c00d17 	ldw	r3,52(r3)
 80052b0:	e13ffb17 	ldw	r4,-20(fp)
 80052b4:	20c7883a 	add	r3,r4,r3
 80052b8:	18c20e04 	addi	r3,r3,2104
 80052bc:	18c00003 	ldbu	r3,0(r3)
 80052c0:	18c03fcc 	andi	r3,r3,255
 80052c4:	18c0201c 	xori	r3,r3,128
 80052c8:	18ffe004 	addi	r3,r3,-128
 80052cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80052d0:	e0bffb17 	ldw	r2,-20(fp)
 80052d4:	10800d17 	ldw	r2,52(r2)
 80052d8:	10800044 	addi	r2,r2,1
 80052dc:	10c1ffcc 	andi	r3,r2,2047
 80052e0:	e0bffb17 	ldw	r2,-20(fp)
 80052e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80052e8:	e0bffa17 	ldw	r2,-24(fp)
 80052ec:	10bfffc4 	addi	r2,r2,-1
 80052f0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 80052f4:	e0bffa17 	ldw	r2,-24(fp)
 80052f8:	10000526 	beq	r2,zero,8005310 <altera_avalon_jtag_uart_irq+0x1a8>
 80052fc:	e0bffb17 	ldw	r2,-20(fp)
 8005300:	10c00d17 	ldw	r3,52(r2)
 8005304:	e0bffb17 	ldw	r2,-20(fp)
 8005308:	10800c17 	ldw	r2,48(r2)
 800530c:	18bfe51e 	bne	r3,r2,80052a4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8005310:	e0bffa17 	ldw	r2,-24(fp)
 8005314:	103f9d26 	beq	r2,zero,800518c <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8005318:	e0bffb17 	ldw	r2,-20(fp)
 800531c:	10c00817 	ldw	r3,32(r2)
 8005320:	00bfff44 	movi	r2,-3
 8005324:	1886703a 	and	r3,r3,r2
 8005328:	e0bffb17 	ldw	r2,-20(fp)
 800532c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8005330:	e0bffb17 	ldw	r2,-20(fp)
 8005334:	10800017 	ldw	r2,0(r2)
 8005338:	10800104 	addi	r2,r2,4
 800533c:	1007883a 	mov	r3,r2
 8005340:	e0bffb17 	ldw	r2,-20(fp)
 8005344:	10800817 	ldw	r2,32(r2)
 8005348:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800534c:	e0bffc17 	ldw	r2,-16(fp)
 8005350:	10800104 	addi	r2,r2,4
 8005354:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8005358:	003f8c06 	br	800518c <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800535c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8005360:	0001883a 	nop
 8005364:	e037883a 	mov	sp,fp
 8005368:	df000017 	ldw	fp,0(sp)
 800536c:	dec00104 	addi	sp,sp,4
 8005370:	f800283a 	ret

08005374 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8005374:	defff804 	addi	sp,sp,-32
 8005378:	df000715 	stw	fp,28(sp)
 800537c:	df000704 	addi	fp,sp,28
 8005380:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8005384:	e0bffb17 	ldw	r2,-20(fp)
 8005388:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800538c:	e0bff917 	ldw	r2,-28(fp)
 8005390:	10800017 	ldw	r2,0(r2)
 8005394:	10800104 	addi	r2,r2,4
 8005398:	10800037 	ldwio	r2,0(r2)
 800539c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80053a0:	e0bffa17 	ldw	r2,-24(fp)
 80053a4:	1081000c 	andi	r2,r2,1024
 80053a8:	10000b26 	beq	r2,zero,80053d8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80053ac:	e0bff917 	ldw	r2,-28(fp)
 80053b0:	10800017 	ldw	r2,0(r2)
 80053b4:	10800104 	addi	r2,r2,4
 80053b8:	1007883a 	mov	r3,r2
 80053bc:	e0bff917 	ldw	r2,-28(fp)
 80053c0:	10800817 	ldw	r2,32(r2)
 80053c4:	10810014 	ori	r2,r2,1024
 80053c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80053cc:	e0bff917 	ldw	r2,-28(fp)
 80053d0:	10000915 	stw	zero,36(r2)
 80053d4:	00000a06 	br	8005400 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80053d8:	e0bff917 	ldw	r2,-28(fp)
 80053dc:	10c00917 	ldw	r3,36(r2)
 80053e0:	00a00034 	movhi	r2,32768
 80053e4:	10bfff04 	addi	r2,r2,-4
 80053e8:	10c00536 	bltu	r2,r3,8005400 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80053ec:	e0bff917 	ldw	r2,-28(fp)
 80053f0:	10800917 	ldw	r2,36(r2)
 80053f4:	10c00044 	addi	r3,r2,1
 80053f8:	e0bff917 	ldw	r2,-28(fp)
 80053fc:	10c00915 	stw	r3,36(r2)
 8005400:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8005404:	e037883a 	mov	sp,fp
 8005408:	df000017 	ldw	fp,0(sp)
 800540c:	dec00104 	addi	sp,sp,4
 8005410:	f800283a 	ret

08005414 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8005414:	defffd04 	addi	sp,sp,-12
 8005418:	df000215 	stw	fp,8(sp)
 800541c:	df000204 	addi	fp,sp,8
 8005420:	e13ffe15 	stw	r4,-8(fp)
 8005424:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8005428:	00000506 	br	8005440 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800542c:	e0bfff17 	ldw	r2,-4(fp)
 8005430:	1090000c 	andi	r2,r2,16384
 8005434:	10000226 	beq	r2,zero,8005440 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8005438:	00bffd44 	movi	r2,-11
 800543c:	00000b06 	br	800546c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8005440:	e0bffe17 	ldw	r2,-8(fp)
 8005444:	10c00d17 	ldw	r3,52(r2)
 8005448:	e0bffe17 	ldw	r2,-8(fp)
 800544c:	10800c17 	ldw	r2,48(r2)
 8005450:	18800526 	beq	r3,r2,8005468 <altera_avalon_jtag_uart_close+0x54>
 8005454:	e0bffe17 	ldw	r2,-8(fp)
 8005458:	10c00917 	ldw	r3,36(r2)
 800545c:	e0bffe17 	ldw	r2,-8(fp)
 8005460:	10800117 	ldw	r2,4(r2)
 8005464:	18bff136 	bltu	r3,r2,800542c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8005468:	0005883a 	mov	r2,zero
}
 800546c:	e037883a 	mov	sp,fp
 8005470:	df000017 	ldw	fp,0(sp)
 8005474:	dec00104 	addi	sp,sp,4
 8005478:	f800283a 	ret

0800547c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800547c:	defffa04 	addi	sp,sp,-24
 8005480:	df000515 	stw	fp,20(sp)
 8005484:	df000504 	addi	fp,sp,20
 8005488:	e13ffd15 	stw	r4,-12(fp)
 800548c:	e17ffe15 	stw	r5,-8(fp)
 8005490:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8005494:	00bff9c4 	movi	r2,-25
 8005498:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800549c:	e0bffe17 	ldw	r2,-8(fp)
 80054a0:	10da8060 	cmpeqi	r3,r2,27137
 80054a4:	1800031e 	bne	r3,zero,80054b4 <altera_avalon_jtag_uart_ioctl+0x38>
 80054a8:	109a80a0 	cmpeqi	r2,r2,27138
 80054ac:	1000181e 	bne	r2,zero,8005510 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80054b0:	00002906 	br	8005558 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80054b4:	e0bffd17 	ldw	r2,-12(fp)
 80054b8:	10c00117 	ldw	r3,4(r2)
 80054bc:	00a00034 	movhi	r2,32768
 80054c0:	10bfffc4 	addi	r2,r2,-1
 80054c4:	18802126 	beq	r3,r2,800554c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80054c8:	e0bfff17 	ldw	r2,-4(fp)
 80054cc:	10800017 	ldw	r2,0(r2)
 80054d0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80054d4:	e0bffc17 	ldw	r2,-16(fp)
 80054d8:	10800090 	cmplti	r2,r2,2
 80054dc:	1000061e 	bne	r2,zero,80054f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 80054e0:	e0fffc17 	ldw	r3,-16(fp)
 80054e4:	00a00034 	movhi	r2,32768
 80054e8:	10bfffc4 	addi	r2,r2,-1
 80054ec:	18800226 	beq	r3,r2,80054f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 80054f0:	e0bffc17 	ldw	r2,-16(fp)
 80054f4:	00000206 	br	8005500 <altera_avalon_jtag_uart_ioctl+0x84>
 80054f8:	00a00034 	movhi	r2,32768
 80054fc:	10bfff84 	addi	r2,r2,-2
 8005500:	e0fffd17 	ldw	r3,-12(fp)
 8005504:	18800115 	stw	r2,4(r3)
      rc = 0;
 8005508:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800550c:	00000f06 	br	800554c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8005510:	e0bffd17 	ldw	r2,-12(fp)
 8005514:	10c00117 	ldw	r3,4(r2)
 8005518:	00a00034 	movhi	r2,32768
 800551c:	10bfffc4 	addi	r2,r2,-1
 8005520:	18800c26 	beq	r3,r2,8005554 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8005524:	e0bffd17 	ldw	r2,-12(fp)
 8005528:	10c00917 	ldw	r3,36(r2)
 800552c:	e0bffd17 	ldw	r2,-12(fp)
 8005530:	10800117 	ldw	r2,4(r2)
 8005534:	1885803a 	cmpltu	r2,r3,r2
 8005538:	10c03fcc 	andi	r3,r2,255
 800553c:	e0bfff17 	ldw	r2,-4(fp)
 8005540:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8005544:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8005548:	00000206 	br	8005554 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800554c:	0001883a 	nop
 8005550:	00000106 	br	8005558 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8005554:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8005558:	e0bffb17 	ldw	r2,-20(fp)
}
 800555c:	e037883a 	mov	sp,fp
 8005560:	df000017 	ldw	fp,0(sp)
 8005564:	dec00104 	addi	sp,sp,4
 8005568:	f800283a 	ret

0800556c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800556c:	defff304 	addi	sp,sp,-52
 8005570:	dfc00c15 	stw	ra,48(sp)
 8005574:	df000b15 	stw	fp,44(sp)
 8005578:	df000b04 	addi	fp,sp,44
 800557c:	e13ffc15 	stw	r4,-16(fp)
 8005580:	e17ffd15 	stw	r5,-12(fp)
 8005584:	e1bffe15 	stw	r6,-8(fp)
 8005588:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800558c:	e0bffd17 	ldw	r2,-12(fp)
 8005590:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8005594:	00004706 	br	80056b4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8005598:	e0bffc17 	ldw	r2,-16(fp)
 800559c:	10800a17 	ldw	r2,40(r2)
 80055a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80055a4:	e0bffc17 	ldw	r2,-16(fp)
 80055a8:	10800b17 	ldw	r2,44(r2)
 80055ac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80055b0:	e0fff717 	ldw	r3,-36(fp)
 80055b4:	e0bff817 	ldw	r2,-32(fp)
 80055b8:	18800536 	bltu	r3,r2,80055d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80055bc:	e0fff717 	ldw	r3,-36(fp)
 80055c0:	e0bff817 	ldw	r2,-32(fp)
 80055c4:	1885c83a 	sub	r2,r3,r2
 80055c8:	e0bff615 	stw	r2,-40(fp)
 80055cc:	00000406 	br	80055e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80055d0:	00c20004 	movi	r3,2048
 80055d4:	e0bff817 	ldw	r2,-32(fp)
 80055d8:	1885c83a 	sub	r2,r3,r2
 80055dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 80055e0:	e0bff617 	ldw	r2,-40(fp)
 80055e4:	10001e26 	beq	r2,zero,8005660 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80055e8:	e0fffe17 	ldw	r3,-8(fp)
 80055ec:	e0bff617 	ldw	r2,-40(fp)
 80055f0:	1880022e 	bgeu	r3,r2,80055fc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80055f4:	e0bffe17 	ldw	r2,-8(fp)
 80055f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80055fc:	e0bffc17 	ldw	r2,-16(fp)
 8005600:	10c00e04 	addi	r3,r2,56
 8005604:	e0bff817 	ldw	r2,-32(fp)
 8005608:	1885883a 	add	r2,r3,r2
 800560c:	e1bff617 	ldw	r6,-40(fp)
 8005610:	100b883a 	mov	r5,r2
 8005614:	e13ff517 	ldw	r4,-44(fp)
 8005618:	8002ce80 	call	8002ce8 <memcpy>
      ptr   += n;
 800561c:	e0fff517 	ldw	r3,-44(fp)
 8005620:	e0bff617 	ldw	r2,-40(fp)
 8005624:	1885883a 	add	r2,r3,r2
 8005628:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800562c:	e0fffe17 	ldw	r3,-8(fp)
 8005630:	e0bff617 	ldw	r2,-40(fp)
 8005634:	1885c83a 	sub	r2,r3,r2
 8005638:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800563c:	e0fff817 	ldw	r3,-32(fp)
 8005640:	e0bff617 	ldw	r2,-40(fp)
 8005644:	1885883a 	add	r2,r3,r2
 8005648:	10c1ffcc 	andi	r3,r2,2047
 800564c:	e0bffc17 	ldw	r2,-16(fp)
 8005650:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8005654:	e0bffe17 	ldw	r2,-8(fp)
 8005658:	00bfcf16 	blt	zero,r2,8005598 <altera_avalon_jtag_uart_read+0x2c>
 800565c:	00000106 	br	8005664 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8005660:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8005664:	e0fff517 	ldw	r3,-44(fp)
 8005668:	e0bffd17 	ldw	r2,-12(fp)
 800566c:	1880141e 	bne	r3,r2,80056c0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8005670:	e0bfff17 	ldw	r2,-4(fp)
 8005674:	1090000c 	andi	r2,r2,16384
 8005678:	1000131e 	bne	r2,zero,80056c8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800567c:	0001883a 	nop
 8005680:	e0bffc17 	ldw	r2,-16(fp)
 8005684:	10c00a17 	ldw	r3,40(r2)
 8005688:	e0bff717 	ldw	r2,-36(fp)
 800568c:	1880051e 	bne	r3,r2,80056a4 <altera_avalon_jtag_uart_read+0x138>
 8005690:	e0bffc17 	ldw	r2,-16(fp)
 8005694:	10c00917 	ldw	r3,36(r2)
 8005698:	e0bffc17 	ldw	r2,-16(fp)
 800569c:	10800117 	ldw	r2,4(r2)
 80056a0:	18bff736 	bltu	r3,r2,8005680 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80056a4:	e0bffc17 	ldw	r2,-16(fp)
 80056a8:	10c00a17 	ldw	r3,40(r2)
 80056ac:	e0bff717 	ldw	r2,-36(fp)
 80056b0:	18800726 	beq	r3,r2,80056d0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80056b4:	e0bffe17 	ldw	r2,-8(fp)
 80056b8:	00bfb716 	blt	zero,r2,8005598 <altera_avalon_jtag_uart_read+0x2c>
 80056bc:	00000506 	br	80056d4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80056c0:	0001883a 	nop
 80056c4:	00000306 	br	80056d4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80056c8:	0001883a 	nop
 80056cc:	00000106 	br	80056d4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80056d0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 80056d4:	e0fff517 	ldw	r3,-44(fp)
 80056d8:	e0bffd17 	ldw	r2,-12(fp)
 80056dc:	18801826 	beq	r3,r2,8005740 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80056e0:	0005303a 	rdctl	r2,status
 80056e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80056e8:	e0fffb17 	ldw	r3,-20(fp)
 80056ec:	00bfff84 	movi	r2,-2
 80056f0:	1884703a 	and	r2,r3,r2
 80056f4:	1001703a 	wrctl	status,r2
  
  return context;
 80056f8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 80056fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8005700:	e0bffc17 	ldw	r2,-16(fp)
 8005704:	10800817 	ldw	r2,32(r2)
 8005708:	10c00054 	ori	r3,r2,1
 800570c:	e0bffc17 	ldw	r2,-16(fp)
 8005710:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8005714:	e0bffc17 	ldw	r2,-16(fp)
 8005718:	10800017 	ldw	r2,0(r2)
 800571c:	10800104 	addi	r2,r2,4
 8005720:	1007883a 	mov	r3,r2
 8005724:	e0bffc17 	ldw	r2,-16(fp)
 8005728:	10800817 	ldw	r2,32(r2)
 800572c:	18800035 	stwio	r2,0(r3)
 8005730:	e0bffa17 	ldw	r2,-24(fp)
 8005734:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005738:	e0bff917 	ldw	r2,-28(fp)
 800573c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8005740:	e0fff517 	ldw	r3,-44(fp)
 8005744:	e0bffd17 	ldw	r2,-12(fp)
 8005748:	18800426 	beq	r3,r2,800575c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800574c:	e0fff517 	ldw	r3,-44(fp)
 8005750:	e0bffd17 	ldw	r2,-12(fp)
 8005754:	1885c83a 	sub	r2,r3,r2
 8005758:	00000606 	br	8005774 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800575c:	e0bfff17 	ldw	r2,-4(fp)
 8005760:	1090000c 	andi	r2,r2,16384
 8005764:	10000226 	beq	r2,zero,8005770 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8005768:	00bffd44 	movi	r2,-11
 800576c:	00000106 	br	8005774 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8005770:	00bffec4 	movi	r2,-5
}
 8005774:	e037883a 	mov	sp,fp
 8005778:	dfc00117 	ldw	ra,4(sp)
 800577c:	df000017 	ldw	fp,0(sp)
 8005780:	dec00204 	addi	sp,sp,8
 8005784:	f800283a 	ret

08005788 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8005788:	defff304 	addi	sp,sp,-52
 800578c:	dfc00c15 	stw	ra,48(sp)
 8005790:	df000b15 	stw	fp,44(sp)
 8005794:	df000b04 	addi	fp,sp,44
 8005798:	e13ffc15 	stw	r4,-16(fp)
 800579c:	e17ffd15 	stw	r5,-12(fp)
 80057a0:	e1bffe15 	stw	r6,-8(fp)
 80057a4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80057a8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80057ac:	e0bffd17 	ldw	r2,-12(fp)
 80057b0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80057b4:	00003706 	br	8005894 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80057b8:	e0bffc17 	ldw	r2,-16(fp)
 80057bc:	10800c17 	ldw	r2,48(r2)
 80057c0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80057c4:	e0bffc17 	ldw	r2,-16(fp)
 80057c8:	10800d17 	ldw	r2,52(r2)
 80057cc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80057d0:	e0fff917 	ldw	r3,-28(fp)
 80057d4:	e0bff517 	ldw	r2,-44(fp)
 80057d8:	1880062e 	bgeu	r3,r2,80057f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 80057dc:	e0fff517 	ldw	r3,-44(fp)
 80057e0:	e0bff917 	ldw	r2,-28(fp)
 80057e4:	1885c83a 	sub	r2,r3,r2
 80057e8:	10bfffc4 	addi	r2,r2,-1
 80057ec:	e0bff615 	stw	r2,-40(fp)
 80057f0:	00000b06 	br	8005820 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 80057f4:	e0bff517 	ldw	r2,-44(fp)
 80057f8:	10000526 	beq	r2,zero,8005810 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 80057fc:	00c20004 	movi	r3,2048
 8005800:	e0bff917 	ldw	r2,-28(fp)
 8005804:	1885c83a 	sub	r2,r3,r2
 8005808:	e0bff615 	stw	r2,-40(fp)
 800580c:	00000406 	br	8005820 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8005810:	00c1ffc4 	movi	r3,2047
 8005814:	e0bff917 	ldw	r2,-28(fp)
 8005818:	1885c83a 	sub	r2,r3,r2
 800581c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8005820:	e0bff617 	ldw	r2,-40(fp)
 8005824:	10001e26 	beq	r2,zero,80058a0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8005828:	e0fffe17 	ldw	r3,-8(fp)
 800582c:	e0bff617 	ldw	r2,-40(fp)
 8005830:	1880022e 	bgeu	r3,r2,800583c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8005834:	e0bffe17 	ldw	r2,-8(fp)
 8005838:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800583c:	e0bffc17 	ldw	r2,-16(fp)
 8005840:	10c20e04 	addi	r3,r2,2104
 8005844:	e0bff917 	ldw	r2,-28(fp)
 8005848:	1885883a 	add	r2,r3,r2
 800584c:	e1bff617 	ldw	r6,-40(fp)
 8005850:	e17ffd17 	ldw	r5,-12(fp)
 8005854:	1009883a 	mov	r4,r2
 8005858:	8002ce80 	call	8002ce8 <memcpy>
      ptr   += n;
 800585c:	e0fffd17 	ldw	r3,-12(fp)
 8005860:	e0bff617 	ldw	r2,-40(fp)
 8005864:	1885883a 	add	r2,r3,r2
 8005868:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800586c:	e0fffe17 	ldw	r3,-8(fp)
 8005870:	e0bff617 	ldw	r2,-40(fp)
 8005874:	1885c83a 	sub	r2,r3,r2
 8005878:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800587c:	e0fff917 	ldw	r3,-28(fp)
 8005880:	e0bff617 	ldw	r2,-40(fp)
 8005884:	1885883a 	add	r2,r3,r2
 8005888:	10c1ffcc 	andi	r3,r2,2047
 800588c:	e0bffc17 	ldw	r2,-16(fp)
 8005890:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8005894:	e0bffe17 	ldw	r2,-8(fp)
 8005898:	00bfc716 	blt	zero,r2,80057b8 <altera_avalon_jtag_uart_write+0x30>
 800589c:	00000106 	br	80058a4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80058a0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80058a4:	0005303a 	rdctl	r2,status
 80058a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80058ac:	e0fffb17 	ldw	r3,-20(fp)
 80058b0:	00bfff84 	movi	r2,-2
 80058b4:	1884703a 	and	r2,r3,r2
 80058b8:	1001703a 	wrctl	status,r2
  
  return context;
 80058bc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80058c0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80058c4:	e0bffc17 	ldw	r2,-16(fp)
 80058c8:	10800817 	ldw	r2,32(r2)
 80058cc:	10c00094 	ori	r3,r2,2
 80058d0:	e0bffc17 	ldw	r2,-16(fp)
 80058d4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80058d8:	e0bffc17 	ldw	r2,-16(fp)
 80058dc:	10800017 	ldw	r2,0(r2)
 80058e0:	10800104 	addi	r2,r2,4
 80058e4:	1007883a 	mov	r3,r2
 80058e8:	e0bffc17 	ldw	r2,-16(fp)
 80058ec:	10800817 	ldw	r2,32(r2)
 80058f0:	18800035 	stwio	r2,0(r3)
 80058f4:	e0bffa17 	ldw	r2,-24(fp)
 80058f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80058fc:	e0bff817 	ldw	r2,-32(fp)
 8005900:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8005904:	e0bffe17 	ldw	r2,-8(fp)
 8005908:	0080100e 	bge	zero,r2,800594c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800590c:	e0bfff17 	ldw	r2,-4(fp)
 8005910:	1090000c 	andi	r2,r2,16384
 8005914:	1000101e 	bne	r2,zero,8005958 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8005918:	0001883a 	nop
 800591c:	e0bffc17 	ldw	r2,-16(fp)
 8005920:	10c00d17 	ldw	r3,52(r2)
 8005924:	e0bff517 	ldw	r2,-44(fp)
 8005928:	1880051e 	bne	r3,r2,8005940 <altera_avalon_jtag_uart_write+0x1b8>
 800592c:	e0bffc17 	ldw	r2,-16(fp)
 8005930:	10c00917 	ldw	r3,36(r2)
 8005934:	e0bffc17 	ldw	r2,-16(fp)
 8005938:	10800117 	ldw	r2,4(r2)
 800593c:	18bff736 	bltu	r3,r2,800591c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8005940:	e0bffc17 	ldw	r2,-16(fp)
 8005944:	10800917 	ldw	r2,36(r2)
 8005948:	1000051e 	bne	r2,zero,8005960 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800594c:	e0bffe17 	ldw	r2,-8(fp)
 8005950:	00bfd016 	blt	zero,r2,8005894 <altera_avalon_jtag_uart_write+0x10c>
 8005954:	00000306 	br	8005964 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8005958:	0001883a 	nop
 800595c:	00000106 	br	8005964 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8005960:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8005964:	e0fffd17 	ldw	r3,-12(fp)
 8005968:	e0bff717 	ldw	r2,-36(fp)
 800596c:	18800426 	beq	r3,r2,8005980 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8005970:	e0fffd17 	ldw	r3,-12(fp)
 8005974:	e0bff717 	ldw	r2,-36(fp)
 8005978:	1885c83a 	sub	r2,r3,r2
 800597c:	00000606 	br	8005998 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8005980:	e0bfff17 	ldw	r2,-4(fp)
 8005984:	1090000c 	andi	r2,r2,16384
 8005988:	10000226 	beq	r2,zero,8005994 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800598c:	00bffd44 	movi	r2,-11
 8005990:	00000106 	br	8005998 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8005994:	00bffec4 	movi	r2,-5
}
 8005998:	e037883a 	mov	sp,fp
 800599c:	dfc00117 	ldw	ra,4(sp)
 80059a0:	df000017 	ldw	fp,0(sp)
 80059a4:	dec00204 	addi	sp,sp,8
 80059a8:	f800283a 	ret

080059ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80059ac:	defff504 	addi	sp,sp,-44
 80059b0:	df000a15 	stw	fp,40(sp)
 80059b4:	df000a04 	addi	fp,sp,40
 80059b8:	e13ffc15 	stw	r4,-16(fp)
 80059bc:	e17ffd15 	stw	r5,-12(fp)
 80059c0:	e1bffe15 	stw	r6,-8(fp)
 80059c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80059c8:	e03ff615 	stw	zero,-40(fp)
 80059cc:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
 80059d0:	10003c26 	beq	r2,zero,8005ac4 <alt_alarm_start+0x118>
  {
    if (alarm)
 80059d4:	e0bffc17 	ldw	r2,-16(fp)
 80059d8:	10003826 	beq	r2,zero,8005abc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80059dc:	e0bffc17 	ldw	r2,-16(fp)
 80059e0:	e0fffe17 	ldw	r3,-8(fp)
 80059e4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80059e8:	e0bffc17 	ldw	r2,-16(fp)
 80059ec:	e0ffff17 	ldw	r3,-4(fp)
 80059f0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80059f4:	0005303a 	rdctl	r2,status
 80059f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80059fc:	e0fff917 	ldw	r3,-28(fp)
 8005a00:	00bfff84 	movi	r2,-2
 8005a04:	1884703a 	and	r2,r3,r2
 8005a08:	1001703a 	wrctl	status,r2
  
  return context;
 8005a0c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8005a10:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005a14:	d0a6b217 	ldw	r2,-25912(gp)
      
      current_nticks = alt_nticks();
 8005a18:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8005a1c:	e0fffd17 	ldw	r3,-12(fp)
 8005a20:	e0bff617 	ldw	r2,-40(fp)
 8005a24:	1885883a 	add	r2,r3,r2
 8005a28:	10c00044 	addi	r3,r2,1
 8005a2c:	e0bffc17 	ldw	r2,-16(fp)
 8005a30:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8005a34:	e0bffc17 	ldw	r2,-16(fp)
 8005a38:	10c00217 	ldw	r3,8(r2)
 8005a3c:	e0bff617 	ldw	r2,-40(fp)
 8005a40:	1880042e 	bgeu	r3,r2,8005a54 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8005a44:	e0bffc17 	ldw	r2,-16(fp)
 8005a48:	00c00044 	movi	r3,1
 8005a4c:	10c00405 	stb	r3,16(r2)
 8005a50:	00000206 	br	8005a5c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8005a54:	e0bffc17 	ldw	r2,-16(fp)
 8005a58:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8005a5c:	e0bffc17 	ldw	r2,-16(fp)
 8005a60:	d0e00c04 	addi	r3,gp,-32720
 8005a64:	e0fffa15 	stw	r3,-24(fp)
 8005a68:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005a6c:	e0bffb17 	ldw	r2,-20(fp)
 8005a70:	e0fffa17 	ldw	r3,-24(fp)
 8005a74:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005a78:	e0bffa17 	ldw	r2,-24(fp)
 8005a7c:	10c00017 	ldw	r3,0(r2)
 8005a80:	e0bffb17 	ldw	r2,-20(fp)
 8005a84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005a88:	e0bffa17 	ldw	r2,-24(fp)
 8005a8c:	10800017 	ldw	r2,0(r2)
 8005a90:	e0fffb17 	ldw	r3,-20(fp)
 8005a94:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005a98:	e0bffa17 	ldw	r2,-24(fp)
 8005a9c:	e0fffb17 	ldw	r3,-20(fp)
 8005aa0:	10c00015 	stw	r3,0(r2)
 8005aa4:	e0bff817 	ldw	r2,-32(fp)
 8005aa8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005aac:	e0bff717 	ldw	r2,-36(fp)
 8005ab0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8005ab4:	0005883a 	mov	r2,zero
 8005ab8:	00000306 	br	8005ac8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8005abc:	00bffa84 	movi	r2,-22
 8005ac0:	00000106 	br	8005ac8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8005ac4:	00bfde84 	movi	r2,-134
  }
}
 8005ac8:	e037883a 	mov	sp,fp
 8005acc:	df000017 	ldw	fp,0(sp)
 8005ad0:	dec00104 	addi	sp,sp,4
 8005ad4:	f800283a 	ret

08005ad8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8005ad8:	defffa04 	addi	sp,sp,-24
 8005adc:	dfc00515 	stw	ra,20(sp)
 8005ae0:	df000415 	stw	fp,16(sp)
 8005ae4:	df000404 	addi	fp,sp,16
 8005ae8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8005aec:	008000c4 	movi	r2,3
 8005af0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8005af4:	e0fffd17 	ldw	r3,-12(fp)
 8005af8:	008003f4 	movhi	r2,15
 8005afc:	10909004 	addi	r2,r2,16960
 8005b00:	1885383a 	mul	r2,r3,r2
 8005b04:	100b883a 	mov	r5,r2
 8005b08:	0100bef4 	movhi	r4,763
 8005b0c:	213c2004 	addi	r4,r4,-3968
 8005b10:	80017700 	call	8001770 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8005b14:	100b883a 	mov	r5,r2
 8005b18:	01200034 	movhi	r4,32768
 8005b1c:	213fffc4 	addi	r4,r4,-1
 8005b20:	80017700 	call	8001770 <__udivsi3>
 8005b24:	100b883a 	mov	r5,r2
 8005b28:	e13fff17 	ldw	r4,-4(fp)
 8005b2c:	80017700 	call	8001770 <__udivsi3>
 8005b30:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8005b34:	e0bffe17 	ldw	r2,-8(fp)
 8005b38:	10002a26 	beq	r2,zero,8005be4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8005b3c:	e03ffc15 	stw	zero,-16(fp)
 8005b40:	00001706 	br	8005ba0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8005b44:	00a00034 	movhi	r2,32768
 8005b48:	10bfffc4 	addi	r2,r2,-1
 8005b4c:	10bfffc4 	addi	r2,r2,-1
 8005b50:	103ffe1e 	bne	r2,zero,8005b4c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8005b54:	e0fffd17 	ldw	r3,-12(fp)
 8005b58:	008003f4 	movhi	r2,15
 8005b5c:	10909004 	addi	r2,r2,16960
 8005b60:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8005b64:	100b883a 	mov	r5,r2
 8005b68:	0100bef4 	movhi	r4,763
 8005b6c:	213c2004 	addi	r4,r4,-3968
 8005b70:	80017700 	call	8001770 <__udivsi3>
 8005b74:	100b883a 	mov	r5,r2
 8005b78:	01200034 	movhi	r4,32768
 8005b7c:	213fffc4 	addi	r4,r4,-1
 8005b80:	80017700 	call	8001770 <__udivsi3>
 8005b84:	1007883a 	mov	r3,r2
 8005b88:	e0bfff17 	ldw	r2,-4(fp)
 8005b8c:	10c5c83a 	sub	r2,r2,r3
 8005b90:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8005b94:	e0bffc17 	ldw	r2,-16(fp)
 8005b98:	10800044 	addi	r2,r2,1
 8005b9c:	e0bffc15 	stw	r2,-16(fp)
 8005ba0:	e0fffc17 	ldw	r3,-16(fp)
 8005ba4:	e0bffe17 	ldw	r2,-8(fp)
 8005ba8:	18bfe616 	blt	r3,r2,8005b44 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8005bac:	e0fffd17 	ldw	r3,-12(fp)
 8005bb0:	008003f4 	movhi	r2,15
 8005bb4:	10909004 	addi	r2,r2,16960
 8005bb8:	1885383a 	mul	r2,r3,r2
 8005bbc:	100b883a 	mov	r5,r2
 8005bc0:	0100bef4 	movhi	r4,763
 8005bc4:	213c2004 	addi	r4,r4,-3968
 8005bc8:	80017700 	call	8001770 <__udivsi3>
 8005bcc:	1007883a 	mov	r3,r2
 8005bd0:	e0bfff17 	ldw	r2,-4(fp)
 8005bd4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8005bd8:	10bfffc4 	addi	r2,r2,-1
 8005bdc:	103ffe1e 	bne	r2,zero,8005bd8 <alt_busy_sleep+0x100>
 8005be0:	00000d06 	br	8005c18 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8005be4:	e0fffd17 	ldw	r3,-12(fp)
 8005be8:	008003f4 	movhi	r2,15
 8005bec:	10909004 	addi	r2,r2,16960
 8005bf0:	1885383a 	mul	r2,r3,r2
 8005bf4:	100b883a 	mov	r5,r2
 8005bf8:	0100bef4 	movhi	r4,763
 8005bfc:	213c2004 	addi	r4,r4,-3968
 8005c00:	80017700 	call	8001770 <__udivsi3>
 8005c04:	1007883a 	mov	r3,r2
 8005c08:	e0bfff17 	ldw	r2,-4(fp)
 8005c0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8005c10:	10bfffc4 	addi	r2,r2,-1
 8005c14:	00bffe16 	blt	zero,r2,8005c10 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8005c18:	0005883a 	mov	r2,zero
}
 8005c1c:	e037883a 	mov	sp,fp
 8005c20:	dfc00117 	ldw	ra,4(sp)
 8005c24:	df000017 	ldw	fp,0(sp)
 8005c28:	dec00204 	addi	sp,sp,8
 8005c2c:	f800283a 	ret

08005c30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8005c30:	defffe04 	addi	sp,sp,-8
 8005c34:	df000115 	stw	fp,4(sp)
 8005c38:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8005c3c:	e03fff15 	stw	zero,-4(fp)
 8005c40:	00000506 	br	8005c58 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8005c44:	e0bfff17 	ldw	r2,-4(fp)
 8005c48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8005c4c:	e0bfff17 	ldw	r2,-4(fp)
 8005c50:	10800804 	addi	r2,r2,32
 8005c54:	e0bfff15 	stw	r2,-4(fp)
 8005c58:	e0bfff17 	ldw	r2,-4(fp)
 8005c5c:	10820030 	cmpltui	r2,r2,2048
 8005c60:	103ff81e 	bne	r2,zero,8005c44 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8005c64:	0001883a 	nop
 8005c68:	e037883a 	mov	sp,fp
 8005c6c:	df000017 	ldw	fp,0(sp)
 8005c70:	dec00104 	addi	sp,sp,4
 8005c74:	f800283a 	ret

08005c78 <alt_get_errno>:
 8005c78:	defffe04 	addi	sp,sp,-8
 8005c7c:	dfc00115 	stw	ra,4(sp)
 8005c80:	df000015 	stw	fp,0(sp)
 8005c84:	d839883a 	mov	fp,sp
 8005c88:	d0a00917 	ldw	r2,-32732(gp)
 8005c8c:	10000326 	beq	r2,zero,8005c9c <alt_get_errno+0x24>
 8005c90:	d0a00917 	ldw	r2,-32732(gp)
 8005c94:	103ee83a 	callr	r2
 8005c98:	00000106 	br	8005ca0 <alt_get_errno+0x28>
 8005c9c:	d0a6ac04 	addi	r2,gp,-25936
 8005ca0:	e037883a 	mov	sp,fp
 8005ca4:	dfc00117 	ldw	ra,4(sp)
 8005ca8:	df000017 	ldw	fp,0(sp)
 8005cac:	dec00204 	addi	sp,sp,8
 8005cb0:	f800283a 	ret

08005cb4 <alt_dev_llist_insert>:
 8005cb4:	defffa04 	addi	sp,sp,-24
 8005cb8:	dfc00515 	stw	ra,20(sp)
 8005cbc:	df000415 	stw	fp,16(sp)
 8005cc0:	df000404 	addi	fp,sp,16
 8005cc4:	e13ffe15 	stw	r4,-8(fp)
 8005cc8:	e17fff15 	stw	r5,-4(fp)
 8005ccc:	e0bffe17 	ldw	r2,-8(fp)
 8005cd0:	10000326 	beq	r2,zero,8005ce0 <alt_dev_llist_insert+0x2c>
 8005cd4:	e0bffe17 	ldw	r2,-8(fp)
 8005cd8:	10800217 	ldw	r2,8(r2)
 8005cdc:	1000061e 	bne	r2,zero,8005cf8 <alt_dev_llist_insert+0x44>
 8005ce0:	8005c780 	call	8005c78 <alt_get_errno>
 8005ce4:	1007883a 	mov	r3,r2
 8005ce8:	00800584 	movi	r2,22
 8005cec:	18800015 	stw	r2,0(r3)
 8005cf0:	00bffa84 	movi	r2,-22
 8005cf4:	00001306 	br	8005d44 <alt_dev_llist_insert+0x90>
 8005cf8:	e0bffe17 	ldw	r2,-8(fp)
 8005cfc:	e0ffff17 	ldw	r3,-4(fp)
 8005d00:	e0fffc15 	stw	r3,-16(fp)
 8005d04:	e0bffd15 	stw	r2,-12(fp)
 8005d08:	e0bffd17 	ldw	r2,-12(fp)
 8005d0c:	e0fffc17 	ldw	r3,-16(fp)
 8005d10:	10c00115 	stw	r3,4(r2)
 8005d14:	e0bffc17 	ldw	r2,-16(fp)
 8005d18:	10c00017 	ldw	r3,0(r2)
 8005d1c:	e0bffd17 	ldw	r2,-12(fp)
 8005d20:	10c00015 	stw	r3,0(r2)
 8005d24:	e0bffc17 	ldw	r2,-16(fp)
 8005d28:	10800017 	ldw	r2,0(r2)
 8005d2c:	e0fffd17 	ldw	r3,-12(fp)
 8005d30:	10c00115 	stw	r3,4(r2)
 8005d34:	e0bffc17 	ldw	r2,-16(fp)
 8005d38:	e0fffd17 	ldw	r3,-12(fp)
 8005d3c:	10c00015 	stw	r3,0(r2)
 8005d40:	0005883a 	mov	r2,zero
 8005d44:	e037883a 	mov	sp,fp
 8005d48:	dfc00117 	ldw	ra,4(sp)
 8005d4c:	df000017 	ldw	fp,0(sp)
 8005d50:	dec00204 	addi	sp,sp,8
 8005d54:	f800283a 	ret

08005d58 <_do_ctors>:
 8005d58:	defffd04 	addi	sp,sp,-12
 8005d5c:	dfc00215 	stw	ra,8(sp)
 8005d60:	df000115 	stw	fp,4(sp)
 8005d64:	df000104 	addi	fp,sp,4
 8005d68:	00820034 	movhi	r2,2048
 8005d6c:	109b5004 	addi	r2,r2,27968
 8005d70:	e0bfff15 	stw	r2,-4(fp)
 8005d74:	00000606 	br	8005d90 <_do_ctors+0x38>
 8005d78:	e0bfff17 	ldw	r2,-4(fp)
 8005d7c:	10800017 	ldw	r2,0(r2)
 8005d80:	103ee83a 	callr	r2
 8005d84:	e0bfff17 	ldw	r2,-4(fp)
 8005d88:	10bfff04 	addi	r2,r2,-4
 8005d8c:	e0bfff15 	stw	r2,-4(fp)
 8005d90:	e0ffff17 	ldw	r3,-4(fp)
 8005d94:	00820034 	movhi	r2,2048
 8005d98:	109b5104 	addi	r2,r2,27972
 8005d9c:	18bff62e 	bgeu	r3,r2,8005d78 <_do_ctors+0x20>
 8005da0:	0001883a 	nop
 8005da4:	e037883a 	mov	sp,fp
 8005da8:	dfc00117 	ldw	ra,4(sp)
 8005dac:	df000017 	ldw	fp,0(sp)
 8005db0:	dec00204 	addi	sp,sp,8
 8005db4:	f800283a 	ret

08005db8 <_do_dtors>:
 8005db8:	defffd04 	addi	sp,sp,-12
 8005dbc:	dfc00215 	stw	ra,8(sp)
 8005dc0:	df000115 	stw	fp,4(sp)
 8005dc4:	df000104 	addi	fp,sp,4
 8005dc8:	00820034 	movhi	r2,2048
 8005dcc:	109b5004 	addi	r2,r2,27968
 8005dd0:	e0bfff15 	stw	r2,-4(fp)
 8005dd4:	00000606 	br	8005df0 <_do_dtors+0x38>
 8005dd8:	e0bfff17 	ldw	r2,-4(fp)
 8005ddc:	10800017 	ldw	r2,0(r2)
 8005de0:	103ee83a 	callr	r2
 8005de4:	e0bfff17 	ldw	r2,-4(fp)
 8005de8:	10bfff04 	addi	r2,r2,-4
 8005dec:	e0bfff15 	stw	r2,-4(fp)
 8005df0:	e0ffff17 	ldw	r3,-4(fp)
 8005df4:	00820034 	movhi	r2,2048
 8005df8:	109b5104 	addi	r2,r2,27972
 8005dfc:	18bff62e 	bgeu	r3,r2,8005dd8 <_do_dtors+0x20>
 8005e00:	0001883a 	nop
 8005e04:	e037883a 	mov	sp,fp
 8005e08:	dfc00117 	ldw	ra,4(sp)
 8005e0c:	df000017 	ldw	fp,0(sp)
 8005e10:	dec00204 	addi	sp,sp,8
 8005e14:	f800283a 	ret

08005e18 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8005e18:	defffe04 	addi	sp,sp,-8
 8005e1c:	dfc00115 	stw	ra,4(sp)
 8005e20:	df000015 	stw	fp,0(sp)
 8005e24:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8005e28:	01440004 	movi	r5,4096
 8005e2c:	0009883a 	mov	r4,zero
 8005e30:	80068840 	call	8006884 <alt_icache_flush>
#endif
}
 8005e34:	0001883a 	nop
 8005e38:	e037883a 	mov	sp,fp
 8005e3c:	dfc00117 	ldw	ra,4(sp)
 8005e40:	df000017 	ldw	fp,0(sp)
 8005e44:	dec00204 	addi	sp,sp,8
 8005e48:	f800283a 	ret

08005e4c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005e4c:	defff904 	addi	sp,sp,-28
 8005e50:	dfc00615 	stw	ra,24(sp)
 8005e54:	df000515 	stw	fp,20(sp)
 8005e58:	df000504 	addi	fp,sp,20
 8005e5c:	e13ffc15 	stw	r4,-16(fp)
 8005e60:	e17ffd15 	stw	r5,-12(fp)
 8005e64:	e1bffe15 	stw	r6,-8(fp)
 8005e68:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8005e6c:	e0800217 	ldw	r2,8(fp)
 8005e70:	d8800015 	stw	r2,0(sp)
 8005e74:	e1ffff17 	ldw	r7,-4(fp)
 8005e78:	e1bffe17 	ldw	r6,-8(fp)
 8005e7c:	e17ffd17 	ldw	r5,-12(fp)
 8005e80:	e13ffc17 	ldw	r4,-16(fp)
 8005e84:	8005ffc0 	call	8005ffc <alt_iic_isr_register>
}  
 8005e88:	e037883a 	mov	sp,fp
 8005e8c:	dfc00117 	ldw	ra,4(sp)
 8005e90:	df000017 	ldw	fp,0(sp)
 8005e94:	dec00204 	addi	sp,sp,8
 8005e98:	f800283a 	ret

08005e9c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8005e9c:	defff904 	addi	sp,sp,-28
 8005ea0:	df000615 	stw	fp,24(sp)
 8005ea4:	df000604 	addi	fp,sp,24
 8005ea8:	e13ffe15 	stw	r4,-8(fp)
 8005eac:	e17fff15 	stw	r5,-4(fp)
 8005eb0:	e0bfff17 	ldw	r2,-4(fp)
 8005eb4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005eb8:	0005303a 	rdctl	r2,status
 8005ebc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005ec0:	e0fffb17 	ldw	r3,-20(fp)
 8005ec4:	00bfff84 	movi	r2,-2
 8005ec8:	1884703a 	and	r2,r3,r2
 8005ecc:	1001703a 	wrctl	status,r2
  
  return context;
 8005ed0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005ed4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8005ed8:	00c00044 	movi	r3,1
 8005edc:	e0bffa17 	ldw	r2,-24(fp)
 8005ee0:	1884983a 	sll	r2,r3,r2
 8005ee4:	1007883a 	mov	r3,r2
 8005ee8:	d0a6b017 	ldw	r2,-25920(gp)
 8005eec:	1884b03a 	or	r2,r3,r2
 8005ef0:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005ef4:	d0a6b017 	ldw	r2,-25920(gp)
 8005ef8:	100170fa 	wrctl	ienable,r2
 8005efc:	e0bffc17 	ldw	r2,-16(fp)
 8005f00:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005f04:	e0bffd17 	ldw	r2,-12(fp)
 8005f08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005f0c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8005f10:	0001883a 	nop
}
 8005f14:	e037883a 	mov	sp,fp
 8005f18:	df000017 	ldw	fp,0(sp)
 8005f1c:	dec00104 	addi	sp,sp,4
 8005f20:	f800283a 	ret

08005f24 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8005f24:	defff904 	addi	sp,sp,-28
 8005f28:	df000615 	stw	fp,24(sp)
 8005f2c:	df000604 	addi	fp,sp,24
 8005f30:	e13ffe15 	stw	r4,-8(fp)
 8005f34:	e17fff15 	stw	r5,-4(fp)
 8005f38:	e0bfff17 	ldw	r2,-4(fp)
 8005f3c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005f40:	0005303a 	rdctl	r2,status
 8005f44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005f48:	e0fffb17 	ldw	r3,-20(fp)
 8005f4c:	00bfff84 	movi	r2,-2
 8005f50:	1884703a 	and	r2,r3,r2
 8005f54:	1001703a 	wrctl	status,r2
  
  return context;
 8005f58:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005f5c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8005f60:	00c00044 	movi	r3,1
 8005f64:	e0bffa17 	ldw	r2,-24(fp)
 8005f68:	1884983a 	sll	r2,r3,r2
 8005f6c:	0084303a 	nor	r2,zero,r2
 8005f70:	1007883a 	mov	r3,r2
 8005f74:	d0a6b017 	ldw	r2,-25920(gp)
 8005f78:	1884703a 	and	r2,r3,r2
 8005f7c:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005f80:	d0a6b017 	ldw	r2,-25920(gp)
 8005f84:	100170fa 	wrctl	ienable,r2
 8005f88:	e0bffc17 	ldw	r2,-16(fp)
 8005f8c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005f90:	e0bffd17 	ldw	r2,-12(fp)
 8005f94:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005f98:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8005f9c:	0001883a 	nop
}
 8005fa0:	e037883a 	mov	sp,fp
 8005fa4:	df000017 	ldw	fp,0(sp)
 8005fa8:	dec00104 	addi	sp,sp,4
 8005fac:	f800283a 	ret

08005fb0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8005fb0:	defffc04 	addi	sp,sp,-16
 8005fb4:	df000315 	stw	fp,12(sp)
 8005fb8:	df000304 	addi	fp,sp,12
 8005fbc:	e13ffe15 	stw	r4,-8(fp)
 8005fc0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8005fc4:	000530fa 	rdctl	r2,ienable
 8005fc8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8005fcc:	00c00044 	movi	r3,1
 8005fd0:	e0bfff17 	ldw	r2,-4(fp)
 8005fd4:	1884983a 	sll	r2,r3,r2
 8005fd8:	1007883a 	mov	r3,r2
 8005fdc:	e0bffd17 	ldw	r2,-12(fp)
 8005fe0:	1884703a 	and	r2,r3,r2
 8005fe4:	1004c03a 	cmpne	r2,r2,zero
 8005fe8:	10803fcc 	andi	r2,r2,255
}
 8005fec:	e037883a 	mov	sp,fp
 8005ff0:	df000017 	ldw	fp,0(sp)
 8005ff4:	dec00104 	addi	sp,sp,4
 8005ff8:	f800283a 	ret

08005ffc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005ffc:	defff504 	addi	sp,sp,-44
 8006000:	dfc00a15 	stw	ra,40(sp)
 8006004:	df000915 	stw	fp,36(sp)
 8006008:	df000904 	addi	fp,sp,36
 800600c:	e13ffc15 	stw	r4,-16(fp)
 8006010:	e17ffd15 	stw	r5,-12(fp)
 8006014:	e1bffe15 	stw	r6,-8(fp)
 8006018:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800601c:	00bffa84 	movi	r2,-22
 8006020:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8006024:	e0bffd17 	ldw	r2,-12(fp)
 8006028:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800602c:	e0bff817 	ldw	r2,-32(fp)
 8006030:	10800808 	cmpgei	r2,r2,32
 8006034:	1000271e 	bne	r2,zero,80060d4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006038:	0005303a 	rdctl	r2,status
 800603c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006040:	e0fffb17 	ldw	r3,-20(fp)
 8006044:	00bfff84 	movi	r2,-2
 8006048:	1884703a 	and	r2,r3,r2
 800604c:	1001703a 	wrctl	status,r2
  
  return context;
 8006050:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8006054:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8006058:	00820074 	movhi	r2,2049
 800605c:	10a8d004 	addi	r2,r2,-23744
 8006060:	e0fff817 	ldw	r3,-32(fp)
 8006064:	180690fa 	slli	r3,r3,3
 8006068:	10c5883a 	add	r2,r2,r3
 800606c:	e0fffe17 	ldw	r3,-8(fp)
 8006070:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8006074:	00820074 	movhi	r2,2049
 8006078:	10a8d004 	addi	r2,r2,-23744
 800607c:	e0fff817 	ldw	r3,-32(fp)
 8006080:	180690fa 	slli	r3,r3,3
 8006084:	10c5883a 	add	r2,r2,r3
 8006088:	10800104 	addi	r2,r2,4
 800608c:	e0ffff17 	ldw	r3,-4(fp)
 8006090:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8006094:	e0bffe17 	ldw	r2,-8(fp)
 8006098:	10000526 	beq	r2,zero,80060b0 <alt_iic_isr_register+0xb4>
 800609c:	e0bff817 	ldw	r2,-32(fp)
 80060a0:	100b883a 	mov	r5,r2
 80060a4:	e13ffc17 	ldw	r4,-16(fp)
 80060a8:	8005e9c0 	call	8005e9c <alt_ic_irq_enable>
 80060ac:	00000406 	br	80060c0 <alt_iic_isr_register+0xc4>
 80060b0:	e0bff817 	ldw	r2,-32(fp)
 80060b4:	100b883a 	mov	r5,r2
 80060b8:	e13ffc17 	ldw	r4,-16(fp)
 80060bc:	8005f240 	call	8005f24 <alt_ic_irq_disable>
 80060c0:	e0bff715 	stw	r2,-36(fp)
 80060c4:	e0bffa17 	ldw	r2,-24(fp)
 80060c8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80060cc:	e0bff917 	ldw	r2,-28(fp)
 80060d0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80060d4:	e0bff717 	ldw	r2,-36(fp)
}
 80060d8:	e037883a 	mov	sp,fp
 80060dc:	dfc00117 	ldw	ra,4(sp)
 80060e0:	df000017 	ldw	fp,0(sp)
 80060e4:	dec00204 	addi	sp,sp,8
 80060e8:	f800283a 	ret

080060ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80060ec:	defff904 	addi	sp,sp,-28
 80060f0:	dfc00615 	stw	ra,24(sp)
 80060f4:	df000515 	stw	fp,20(sp)
 80060f8:	df000504 	addi	fp,sp,20
 80060fc:	e13ffc15 	stw	r4,-16(fp)
 8006100:	e17ffd15 	stw	r5,-12(fp)
 8006104:	e1bffe15 	stw	r6,-8(fp)
 8006108:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800610c:	e1bfff17 	ldw	r6,-4(fp)
 8006110:	e17ffe17 	ldw	r5,-8(fp)
 8006114:	e13ffd17 	ldw	r4,-12(fp)
 8006118:	800632c0 	call	800632c <open>
 800611c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8006120:	e0bffb17 	ldw	r2,-20(fp)
 8006124:	10001c16 	blt	r2,zero,8006198 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8006128:	00820034 	movhi	r2,2048
 800612c:	109d8b04 	addi	r2,r2,30252
 8006130:	e0fffb17 	ldw	r3,-20(fp)
 8006134:	18c00324 	muli	r3,r3,12
 8006138:	10c5883a 	add	r2,r2,r3
 800613c:	10c00017 	ldw	r3,0(r2)
 8006140:	e0bffc17 	ldw	r2,-16(fp)
 8006144:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8006148:	00820034 	movhi	r2,2048
 800614c:	109d8b04 	addi	r2,r2,30252
 8006150:	e0fffb17 	ldw	r3,-20(fp)
 8006154:	18c00324 	muli	r3,r3,12
 8006158:	10c5883a 	add	r2,r2,r3
 800615c:	10800104 	addi	r2,r2,4
 8006160:	10c00017 	ldw	r3,0(r2)
 8006164:	e0bffc17 	ldw	r2,-16(fp)
 8006168:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800616c:	00820034 	movhi	r2,2048
 8006170:	109d8b04 	addi	r2,r2,30252
 8006174:	e0fffb17 	ldw	r3,-20(fp)
 8006178:	18c00324 	muli	r3,r3,12
 800617c:	10c5883a 	add	r2,r2,r3
 8006180:	10800204 	addi	r2,r2,8
 8006184:	10c00017 	ldw	r3,0(r2)
 8006188:	e0bffc17 	ldw	r2,-16(fp)
 800618c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8006190:	e13ffb17 	ldw	r4,-20(fp)
 8006194:	8004c180 	call	8004c18 <alt_release_fd>
  }
} 
 8006198:	0001883a 	nop
 800619c:	e037883a 	mov	sp,fp
 80061a0:	dfc00117 	ldw	ra,4(sp)
 80061a4:	df000017 	ldw	fp,0(sp)
 80061a8:	dec00204 	addi	sp,sp,8
 80061ac:	f800283a 	ret

080061b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80061b0:	defffb04 	addi	sp,sp,-20
 80061b4:	dfc00415 	stw	ra,16(sp)
 80061b8:	df000315 	stw	fp,12(sp)
 80061bc:	df000304 	addi	fp,sp,12
 80061c0:	e13ffd15 	stw	r4,-12(fp)
 80061c4:	e17ffe15 	stw	r5,-8(fp)
 80061c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80061cc:	01c07fc4 	movi	r7,511
 80061d0:	01800044 	movi	r6,1
 80061d4:	e17ffd17 	ldw	r5,-12(fp)
 80061d8:	01020034 	movhi	r4,2048
 80061dc:	211d8e04 	addi	r4,r4,30264
 80061e0:	80060ec0 	call	80060ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80061e4:	01c07fc4 	movi	r7,511
 80061e8:	000d883a 	mov	r6,zero
 80061ec:	e17ffe17 	ldw	r5,-8(fp)
 80061f0:	01020034 	movhi	r4,2048
 80061f4:	211d8b04 	addi	r4,r4,30252
 80061f8:	80060ec0 	call	80060ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80061fc:	01c07fc4 	movi	r7,511
 8006200:	01800044 	movi	r6,1
 8006204:	e17fff17 	ldw	r5,-4(fp)
 8006208:	01020034 	movhi	r4,2048
 800620c:	211d9104 	addi	r4,r4,30276
 8006210:	80060ec0 	call	80060ec <alt_open_fd>
}  
 8006214:	0001883a 	nop
 8006218:	e037883a 	mov	sp,fp
 800621c:	dfc00117 	ldw	ra,4(sp)
 8006220:	df000017 	ldw	fp,0(sp)
 8006224:	dec00204 	addi	sp,sp,8
 8006228:	f800283a 	ret

0800622c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800622c:	defffe04 	addi	sp,sp,-8
 8006230:	dfc00115 	stw	ra,4(sp)
 8006234:	df000015 	stw	fp,0(sp)
 8006238:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800623c:	d0a00917 	ldw	r2,-32732(gp)
 8006240:	10000326 	beq	r2,zero,8006250 <alt_get_errno+0x24>
 8006244:	d0a00917 	ldw	r2,-32732(gp)
 8006248:	103ee83a 	callr	r2
 800624c:	00000106 	br	8006254 <alt_get_errno+0x28>
 8006250:	d0a6ac04 	addi	r2,gp,-25936
}
 8006254:	e037883a 	mov	sp,fp
 8006258:	dfc00117 	ldw	ra,4(sp)
 800625c:	df000017 	ldw	fp,0(sp)
 8006260:	dec00204 	addi	sp,sp,8
 8006264:	f800283a 	ret

08006268 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8006268:	defffd04 	addi	sp,sp,-12
 800626c:	df000215 	stw	fp,8(sp)
 8006270:	df000204 	addi	fp,sp,8
 8006274:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8006278:	e0bfff17 	ldw	r2,-4(fp)
 800627c:	10800217 	ldw	r2,8(r2)
 8006280:	10d00034 	orhi	r3,r2,16384
 8006284:	e0bfff17 	ldw	r2,-4(fp)
 8006288:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800628c:	e03ffe15 	stw	zero,-8(fp)
 8006290:	00001d06 	br	8006308 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8006294:	00820034 	movhi	r2,2048
 8006298:	109d8b04 	addi	r2,r2,30252
 800629c:	e0fffe17 	ldw	r3,-8(fp)
 80062a0:	18c00324 	muli	r3,r3,12
 80062a4:	10c5883a 	add	r2,r2,r3
 80062a8:	10c00017 	ldw	r3,0(r2)
 80062ac:	e0bfff17 	ldw	r2,-4(fp)
 80062b0:	10800017 	ldw	r2,0(r2)
 80062b4:	1880111e 	bne	r3,r2,80062fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80062b8:	00820034 	movhi	r2,2048
 80062bc:	109d8b04 	addi	r2,r2,30252
 80062c0:	e0fffe17 	ldw	r3,-8(fp)
 80062c4:	18c00324 	muli	r3,r3,12
 80062c8:	10c5883a 	add	r2,r2,r3
 80062cc:	10800204 	addi	r2,r2,8
 80062d0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80062d4:	1000090e 	bge	r2,zero,80062fc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80062d8:	e0bffe17 	ldw	r2,-8(fp)
 80062dc:	10c00324 	muli	r3,r2,12
 80062e0:	00820034 	movhi	r2,2048
 80062e4:	109d8b04 	addi	r2,r2,30252
 80062e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80062ec:	e0bfff17 	ldw	r2,-4(fp)
 80062f0:	18800226 	beq	r3,r2,80062fc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80062f4:	00bffcc4 	movi	r2,-13
 80062f8:	00000806 	br	800631c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80062fc:	e0bffe17 	ldw	r2,-8(fp)
 8006300:	10800044 	addi	r2,r2,1
 8006304:	e0bffe15 	stw	r2,-8(fp)
 8006308:	d0a00817 	ldw	r2,-32736(gp)
 800630c:	1007883a 	mov	r3,r2
 8006310:	e0bffe17 	ldw	r2,-8(fp)
 8006314:	18bfdf2e 	bgeu	r3,r2,8006294 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8006318:	0005883a 	mov	r2,zero
}
 800631c:	e037883a 	mov	sp,fp
 8006320:	df000017 	ldw	fp,0(sp)
 8006324:	dec00104 	addi	sp,sp,4
 8006328:	f800283a 	ret

0800632c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800632c:	defff604 	addi	sp,sp,-40
 8006330:	dfc00915 	stw	ra,36(sp)
 8006334:	df000815 	stw	fp,32(sp)
 8006338:	df000804 	addi	fp,sp,32
 800633c:	e13ffd15 	stw	r4,-12(fp)
 8006340:	e17ffe15 	stw	r5,-8(fp)
 8006344:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8006348:	00bfffc4 	movi	r2,-1
 800634c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8006350:	00bffb44 	movi	r2,-19
 8006354:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8006358:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800635c:	d1600604 	addi	r5,gp,-32744
 8006360:	e13ffd17 	ldw	r4,-12(fp)
 8006364:	80066480 	call	8006648 <alt_find_dev>
 8006368:	e0bff815 	stw	r2,-32(fp)
 800636c:	e0bff817 	ldw	r2,-32(fp)
 8006370:	1000051e 	bne	r2,zero,8006388 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8006374:	e13ffd17 	ldw	r4,-12(fp)
 8006378:	80066d80 	call	80066d8 <alt_find_file>
 800637c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8006380:	00800044 	movi	r2,1
 8006384:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8006388:	e0bff817 	ldw	r2,-32(fp)
 800638c:	10002926 	beq	r2,zero,8006434 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8006390:	e13ff817 	ldw	r4,-32(fp)
 8006394:	80067e00 	call	80067e0 <alt_get_fd>
 8006398:	e0bff915 	stw	r2,-28(fp)
 800639c:	e0bff917 	ldw	r2,-28(fp)
 80063a0:	1000030e 	bge	r2,zero,80063b0 <open+0x84>
    {
      status = index;
 80063a4:	e0bff917 	ldw	r2,-28(fp)
 80063a8:	e0bffa15 	stw	r2,-24(fp)
 80063ac:	00002306 	br	800643c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80063b0:	e0bff917 	ldw	r2,-28(fp)
 80063b4:	10c00324 	muli	r3,r2,12
 80063b8:	00820034 	movhi	r2,2048
 80063bc:	109d8b04 	addi	r2,r2,30252
 80063c0:	1885883a 	add	r2,r3,r2
 80063c4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80063c8:	e0fffe17 	ldw	r3,-8(fp)
 80063cc:	00900034 	movhi	r2,16384
 80063d0:	10bfffc4 	addi	r2,r2,-1
 80063d4:	1886703a 	and	r3,r3,r2
 80063d8:	e0bffc17 	ldw	r2,-16(fp)
 80063dc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80063e0:	e0bffb17 	ldw	r2,-20(fp)
 80063e4:	1000051e 	bne	r2,zero,80063fc <open+0xd0>
 80063e8:	e13ffc17 	ldw	r4,-16(fp)
 80063ec:	80062680 	call	8006268 <alt_file_locked>
 80063f0:	e0bffa15 	stw	r2,-24(fp)
 80063f4:	e0bffa17 	ldw	r2,-24(fp)
 80063f8:	10001016 	blt	r2,zero,800643c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80063fc:	e0bff817 	ldw	r2,-32(fp)
 8006400:	10800317 	ldw	r2,12(r2)
 8006404:	10000826 	beq	r2,zero,8006428 <open+0xfc>
 8006408:	e0bff817 	ldw	r2,-32(fp)
 800640c:	10800317 	ldw	r2,12(r2)
 8006410:	e1ffff17 	ldw	r7,-4(fp)
 8006414:	e1bffe17 	ldw	r6,-8(fp)
 8006418:	e17ffd17 	ldw	r5,-12(fp)
 800641c:	e13ffc17 	ldw	r4,-16(fp)
 8006420:	103ee83a 	callr	r2
 8006424:	00000106 	br	800642c <open+0x100>
 8006428:	0005883a 	mov	r2,zero
 800642c:	e0bffa15 	stw	r2,-24(fp)
 8006430:	00000206 	br	800643c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8006434:	00bffb44 	movi	r2,-19
 8006438:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800643c:	e0bffa17 	ldw	r2,-24(fp)
 8006440:	1000090e 	bge	r2,zero,8006468 <open+0x13c>
  {
    alt_release_fd (index);  
 8006444:	e13ff917 	ldw	r4,-28(fp)
 8006448:	8004c180 	call	8004c18 <alt_release_fd>
    ALT_ERRNO = -status;
 800644c:	800622c0 	call	800622c <alt_get_errno>
 8006450:	1007883a 	mov	r3,r2
 8006454:	e0bffa17 	ldw	r2,-24(fp)
 8006458:	0085c83a 	sub	r2,zero,r2
 800645c:	18800015 	stw	r2,0(r3)
    return -1;
 8006460:	00bfffc4 	movi	r2,-1
 8006464:	00000106 	br	800646c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8006468:	e0bff917 	ldw	r2,-28(fp)
}
 800646c:	e037883a 	mov	sp,fp
 8006470:	dfc00117 	ldw	ra,4(sp)
 8006474:	df000017 	ldw	fp,0(sp)
 8006478:	dec00204 	addi	sp,sp,8
 800647c:	f800283a 	ret

08006480 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8006480:	defffa04 	addi	sp,sp,-24
 8006484:	df000515 	stw	fp,20(sp)
 8006488:	df000504 	addi	fp,sp,20
 800648c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006490:	0005303a 	rdctl	r2,status
 8006494:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006498:	e0fffc17 	ldw	r3,-16(fp)
 800649c:	00bfff84 	movi	r2,-2
 80064a0:	1884703a 	and	r2,r3,r2
 80064a4:	1001703a 	wrctl	status,r2
  
  return context;
 80064a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80064ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80064b0:	e0bfff17 	ldw	r2,-4(fp)
 80064b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80064b8:	e0bffd17 	ldw	r2,-12(fp)
 80064bc:	10800017 	ldw	r2,0(r2)
 80064c0:	e0fffd17 	ldw	r3,-12(fp)
 80064c4:	18c00117 	ldw	r3,4(r3)
 80064c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80064cc:	e0bffd17 	ldw	r2,-12(fp)
 80064d0:	10800117 	ldw	r2,4(r2)
 80064d4:	e0fffd17 	ldw	r3,-12(fp)
 80064d8:	18c00017 	ldw	r3,0(r3)
 80064dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80064e0:	e0bffd17 	ldw	r2,-12(fp)
 80064e4:	e0fffd17 	ldw	r3,-12(fp)
 80064e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80064ec:	e0bffd17 	ldw	r2,-12(fp)
 80064f0:	e0fffd17 	ldw	r3,-12(fp)
 80064f4:	10c00015 	stw	r3,0(r2)
 80064f8:	e0bffb17 	ldw	r2,-20(fp)
 80064fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006500:	e0bffe17 	ldw	r2,-8(fp)
 8006504:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8006508:	0001883a 	nop
 800650c:	e037883a 	mov	sp,fp
 8006510:	df000017 	ldw	fp,0(sp)
 8006514:	dec00104 	addi	sp,sp,4
 8006518:	f800283a 	ret

0800651c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800651c:	defffb04 	addi	sp,sp,-20
 8006520:	dfc00415 	stw	ra,16(sp)
 8006524:	df000315 	stw	fp,12(sp)
 8006528:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800652c:	d0a00c17 	ldw	r2,-32720(gp)
 8006530:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8006534:	d0a6b217 	ldw	r2,-25912(gp)
 8006538:	10800044 	addi	r2,r2,1
 800653c:	d0a6b215 	stw	r2,-25912(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8006540:	00002e06 	br	80065fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8006544:	e0bffd17 	ldw	r2,-12(fp)
 8006548:	10800017 	ldw	r2,0(r2)
 800654c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8006550:	e0bffd17 	ldw	r2,-12(fp)
 8006554:	10800403 	ldbu	r2,16(r2)
 8006558:	10803fcc 	andi	r2,r2,255
 800655c:	10000426 	beq	r2,zero,8006570 <alt_tick+0x54>
 8006560:	d0a6b217 	ldw	r2,-25912(gp)
 8006564:	1000021e 	bne	r2,zero,8006570 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8006568:	e0bffd17 	ldw	r2,-12(fp)
 800656c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8006570:	e0bffd17 	ldw	r2,-12(fp)
 8006574:	10800217 	ldw	r2,8(r2)
 8006578:	d0e6b217 	ldw	r3,-25912(gp)
 800657c:	18801d36 	bltu	r3,r2,80065f4 <alt_tick+0xd8>
 8006580:	e0bffd17 	ldw	r2,-12(fp)
 8006584:	10800403 	ldbu	r2,16(r2)
 8006588:	10803fcc 	andi	r2,r2,255
 800658c:	1000191e 	bne	r2,zero,80065f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8006590:	e0bffd17 	ldw	r2,-12(fp)
 8006594:	10800317 	ldw	r2,12(r2)
 8006598:	e0fffd17 	ldw	r3,-12(fp)
 800659c:	18c00517 	ldw	r3,20(r3)
 80065a0:	1809883a 	mov	r4,r3
 80065a4:	103ee83a 	callr	r2
 80065a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80065ac:	e0bfff17 	ldw	r2,-4(fp)
 80065b0:	1000031e 	bne	r2,zero,80065c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80065b4:	e13ffd17 	ldw	r4,-12(fp)
 80065b8:	80064800 	call	8006480 <alt_alarm_stop>
 80065bc:	00000d06 	br	80065f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80065c0:	e0bffd17 	ldw	r2,-12(fp)
 80065c4:	10c00217 	ldw	r3,8(r2)
 80065c8:	e0bfff17 	ldw	r2,-4(fp)
 80065cc:	1887883a 	add	r3,r3,r2
 80065d0:	e0bffd17 	ldw	r2,-12(fp)
 80065d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80065d8:	e0bffd17 	ldw	r2,-12(fp)
 80065dc:	10c00217 	ldw	r3,8(r2)
 80065e0:	d0a6b217 	ldw	r2,-25912(gp)
 80065e4:	1880032e 	bgeu	r3,r2,80065f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80065e8:	e0bffd17 	ldw	r2,-12(fp)
 80065ec:	00c00044 	movi	r3,1
 80065f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80065f4:	e0bffe17 	ldw	r2,-8(fp)
 80065f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80065fc:	e0fffd17 	ldw	r3,-12(fp)
 8006600:	d0a00c04 	addi	r2,gp,-32720
 8006604:	18bfcf1e 	bne	r3,r2,8006544 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8006608:	0001883a 	nop
}
 800660c:	0001883a 	nop
 8006610:	e037883a 	mov	sp,fp
 8006614:	dfc00117 	ldw	ra,4(sp)
 8006618:	df000017 	ldw	fp,0(sp)
 800661c:	dec00204 	addi	sp,sp,8
 8006620:	f800283a 	ret

08006624 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8006624:	deffff04 	addi	sp,sp,-4
 8006628:	df000015 	stw	fp,0(sp)
 800662c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8006630:	000170fa 	wrctl	ienable,zero
}
 8006634:	0001883a 	nop
 8006638:	e037883a 	mov	sp,fp
 800663c:	df000017 	ldw	fp,0(sp)
 8006640:	dec00104 	addi	sp,sp,4
 8006644:	f800283a 	ret

08006648 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8006648:	defffa04 	addi	sp,sp,-24
 800664c:	dfc00515 	stw	ra,20(sp)
 8006650:	df000415 	stw	fp,16(sp)
 8006654:	df000404 	addi	fp,sp,16
 8006658:	e13ffe15 	stw	r4,-8(fp)
 800665c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006660:	e0bfff17 	ldw	r2,-4(fp)
 8006664:	10800017 	ldw	r2,0(r2)
 8006668:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800666c:	e13ffe17 	ldw	r4,-8(fp)
 8006670:	800197c0 	call	800197c <strlen>
 8006674:	10800044 	addi	r2,r2,1
 8006678:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800667c:	00000d06 	br	80066b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8006680:	e0bffc17 	ldw	r2,-16(fp)
 8006684:	10800217 	ldw	r2,8(r2)
 8006688:	e0fffd17 	ldw	r3,-12(fp)
 800668c:	180d883a 	mov	r6,r3
 8006690:	e17ffe17 	ldw	r5,-8(fp)
 8006694:	1009883a 	mov	r4,r2
 8006698:	80069fc0 	call	80069fc <memcmp>
 800669c:	1000021e 	bne	r2,zero,80066a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80066a0:	e0bffc17 	ldw	r2,-16(fp)
 80066a4:	00000706 	br	80066c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80066a8:	e0bffc17 	ldw	r2,-16(fp)
 80066ac:	10800017 	ldw	r2,0(r2)
 80066b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80066b4:	e0fffc17 	ldw	r3,-16(fp)
 80066b8:	e0bfff17 	ldw	r2,-4(fp)
 80066bc:	18bff01e 	bne	r3,r2,8006680 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80066c0:	0005883a 	mov	r2,zero
}
 80066c4:	e037883a 	mov	sp,fp
 80066c8:	dfc00117 	ldw	ra,4(sp)
 80066cc:	df000017 	ldw	fp,0(sp)
 80066d0:	dec00204 	addi	sp,sp,8
 80066d4:	f800283a 	ret

080066d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80066d8:	defffb04 	addi	sp,sp,-20
 80066dc:	dfc00415 	stw	ra,16(sp)
 80066e0:	df000315 	stw	fp,12(sp)
 80066e4:	df000304 	addi	fp,sp,12
 80066e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80066ec:	d0a00417 	ldw	r2,-32752(gp)
 80066f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80066f4:	00003106 	br	80067bc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80066f8:	e0bffd17 	ldw	r2,-12(fp)
 80066fc:	10800217 	ldw	r2,8(r2)
 8006700:	1009883a 	mov	r4,r2
 8006704:	800197c0 	call	800197c <strlen>
 8006708:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800670c:	e0bffd17 	ldw	r2,-12(fp)
 8006710:	10c00217 	ldw	r3,8(r2)
 8006714:	e0bffe17 	ldw	r2,-8(fp)
 8006718:	10bfffc4 	addi	r2,r2,-1
 800671c:	1885883a 	add	r2,r3,r2
 8006720:	10800003 	ldbu	r2,0(r2)
 8006724:	10803fcc 	andi	r2,r2,255
 8006728:	1080201c 	xori	r2,r2,128
 800672c:	10bfe004 	addi	r2,r2,-128
 8006730:	10800bd8 	cmpnei	r2,r2,47
 8006734:	1000031e 	bne	r2,zero,8006744 <alt_find_file+0x6c>
    {
      len -= 1;
 8006738:	e0bffe17 	ldw	r2,-8(fp)
 800673c:	10bfffc4 	addi	r2,r2,-1
 8006740:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8006744:	e0bffe17 	ldw	r2,-8(fp)
 8006748:	e0ffff17 	ldw	r3,-4(fp)
 800674c:	1885883a 	add	r2,r3,r2
 8006750:	10800003 	ldbu	r2,0(r2)
 8006754:	10803fcc 	andi	r2,r2,255
 8006758:	1080201c 	xori	r2,r2,128
 800675c:	10bfe004 	addi	r2,r2,-128
 8006760:	10800be0 	cmpeqi	r2,r2,47
 8006764:	1000081e 	bne	r2,zero,8006788 <alt_find_file+0xb0>
 8006768:	e0bffe17 	ldw	r2,-8(fp)
 800676c:	e0ffff17 	ldw	r3,-4(fp)
 8006770:	1885883a 	add	r2,r3,r2
 8006774:	10800003 	ldbu	r2,0(r2)
 8006778:	10803fcc 	andi	r2,r2,255
 800677c:	1080201c 	xori	r2,r2,128
 8006780:	10bfe004 	addi	r2,r2,-128
 8006784:	10000a1e 	bne	r2,zero,80067b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8006788:	e0bffd17 	ldw	r2,-12(fp)
 800678c:	10800217 	ldw	r2,8(r2)
 8006790:	e0fffe17 	ldw	r3,-8(fp)
 8006794:	180d883a 	mov	r6,r3
 8006798:	e17fff17 	ldw	r5,-4(fp)
 800679c:	1009883a 	mov	r4,r2
 80067a0:	80069fc0 	call	80069fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80067a4:	1000021e 	bne	r2,zero,80067b0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80067a8:	e0bffd17 	ldw	r2,-12(fp)
 80067ac:	00000706 	br	80067cc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 80067b0:	e0bffd17 	ldw	r2,-12(fp)
 80067b4:	10800017 	ldw	r2,0(r2)
 80067b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80067bc:	e0fffd17 	ldw	r3,-12(fp)
 80067c0:	d0a00404 	addi	r2,gp,-32752
 80067c4:	18bfcc1e 	bne	r3,r2,80066f8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80067c8:	0005883a 	mov	r2,zero
}
 80067cc:	e037883a 	mov	sp,fp
 80067d0:	dfc00117 	ldw	ra,4(sp)
 80067d4:	df000017 	ldw	fp,0(sp)
 80067d8:	dec00204 	addi	sp,sp,8
 80067dc:	f800283a 	ret

080067e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80067e0:	defffc04 	addi	sp,sp,-16
 80067e4:	df000315 	stw	fp,12(sp)
 80067e8:	df000304 	addi	fp,sp,12
 80067ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80067f0:	00bffa04 	movi	r2,-24
 80067f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80067f8:	e03ffd15 	stw	zero,-12(fp)
 80067fc:	00001906 	br	8006864 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8006800:	00820034 	movhi	r2,2048
 8006804:	109d8b04 	addi	r2,r2,30252
 8006808:	e0fffd17 	ldw	r3,-12(fp)
 800680c:	18c00324 	muli	r3,r3,12
 8006810:	10c5883a 	add	r2,r2,r3
 8006814:	10800017 	ldw	r2,0(r2)
 8006818:	10000f1e 	bne	r2,zero,8006858 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 800681c:	00820034 	movhi	r2,2048
 8006820:	109d8b04 	addi	r2,r2,30252
 8006824:	e0fffd17 	ldw	r3,-12(fp)
 8006828:	18c00324 	muli	r3,r3,12
 800682c:	10c5883a 	add	r2,r2,r3
 8006830:	e0ffff17 	ldw	r3,-4(fp)
 8006834:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8006838:	d0e00817 	ldw	r3,-32736(gp)
 800683c:	e0bffd17 	ldw	r2,-12(fp)
 8006840:	1880020e 	bge	r3,r2,800684c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8006844:	e0bffd17 	ldw	r2,-12(fp)
 8006848:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 800684c:	e0bffd17 	ldw	r2,-12(fp)
 8006850:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8006854:	00000606 	br	8006870 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006858:	e0bffd17 	ldw	r2,-12(fp)
 800685c:	10800044 	addi	r2,r2,1
 8006860:	e0bffd15 	stw	r2,-12(fp)
 8006864:	e0bffd17 	ldw	r2,-12(fp)
 8006868:	10800810 	cmplti	r2,r2,32
 800686c:	103fe41e 	bne	r2,zero,8006800 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006870:	e0bffe17 	ldw	r2,-8(fp)
}
 8006874:	e037883a 	mov	sp,fp
 8006878:	df000017 	ldw	fp,0(sp)
 800687c:	dec00104 	addi	sp,sp,4
 8006880:	f800283a 	ret

08006884 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8006884:	defffb04 	addi	sp,sp,-20
 8006888:	df000415 	stw	fp,16(sp)
 800688c:	df000404 	addi	fp,sp,16
 8006890:	e13ffe15 	stw	r4,-8(fp)
 8006894:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8006898:	e0bfff17 	ldw	r2,-4(fp)
 800689c:	10840070 	cmpltui	r2,r2,4097
 80068a0:	1000021e 	bne	r2,zero,80068ac <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80068a4:	00840004 	movi	r2,4096
 80068a8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80068ac:	e0fffe17 	ldw	r3,-8(fp)
 80068b0:	e0bfff17 	ldw	r2,-4(fp)
 80068b4:	1885883a 	add	r2,r3,r2
 80068b8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80068bc:	e0bffe17 	ldw	r2,-8(fp)
 80068c0:	e0bffc15 	stw	r2,-16(fp)
 80068c4:	00000506 	br	80068dc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80068c8:	e0bffc17 	ldw	r2,-16(fp)
 80068cc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80068d0:	e0bffc17 	ldw	r2,-16(fp)
 80068d4:	10800804 	addi	r2,r2,32
 80068d8:	e0bffc15 	stw	r2,-16(fp)
 80068dc:	e0fffc17 	ldw	r3,-16(fp)
 80068e0:	e0bffd17 	ldw	r2,-12(fp)
 80068e4:	18bff836 	bltu	r3,r2,80068c8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80068e8:	e0bffe17 	ldw	r2,-8(fp)
 80068ec:	108007cc 	andi	r2,r2,31
 80068f0:	10000226 	beq	r2,zero,80068fc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80068f4:	e0bffc17 	ldw	r2,-16(fp)
 80068f8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80068fc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8006900:	0001883a 	nop
 8006904:	e037883a 	mov	sp,fp
 8006908:	df000017 	ldw	fp,0(sp)
 800690c:	dec00104 	addi	sp,sp,4
 8006910:	f800283a 	ret

08006914 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8006914:	defffe04 	addi	sp,sp,-8
 8006918:	df000115 	stw	fp,4(sp)
 800691c:	df000104 	addi	fp,sp,4
 8006920:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8006924:	e0bfff17 	ldw	r2,-4(fp)
 8006928:	10bffe84 	addi	r2,r2,-6
 800692c:	10c00428 	cmpgeui	r3,r2,16
 8006930:	18001a1e 	bne	r3,zero,800699c <alt_exception_cause_generated_bad_addr+0x88>
 8006934:	100690ba 	slli	r3,r2,2
 8006938:	00820034 	movhi	r2,2048
 800693c:	109a5304 	addi	r2,r2,26956
 8006940:	1885883a 	add	r2,r3,r2
 8006944:	10800017 	ldw	r2,0(r2)
 8006948:	1000683a 	jmp	r2
 800694c:	0800698c 	andi	zero,at,422
 8006950:	0800698c 	andi	zero,at,422
 8006954:	0800699c 	xori	zero,at,422
 8006958:	0800699c 	xori	zero,at,422
 800695c:	0800699c 	xori	zero,at,422
 8006960:	0800698c 	andi	zero,at,422
 8006964:	08006994 	ori	zero,at,422
 8006968:	0800699c 	xori	zero,at,422
 800696c:	0800698c 	andi	zero,at,422
 8006970:	0800698c 	andi	zero,at,422
 8006974:	0800699c 	xori	zero,at,422
 8006978:	0800698c 	andi	zero,at,422
 800697c:	08006994 	ori	zero,at,422
 8006980:	0800699c 	xori	zero,at,422
 8006984:	0800699c 	xori	zero,at,422
 8006988:	0800698c 	andi	zero,at,422
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800698c:	00800044 	movi	r2,1
 8006990:	00000306 	br	80069a0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8006994:	0005883a 	mov	r2,zero
 8006998:	00000106 	br	80069a0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800699c:	0005883a 	mov	r2,zero
  }
}
 80069a0:	e037883a 	mov	sp,fp
 80069a4:	df000017 	ldw	fp,0(sp)
 80069a8:	dec00104 	addi	sp,sp,4
 80069ac:	f800283a 	ret

080069b0 <atexit>:
 80069b0:	200b883a 	mov	r5,r4
 80069b4:	000f883a 	mov	r7,zero
 80069b8:	000d883a 	mov	r6,zero
 80069bc:	0009883a 	mov	r4,zero
 80069c0:	8006a781 	jmpi	8006a78 <__register_exitproc>

080069c4 <exit>:
 80069c4:	defffe04 	addi	sp,sp,-8
 80069c8:	000b883a 	mov	r5,zero
 80069cc:	dc000015 	stw	r16,0(sp)
 80069d0:	dfc00115 	stw	ra,4(sp)
 80069d4:	2021883a 	mov	r16,r4
 80069d8:	8006b900 	call	8006b90 <__call_exitprocs>
 80069dc:	00820074 	movhi	r2,2049
 80069e0:	10a20304 	addi	r2,r2,-30708
 80069e4:	11000017 	ldw	r4,0(r2)
 80069e8:	20800f17 	ldw	r2,60(r4)
 80069ec:	10000126 	beq	r2,zero,80069f4 <exit+0x30>
 80069f0:	103ee83a 	callr	r2
 80069f4:	8009883a 	mov	r4,r16
 80069f8:	8006d100 	call	8006d10 <_exit>

080069fc <memcmp>:
 80069fc:	01c000c4 	movi	r7,3
 8006a00:	3980192e 	bgeu	r7,r6,8006a68 <memcmp+0x6c>
 8006a04:	2144b03a 	or	r2,r4,r5
 8006a08:	11c4703a 	and	r2,r2,r7
 8006a0c:	10000f26 	beq	r2,zero,8006a4c <memcmp+0x50>
 8006a10:	20800003 	ldbu	r2,0(r4)
 8006a14:	28c00003 	ldbu	r3,0(r5)
 8006a18:	10c0151e 	bne	r2,r3,8006a70 <memcmp+0x74>
 8006a1c:	31bfff84 	addi	r6,r6,-2
 8006a20:	01ffffc4 	movi	r7,-1
 8006a24:	00000406 	br	8006a38 <memcmp+0x3c>
 8006a28:	20800003 	ldbu	r2,0(r4)
 8006a2c:	28c00003 	ldbu	r3,0(r5)
 8006a30:	31bfffc4 	addi	r6,r6,-1
 8006a34:	10c00e1e 	bne	r2,r3,8006a70 <memcmp+0x74>
 8006a38:	21000044 	addi	r4,r4,1
 8006a3c:	29400044 	addi	r5,r5,1
 8006a40:	31fff91e 	bne	r6,r7,8006a28 <memcmp+0x2c>
 8006a44:	0005883a 	mov	r2,zero
 8006a48:	f800283a 	ret
 8006a4c:	20c00017 	ldw	r3,0(r4)
 8006a50:	28800017 	ldw	r2,0(r5)
 8006a54:	18bfee1e 	bne	r3,r2,8006a10 <memcmp+0x14>
 8006a58:	31bfff04 	addi	r6,r6,-4
 8006a5c:	21000104 	addi	r4,r4,4
 8006a60:	29400104 	addi	r5,r5,4
 8006a64:	39bff936 	bltu	r7,r6,8006a4c <memcmp+0x50>
 8006a68:	303fe91e 	bne	r6,zero,8006a10 <memcmp+0x14>
 8006a6c:	003ff506 	br	8006a44 <memcmp+0x48>
 8006a70:	10c5c83a 	sub	r2,r2,r3
 8006a74:	f800283a 	ret

08006a78 <__register_exitproc>:
 8006a78:	defffa04 	addi	sp,sp,-24
 8006a7c:	dc000315 	stw	r16,12(sp)
 8006a80:	04020074 	movhi	r16,2049
 8006a84:	84220304 	addi	r16,r16,-30708
 8006a88:	80c00017 	ldw	r3,0(r16)
 8006a8c:	dc400415 	stw	r17,16(sp)
 8006a90:	dfc00515 	stw	ra,20(sp)
 8006a94:	18805217 	ldw	r2,328(r3)
 8006a98:	2023883a 	mov	r17,r4
 8006a9c:	10003726 	beq	r2,zero,8006b7c <__register_exitproc+0x104>
 8006aa0:	10c00117 	ldw	r3,4(r2)
 8006aa4:	010007c4 	movi	r4,31
 8006aa8:	20c00e16 	blt	r4,r3,8006ae4 <__register_exitproc+0x6c>
 8006aac:	1a000044 	addi	r8,r3,1
 8006ab0:	8800221e 	bne	r17,zero,8006b3c <__register_exitproc+0xc4>
 8006ab4:	18c00084 	addi	r3,r3,2
 8006ab8:	18c7883a 	add	r3,r3,r3
 8006abc:	18c7883a 	add	r3,r3,r3
 8006ac0:	12000115 	stw	r8,4(r2)
 8006ac4:	10c7883a 	add	r3,r2,r3
 8006ac8:	19400015 	stw	r5,0(r3)
 8006acc:	0005883a 	mov	r2,zero
 8006ad0:	dfc00517 	ldw	ra,20(sp)
 8006ad4:	dc400417 	ldw	r17,16(sp)
 8006ad8:	dc000317 	ldw	r16,12(sp)
 8006adc:	dec00604 	addi	sp,sp,24
 8006ae0:	f800283a 	ret
 8006ae4:	00800034 	movhi	r2,0
 8006ae8:	10800004 	addi	r2,r2,0
 8006aec:	10002626 	beq	r2,zero,8006b88 <__register_exitproc+0x110>
 8006af0:	01006404 	movi	r4,400
 8006af4:	d9400015 	stw	r5,0(sp)
 8006af8:	d9800115 	stw	r6,4(sp)
 8006afc:	d9c00215 	stw	r7,8(sp)
 8006b00:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8006b04:	d9400017 	ldw	r5,0(sp)
 8006b08:	d9800117 	ldw	r6,4(sp)
 8006b0c:	d9c00217 	ldw	r7,8(sp)
 8006b10:	10001d26 	beq	r2,zero,8006b88 <__register_exitproc+0x110>
 8006b14:	81000017 	ldw	r4,0(r16)
 8006b18:	10000115 	stw	zero,4(r2)
 8006b1c:	02000044 	movi	r8,1
 8006b20:	22405217 	ldw	r9,328(r4)
 8006b24:	0007883a 	mov	r3,zero
 8006b28:	12400015 	stw	r9,0(r2)
 8006b2c:	20805215 	stw	r2,328(r4)
 8006b30:	10006215 	stw	zero,392(r2)
 8006b34:	10006315 	stw	zero,396(r2)
 8006b38:	883fde26 	beq	r17,zero,8006ab4 <__register_exitproc+0x3c>
 8006b3c:	18c9883a 	add	r4,r3,r3
 8006b40:	2109883a 	add	r4,r4,r4
 8006b44:	1109883a 	add	r4,r2,r4
 8006b48:	21802215 	stw	r6,136(r4)
 8006b4c:	01800044 	movi	r6,1
 8006b50:	12406217 	ldw	r9,392(r2)
 8006b54:	30cc983a 	sll	r6,r6,r3
 8006b58:	4992b03a 	or	r9,r9,r6
 8006b5c:	12406215 	stw	r9,392(r2)
 8006b60:	21c04215 	stw	r7,264(r4)
 8006b64:	01000084 	movi	r4,2
 8006b68:	893fd21e 	bne	r17,r4,8006ab4 <__register_exitproc+0x3c>
 8006b6c:	11006317 	ldw	r4,396(r2)
 8006b70:	218cb03a 	or	r6,r4,r6
 8006b74:	11806315 	stw	r6,396(r2)
 8006b78:	003fce06 	br	8006ab4 <__register_exitproc+0x3c>
 8006b7c:	18805304 	addi	r2,r3,332
 8006b80:	18805215 	stw	r2,328(r3)
 8006b84:	003fc606 	br	8006aa0 <__register_exitproc+0x28>
 8006b88:	00bfffc4 	movi	r2,-1
 8006b8c:	003fd006 	br	8006ad0 <__register_exitproc+0x58>

08006b90 <__call_exitprocs>:
 8006b90:	defff504 	addi	sp,sp,-44
 8006b94:	df000915 	stw	fp,36(sp)
 8006b98:	dd400615 	stw	r21,24(sp)
 8006b9c:	dc800315 	stw	r18,12(sp)
 8006ba0:	dfc00a15 	stw	ra,40(sp)
 8006ba4:	ddc00815 	stw	r23,32(sp)
 8006ba8:	dd800715 	stw	r22,28(sp)
 8006bac:	dd000515 	stw	r20,20(sp)
 8006bb0:	dcc00415 	stw	r19,16(sp)
 8006bb4:	dc400215 	stw	r17,8(sp)
 8006bb8:	dc000115 	stw	r16,4(sp)
 8006bbc:	d9000015 	stw	r4,0(sp)
 8006bc0:	2839883a 	mov	fp,r5
 8006bc4:	04800044 	movi	r18,1
 8006bc8:	057fffc4 	movi	r21,-1
 8006bcc:	00820074 	movhi	r2,2049
 8006bd0:	10a20304 	addi	r2,r2,-30708
 8006bd4:	12000017 	ldw	r8,0(r2)
 8006bd8:	45005217 	ldw	r20,328(r8)
 8006bdc:	44c05204 	addi	r19,r8,328
 8006be0:	a0001c26 	beq	r20,zero,8006c54 <__call_exitprocs+0xc4>
 8006be4:	a0800117 	ldw	r2,4(r20)
 8006be8:	15ffffc4 	addi	r23,r2,-1
 8006bec:	b8000d16 	blt	r23,zero,8006c24 <__call_exitprocs+0x94>
 8006bf0:	14000044 	addi	r16,r2,1
 8006bf4:	8421883a 	add	r16,r16,r16
 8006bf8:	8421883a 	add	r16,r16,r16
 8006bfc:	84402004 	addi	r17,r16,128
 8006c00:	a463883a 	add	r17,r20,r17
 8006c04:	a421883a 	add	r16,r20,r16
 8006c08:	e0001e26 	beq	fp,zero,8006c84 <__call_exitprocs+0xf4>
 8006c0c:	80804017 	ldw	r2,256(r16)
 8006c10:	e0801c26 	beq	fp,r2,8006c84 <__call_exitprocs+0xf4>
 8006c14:	bdffffc4 	addi	r23,r23,-1
 8006c18:	843fff04 	addi	r16,r16,-4
 8006c1c:	8c7fff04 	addi	r17,r17,-4
 8006c20:	bd7ff91e 	bne	r23,r21,8006c08 <__call_exitprocs+0x78>
 8006c24:	00800034 	movhi	r2,0
 8006c28:	10800004 	addi	r2,r2,0
 8006c2c:	10000926 	beq	r2,zero,8006c54 <__call_exitprocs+0xc4>
 8006c30:	a0800117 	ldw	r2,4(r20)
 8006c34:	1000301e 	bne	r2,zero,8006cf8 <__call_exitprocs+0x168>
 8006c38:	a0800017 	ldw	r2,0(r20)
 8006c3c:	10003226 	beq	r2,zero,8006d08 <__call_exitprocs+0x178>
 8006c40:	a009883a 	mov	r4,r20
 8006c44:	98800015 	stw	r2,0(r19)
 8006c48:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8006c4c:	9d000017 	ldw	r20,0(r19)
 8006c50:	a03fe41e 	bne	r20,zero,8006be4 <__call_exitprocs+0x54>
 8006c54:	dfc00a17 	ldw	ra,40(sp)
 8006c58:	df000917 	ldw	fp,36(sp)
 8006c5c:	ddc00817 	ldw	r23,32(sp)
 8006c60:	dd800717 	ldw	r22,28(sp)
 8006c64:	dd400617 	ldw	r21,24(sp)
 8006c68:	dd000517 	ldw	r20,20(sp)
 8006c6c:	dcc00417 	ldw	r19,16(sp)
 8006c70:	dc800317 	ldw	r18,12(sp)
 8006c74:	dc400217 	ldw	r17,8(sp)
 8006c78:	dc000117 	ldw	r16,4(sp)
 8006c7c:	dec00b04 	addi	sp,sp,44
 8006c80:	f800283a 	ret
 8006c84:	a0800117 	ldw	r2,4(r20)
 8006c88:	80c00017 	ldw	r3,0(r16)
 8006c8c:	10bfffc4 	addi	r2,r2,-1
 8006c90:	15c01426 	beq	r2,r23,8006ce4 <__call_exitprocs+0x154>
 8006c94:	80000015 	stw	zero,0(r16)
 8006c98:	183fde26 	beq	r3,zero,8006c14 <__call_exitprocs+0x84>
 8006c9c:	95c8983a 	sll	r4,r18,r23
 8006ca0:	a0806217 	ldw	r2,392(r20)
 8006ca4:	a5800117 	ldw	r22,4(r20)
 8006ca8:	2084703a 	and	r2,r4,r2
 8006cac:	10000b26 	beq	r2,zero,8006cdc <__call_exitprocs+0x14c>
 8006cb0:	a0806317 	ldw	r2,396(r20)
 8006cb4:	2088703a 	and	r4,r4,r2
 8006cb8:	20000c1e 	bne	r4,zero,8006cec <__call_exitprocs+0x15c>
 8006cbc:	89400017 	ldw	r5,0(r17)
 8006cc0:	d9000017 	ldw	r4,0(sp)
 8006cc4:	183ee83a 	callr	r3
 8006cc8:	a0800117 	ldw	r2,4(r20)
 8006ccc:	15bfbf1e 	bne	r2,r22,8006bcc <__call_exitprocs+0x3c>
 8006cd0:	98800017 	ldw	r2,0(r19)
 8006cd4:	153fcf26 	beq	r2,r20,8006c14 <__call_exitprocs+0x84>
 8006cd8:	003fbc06 	br	8006bcc <__call_exitprocs+0x3c>
 8006cdc:	183ee83a 	callr	r3
 8006ce0:	003ff906 	br	8006cc8 <__call_exitprocs+0x138>
 8006ce4:	a5c00115 	stw	r23,4(r20)
 8006ce8:	003feb06 	br	8006c98 <__call_exitprocs+0x108>
 8006cec:	89000017 	ldw	r4,0(r17)
 8006cf0:	183ee83a 	callr	r3
 8006cf4:	003ff406 	br	8006cc8 <__call_exitprocs+0x138>
 8006cf8:	a0800017 	ldw	r2,0(r20)
 8006cfc:	a027883a 	mov	r19,r20
 8006d00:	1029883a 	mov	r20,r2
 8006d04:	003fb606 	br	8006be0 <__call_exitprocs+0x50>
 8006d08:	0005883a 	mov	r2,zero
 8006d0c:	003ffb06 	br	8006cfc <__call_exitprocs+0x16c>

08006d10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8006d10:	defffd04 	addi	sp,sp,-12
 8006d14:	df000215 	stw	fp,8(sp)
 8006d18:	df000204 	addi	fp,sp,8
 8006d1c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8006d20:	0001883a 	nop
 8006d24:	e0bfff17 	ldw	r2,-4(fp)
 8006d28:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8006d2c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8006d30:	10000226 	beq	r2,zero,8006d3c <_exit+0x2c>
    ALT_SIM_FAIL();
 8006d34:	002af070 	cmpltui	zero,zero,43969
 8006d38:	00000106 	br	8006d40 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8006d3c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8006d40:	003fff06 	br	8006d40 <_exit+0x30>
